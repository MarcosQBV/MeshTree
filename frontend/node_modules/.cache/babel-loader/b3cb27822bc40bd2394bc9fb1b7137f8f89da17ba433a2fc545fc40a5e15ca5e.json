{"ast":null,"code":"// Modify the collapseNodeAndDescendants function to set nodes as hidden instead of removing them\nconst collapseNodeAndDescendants = nodeId => {\n  const graph = graphRef.current;\n  const nodesToHide = new Set();\n  const edgesToHide = new Set();\n\n  // Collect direct children of the node to hide\n  graph.forEachOutboundNeighbor(nodeId, neighbor => {\n    nodesToHide.add(neighbor);\n  });\n\n  // Collect all edges connected to these nodes to hide\n  nodesToHide.forEach(node => {\n    graph.forEachEdge(node, edgeId => {\n      edgesToHide.add(edgeId);\n    });\n  });\n\n  // Set hidden attribute on nodes and edges to avoid deletion\n  nodesToHide.forEach(node => {\n    if (graph.hasNode(node)) {\n      graph.setNodeAttribute(node, 'hidden', true);\n    }\n  });\n  edgesToHide.forEach(edgeId => {\n    if (graph.hasEdge(edgeId)) {\n      graph.setEdgeAttribute(edgeId, 'hidden', true);\n    }\n  });\n\n  // Add the node and its children to the collapsed nodes set\n  setCollapsedNodes(prevCollapsed => {\n    const newCollapsed = new Set(prevCollapsed);\n    newCollapsed.add(nodeId);\n    nodesToHide.forEach(node => newCollapsed.add(node));\n    return newCollapsed;\n  });\n\n  // Refresh the graph\n  sigma.refresh();\n};\n\n// Update addNodesAndEdgesWithDelay to check for hidden nodes\nasync function addNodesAndEdgesWithDelay(nodes, graph, parentX, parentY, startAngle, angleSpread, radius, edges, level) {\n  for (const [index, node] of nodes.entries()) {\n    if (collapsedNodes.has(node.id) || graph.getNodeAttribute(node.id, 'hidden')) continue; // Skip hidden nodes\n\n    const angle = startAngle + index * angleSpread / Math.max(1, nodes.length - 1);\n    const x = parentX + radius * Math.cos(angle);\n    const y = parentY + radius * Math.sin(angle);\n\n    // Check if node is already added to avoid duplicates\n    if (!graph.hasNode(node.id)) {\n      graph.addNode(node.id, {\n        label: node.label,\n        size: 20,\n        color: 'black',\n        className: 'fade-in',\n        x: x,\n        y: y,\n        hidden: false\n      });\n      setNodeLevel(prevNodeLevel => [...prevNodeLevel, {\n        id: node.id,\n        label: node.label,\n        level: level\n      }]);\n    }\n    await sleep(100);\n\n    // Add edges related to this node if not hidden\n    edges.forEach(edge => {\n      if ((edge.source === node.id || edge.target === node.id) && !collapsedNodes.has(edge.source) && !collapsedNodes.has(edge.target)) {\n        if (!graph.hasEdge(edge.source, edge.target)) {\n          try {\n            graph.addEdge(edge.source, edge.target, {\n              hidden: false\n            });\n          } catch (error) {\n            console.warn(`Failed to add edge from ${edge.source} to ${edge.target}:`, error);\n          }\n        }\n      }\n    });\n    await sleep(50);\n  }\n}\n\n// Modify handleNodeClick to make nodes visible again when clicked\nconst handleNodeClick = nodeId => {\n  const newLabel = getNodeLabelById(nodeId, [...parentNodes, ...childNodes]);\n  console.log(`Node clicked: ${nodeId}, Label: ${newLabel}`);\n  if (newLabel) {\n    setCentralNode({\n      id: nodeId,\n      label: newLabel\n    });\n\n    // Show the node and its children by setting hidden attribute to false\n    const graph = graphRef.current;\n    graph.setNodeAttribute(nodeId, 'hidden', false);\n    graph.forEachOutboundNeighbor(nodeId, neighbor => {\n      graph.setNodeAttribute(neighbor, 'hidden', false);\n    });\n    setCollapsedNodes(prevCollapsed => {\n      const newCollapsed = new Set(prevCollapsed);\n      newCollapsed.delete(nodeId);\n      console.log('Collapsed nodes after click:', newCollapsed);\n      return newCollapsed;\n    });\n  } else {\n    console.warn(`Node label not found for ID: ${nodeId}`);\n  }\n  sigma.refresh();\n};","map":{"version":3,"names":["collapseNodeAndDescendants","nodeId","graph","graphRef","current","nodesToHide","Set","edgesToHide","forEachOutboundNeighbor","neighbor","add","forEach","node","forEachEdge","edgeId","hasNode","setNodeAttribute","hasEdge","setEdgeAttribute","setCollapsedNodes","prevCollapsed","newCollapsed","sigma","refresh","addNodesAndEdgesWithDelay","nodes","parentX","parentY","startAngle","angleSpread","radius","edges","level","index","entries","collapsedNodes","has","id","getNodeAttribute","angle","Math","max","length","x","cos","y","sin","addNode","label","size","color","className","hidden","setNodeLevel","prevNodeLevel","sleep","edge","source","target","addEdge","error","console","warn","handleNodeClick","newLabel","getNodeLabelById","parentNodes","childNodes","log","setCentralNode","delete"],"sources":["D:/code/MeshTree/frontend/src/GraphWrapper.jsx"],"sourcesContent":["// Modify the collapseNodeAndDescendants function to set nodes as hidden instead of removing them\r\nconst collapseNodeAndDescendants = (nodeId) => {\r\n  const graph = graphRef.current;\r\n\r\n  const nodesToHide = new Set();\r\n  const edgesToHide = new Set();\r\n\r\n  // Collect direct children of the node to hide\r\n  graph.forEachOutboundNeighbor(nodeId, (neighbor) => {\r\n    nodesToHide.add(neighbor);\r\n  });\r\n\r\n  // Collect all edges connected to these nodes to hide\r\n  nodesToHide.forEach((node) => {\r\n    graph.forEachEdge(node, (edgeId) => {\r\n      edgesToHide.add(edgeId);\r\n    });\r\n  });\r\n\r\n  // Set hidden attribute on nodes and edges to avoid deletion\r\n  nodesToHide.forEach((node) => {\r\n    if (graph.hasNode(node)) {\r\n      graph.setNodeAttribute(node, 'hidden', true);\r\n    }\r\n  });\r\n\r\n  edgesToHide.forEach((edgeId) => {\r\n    if (graph.hasEdge(edgeId)) {\r\n      graph.setEdgeAttribute(edgeId, 'hidden', true);\r\n    }\r\n  });\r\n\r\n  // Add the node and its children to the collapsed nodes set\r\n  setCollapsedNodes((prevCollapsed) => {\r\n    const newCollapsed = new Set(prevCollapsed);\r\n    newCollapsed.add(nodeId);\r\n    nodesToHide.forEach((node) => newCollapsed.add(node));\r\n    return newCollapsed;\r\n  });\r\n\r\n  // Refresh the graph\r\n  sigma.refresh();\r\n};\r\n\r\n// Update addNodesAndEdgesWithDelay to check for hidden nodes\r\nasync function addNodesAndEdgesWithDelay(nodes, graph, parentX, parentY, startAngle, angleSpread, radius, edges, level) {\r\n  for (const [index, node] of nodes.entries()) {\r\n    if (collapsedNodes.has(node.id) || graph.getNodeAttribute(node.id, 'hidden')) continue; // Skip hidden nodes\r\n\r\n    const angle = startAngle + (index * angleSpread) / Math.max(1, nodes.length - 1);\r\n    const x = parentX + radius * Math.cos(angle);\r\n    const y = parentY + radius * Math.sin(angle);\r\n\r\n    // Check if node is already added to avoid duplicates\r\n    if (!graph.hasNode(node.id)) {\r\n      graph.addNode(node.id, {\r\n        label: node.label,\r\n        size: 20,\r\n        color: 'black',\r\n        className: 'fade-in',\r\n        x: x,\r\n        y: y,\r\n        hidden: false\r\n      });\r\n\r\n      setNodeLevel((prevNodeLevel) => [\r\n        ...prevNodeLevel,\r\n        { id: node.id, label: node.label, level: level }\r\n      ]);\r\n    }\r\n\r\n    await sleep(100);\r\n\r\n    // Add edges related to this node if not hidden\r\n    edges.forEach((edge) => {\r\n      if (\r\n        (edge.source === node.id || edge.target === node.id) &&\r\n        !collapsedNodes.has(edge.source) &&\r\n        !collapsedNodes.has(edge.target)\r\n      ) {\r\n        if (!graph.hasEdge(edge.source, edge.target)) {\r\n          try {\r\n            graph.addEdge(edge.source, edge.target, { hidden: false });\r\n          } catch (error) {\r\n            console.warn(`Failed to add edge from ${edge.source} to ${edge.target}:`, error);\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    await sleep(50);\r\n  }\r\n}\r\n\r\n// Modify handleNodeClick to make nodes visible again when clicked\r\nconst handleNodeClick = (nodeId) => {\r\n  const newLabel = getNodeLabelById(nodeId, [...parentNodes, ...childNodes]);\r\n  console.log(`Node clicked: ${nodeId}, Label: ${newLabel}`);\r\n\r\n  if (newLabel) {\r\n    setCentralNode({ id: nodeId, label: newLabel });\r\n\r\n    // Show the node and its children by setting hidden attribute to false\r\n    const graph = graphRef.current;\r\n    graph.setNodeAttribute(nodeId, 'hidden', false);\r\n    graph.forEachOutboundNeighbor(nodeId, (neighbor) => {\r\n      graph.setNodeAttribute(neighbor, 'hidden', false);\r\n    });\r\n\r\n    setCollapsedNodes((prevCollapsed) => {\r\n      const newCollapsed = new Set(prevCollapsed);\r\n      newCollapsed.delete(nodeId);\r\n      console.log('Collapsed nodes after click:', newCollapsed);\r\n      return newCollapsed;\r\n    });\r\n  } else {\r\n    console.warn(`Node label not found for ID: ${nodeId}`);\r\n  }\r\n  sigma.refresh();\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}