{"ast":null,"code":"var _jsxFileName = \"D:\\\\code\\\\MeshTree\\\\frontend\\\\src\\\\GraphWrapper.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { SigmaContainer, useSigma } from '@react-sigma/core';\nimport Graph from 'graphology';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphComponent = () => {\n  _s();\n  const sigma = useSigma();\n  const [centralNode, setCentralNode] = useState({\n    id: 'Root',\n    label: 'Root'\n  });\n  const [parentNodes, setParentNodes] = useState([]);\n  const [childNodes, setChildNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  async function fetchDataForKey(key) {\n    const baseUrl = 'http://localhost:5000';\n    const url = `${baseUrl}/get/${key}`;\n    try {\n      const response = await fetch(url);\n      if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  }\n  function defineEdges(data) {\n    return [...data.children.map(childId => ({\n      source: childId,\n      target: centralNode.id\n    })), ...data.parents.map(parentId => ({\n      source: centralNode.id,\n      target: parentId\n    }))];\n  }\n  useEffect(() => {\n    setIsLoading(true);\n    fetchDataForKey(centralNode.id).then(data => {\n      if (data) {\n        setParentNodes(data.parents.map(id => ({\n          id,\n          label: id\n        })));\n        setChildNodes(data.children.map(id => ({\n          id,\n          label: id\n        })));\n        setEdges(defineEdges(data));\n      }\n      setIsLoading(false);\n    });\n  }, [centralNode]);\n  useEffect(() => {\n    if (!isLoading && sigma) {\n      const graph = new Graph();\n      graph.addNode(centralNode.id, {\n        label: centralNode.label,\n        size: 20,\n        color: 'black'\n      });\n      parentNodes.forEach(node => graph.addNode(node.id, {\n        label: node.label,\n        size: 20,\n        color: 'blue'\n      }));\n      childNodes.forEach(node => graph.addNode(node.id, {\n        label: node.label,\n        size: 20,\n        color: 'green'\n      }));\n      edges.forEach(edge => graph.addEdge(edge.source, edge.target));\n      sigma.setGraph(graph);\n      sigma.refresh();\n      sigma.getGraph().on('clickNode', event => {\n        const clickedNodeId = event.node;\n        const clickedNodeLabel = sigma.getGraph().getNodeAttribute(clickedNodeId, 'label');\n        setCentralNode({\n          id: clickedNodeId,\n          label: clickedNodeLabel\n        });\n      });\n    }\n  }, [sigma, parentNodes, childNodes, edges, isLoading]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 10\n  }, this);\n};\n_s(GraphComponent, \"D2hj4zS0RDxo1tF2jyT0UHOYfvQ=\", false, function () {\n  return [useSigma];\n});\n_c = GraphComponent;\nconst GraphWrapper = () => /*#__PURE__*/_jsxDEV(SigmaContainer, {\n  children: /*#__PURE__*/_jsxDEV(GraphComponent, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 68,\n  columnNumber: 3\n}, this);\n_c2 = GraphWrapper;\nexport default GraphWrapper;\nvar _c, _c2;\n$RefreshReg$(_c, \"GraphComponent\");\n$RefreshReg$(_c2, \"GraphWrapper\");","map":{"version":3,"names":["React","useEffect","useRef","useState","SigmaContainer","useSigma","Graph","jsxDEV","_jsxDEV","GraphComponent","_s","sigma","centralNode","setCentralNode","id","label","parentNodes","setParentNodes","childNodes","setChildNodes","edges","setEdges","isLoading","setIsLoading","fetchDataForKey","key","baseUrl","url","response","fetch","ok","Error","status","json","error","console","defineEdges","data","children","map","childId","source","target","parents","parentId","then","graph","addNode","size","color","forEach","node","edge","addEdge","setGraph","refresh","getGraph","on","event","clickedNodeId","clickedNodeLabel","getNodeAttribute","ref","containerRef","fileName","_jsxFileName","lineNumber","columnNumber","_c","GraphWrapper","_c2","$RefreshReg$"],"sources":["D:/code/MeshTree/frontend/src/GraphWrapper.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport { SigmaContainer, useSigma } from '@react-sigma/core';\r\nimport Graph from 'graphology';\r\n\r\nconst GraphComponent = () => {\r\n  const sigma = useSigma();\r\n  const [centralNode, setCentralNode] = useState({ id: 'Root', label: 'Root' });\r\n  const [parentNodes, setParentNodes] = useState([]);\r\n  const [childNodes, setChildNodes] = useState([]);\r\n  const [edges, setEdges] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  async function fetchDataForKey(key) {\r\n    const baseUrl = 'http://localhost:5000';\r\n    const url = `${baseUrl}/get/${key}`;\r\n    try {\r\n      const response = await fetch(url);\r\n      if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n    }\r\n  }\r\n\r\n  function defineEdges(data) {\r\n    return [\r\n      ...data.children.map((childId) => ({ source: childId, target: centralNode.id })),\r\n      ...data.parents.map((parentId) => ({ source: centralNode.id, target: parentId }))\r\n    ];\r\n  }\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    fetchDataForKey(centralNode.id).then((data) => {\r\n      if (data) {\r\n        setParentNodes(data.parents.map((id) => ({ id, label: id })));\r\n        setChildNodes(data.children.map((id) => ({ id, label: id })));\r\n        setEdges(defineEdges(data));\r\n      }\r\n      setIsLoading(false);\r\n    });\r\n  }, [centralNode]);\r\n\r\n  useEffect(() => {\r\n    if (!isLoading && sigma) {\r\n      const graph = new Graph();\r\n      graph.addNode(centralNode.id, { label: centralNode.label, size: 20, color: 'black' });\r\n\r\n      parentNodes.forEach((node) => graph.addNode(node.id, { label: node.label, size: 20, color: 'blue' }));\r\n      childNodes.forEach((node) => graph.addNode(node.id, { label: node.label, size: 20, color: 'green' }));\r\n      edges.forEach((edge) => graph.addEdge(edge.source, edge.target));\r\n\r\n      sigma.setGraph(graph);\r\n      sigma.refresh();\r\n\r\n      sigma.getGraph().on('clickNode', (event) => {\r\n        const clickedNodeId = event.node;\r\n        const clickedNodeLabel = sigma.getGraph().getNodeAttribute(clickedNodeId, 'label');\r\n        setCentralNode({ id: clickedNodeId, label: clickedNodeLabel });\r\n      });\r\n    }\r\n  }, [sigma, parentNodes, childNodes, edges, isLoading]);\r\n\r\n  return <div ref={containerRef} />;\r\n};\r\n\r\nconst GraphWrapper = () => (\r\n  <SigmaContainer>\r\n    <GraphComponent />\r\n  </SigmaContainer>\r\n);\r\n\r\nexport default GraphWrapper;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}