{"ast":null,"code":"var _jsxFileName = \"D:\\\\code\\\\MeshTree\\\\frontend\\\\src\\\\GraphWrapper.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { SigmaContainer, useSigma } from '@react-sigma/core';\nimport Graph from 'graphology';\n\n// Inject the CSS into the document\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst styleSheet = document.createElement(\"style\");\nstyleSheet.type = \"text/css\";\nstyleSheet.innerText = fadeInStyle;\ndocument.head.appendChild(styleSheet);\nasync function fetchDataForKey(key) {\n  const baseUrl = 'http://localhost:5000';\n  const url = `${baseUrl}/get/${key}`;\n  try {\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    const data = await response.json();\n    console.log('API Response:', data); // Log the API response\n    return data;\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    throw error;\n  }\n}\nfunction defineEdges(data, centralNodeId) {\n  const edges = [];\n  data.children.forEach(child => {\n    edges.push({\n      source: centralNodeId,\n      target: child.id\n    });\n  });\n  data.parents.forEach(parent => {\n    edges.push({\n      source: parent.id,\n      target: centralNodeId\n    });\n  });\n  return edges;\n}\nconst GraphComponent = () => {\n  _s();\n  const sigma = useSigma();\n  const graphRef = useRef(new Graph()); // Persistent graph instance\n  const [centralNode, setCentralNode] = useState({\n    id: '',\n    label: ''\n  });\n  const [parentNodes, setParentNodes] = useState([]);\n  const [childNodes, setChildNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const [collapsedNodes, setCollapsedNodes] = useState(new Set());\n  const [nodeData, setNodeData] = useState(new Map()); // Track node data\n  const [firstRun, setFirstRun] = useState(true); // Track if it's the first run\n\n  // Function to manually fade in the node\n  const fadeIn = Id => {\n    const graph = graphRef.current; // Access the graph instance\n    let opacity = 0;\n    const fadeInInterval = setInterval(() => {\n      opacity += 0.1; // Increase opacity\n      if (opacity >= 1) {\n        opacity = 1; // Cap opacity at 1\n        clearInterval(fadeInInterval); // Stop the interval when fully opaque\n      }\n      graph.setNodeAttribute(Id, 'color', `rgba(0, 0, 0, ${opacity})`);\n    }, 30); // Adjust the interval duration as needed\n  };\n\n  // Function to handle node clicks\n  const handleNodeClick = nodeId => {\n    console.log(`Node clicked: ${nodeId}`);\n    fetchDataForKey(nodeId).then(data => {\n      const central = data.central[0]; // Assuming central is an array with one element\n      setCentralNode({\n        id: central.id,\n        label: central.label\n      });\n      const parents = data.parents.map(({\n        id,\n        label\n      }) => ({\n        id: id,\n        label: label\n      }));\n      const children = data.children.map(({\n        id,\n        label\n      }) => ({\n        id: id,\n        label: label\n      }));\n      console.log('Fetched children:', children);\n      setParentNodes(parents);\n      setChildNodes(children);\n      setEdges(defineEdges(data, central.id));\n\n      // Remove children from the collapsed nodes set\n      setCollapsedNodes(prevCollapsed => {\n        const newCollapsed = new Set(prevCollapsed);\n        children.forEach(child => newCollapsed.delete(child.id));\n        console.log('Updated collapsedNodes:', newCollapsed);\n        return newCollapsed;\n      });\n    }).catch(error => {\n      console.error('Error fetching data for node click:', error);\n    });\n  };\n\n  // Function to handle right-click on nodes\n  const handleNodeRightClick = nodeId => {\n    console.log(`Node right-clicked: ${nodeId}`);\n    collapseNodeAndDescendants(nodeId);\n  };\n\n  // Function to collapse a node and its descendants\n  const collapseNodeAndDescendants = nodeId => {\n    const graph = graphRef.current;\n    const nodesToRemove = new Set();\n    const edgesToRemove = new Set();\n\n    // Collect direct children of the node\n    graph.forEachOutboundNeighbor(nodeId, neighbor => {\n      nodesToRemove.add(neighbor);\n    });\n\n    // Collect all edges connected to these nodes\n    nodesToRemove.forEach(node => {\n      graph.forEachEdge(node, (edgeId, attributes, source, target) => {\n        edgesToRemove.add(edgeId);\n      });\n    });\n\n    // Remove all collected edges and nodes\n    edgesToRemove.forEach(edgeId => {\n      if (graph.hasEdge(edgeId)) {\n        graph.dropEdge(edgeId);\n      }\n    });\n    nodesToRemove.forEach(node => {\n      if (graph.hasNode(node)) {\n        graph.dropNode(node);\n      }\n    });\n\n    // Add the node and its children to the collapsed nodes set\n    setCollapsedNodes(prevCollapsed => {\n      const newCollapsed = new Set(prevCollapsed);\n      newCollapsed.add(nodeId);\n      nodesToRemove.forEach(node => newCollapsed.add(node));\n      console.log(newCollapsed);\n      return newCollapsed;\n    });\n\n    // Refresh the graph\n    sigma.refresh();\n  };\n\n  // Function to add nodes and edges with a delay\n  async function addNodesAndEdgesWithDelay(nodes, graph, parentX, parentY, startAngle, angleSpread, radius, edges, isRoot = false) {\n    const spread = isRoot ? 2 * Math.PI : angleSpread; // 360 degrees for root, 90 degrees for others\n\n    for (const [index, node] of nodes.entries()) {\n      if (collapsedNodes.has(node.id)) continue; // Skip adding collapsed nodes\n\n      const angle = startAngle + index * spread / nodes.length;\n      const x = parentX + radius * Math.cos(angle);\n      const y = parentY + radius * Math.sin(angle);\n\n      // Update nodeData with the new x, y, and angle\n      setNodeData(NodeData => {\n        const newNodeData = new Map(NodeData);\n        newNodeData.set(node.id, {\n          x,\n          y,\n          angle\n        });\n        return newNodeData;\n      });\n      if (!graph.hasNode(node.id)) {\n        graph.addNode(node.id, {\n          label: node.label,\n          size: 20,\n          color: 'rgba(0, 0, 0, 0)',\n          x: x,\n          y: y\n        });\n        fadeIn(node.id);\n      }\n      await sleep(100); // Wait for 100ms\n\n      // Add edges related to this node\n      edges.forEach(edge => {\n        if ((edge.source === node.id || edge.target === node.id) && !collapsedNodes.has(edge.source) && !collapsedNodes.has(edge.target)) {\n          if (!graph.hasEdge(edge.source, edge.target)) {\n            try {\n              graph.addEdge(edge.source, edge.target);\n            } catch (error) {\n              console.warn(`Failed to add edge from ${edge.source} to ${edge.target}:`, error);\n            }\n          }\n        }\n      });\n      await sleep(50); // Wait for 50ms before adding the next edge\n    }\n  }\n\n  // Sleep function to pause execution\n  function sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  // Data fetching effect\n  useEffect(() => {\n    if (!centralNode.id) {\n      console.log('Central node ID is empty, fetching initial data...');\n      fetchDataForKey('Root').then(data => {\n        const central = data.central[0];\n        setCentralNode({\n          id: central.id,\n          label: central.label\n        });\n        const parents = data.parents.map(({\n          id,\n          label\n        }) => ({\n          id: id,\n          label: label\n        }));\n        const children = data.children.map(({\n          id,\n          label\n        }) => ({\n          id: id,\n          label: label\n        }));\n        console.log('Fetched children:', children);\n        setParentNodes(parents);\n        setChildNodes(children);\n        setEdges(defineEdges(data, central.id));\n\n        // Remove children from the collapsed nodes set\n        setCollapsedNodes(prevCollapsed => {\n          const newCollapsed = new Set(prevCollapsed);\n          children.forEach(child => newCollapsed.delete(child.id));\n          console.log('Updated collapsedNodes:', newCollapsed);\n          return newCollapsed;\n        });\n      }).catch(error => {\n        console.error('Error fetching initial data:', error);\n      });\n    }\n  }, [centralNode.id]); // Trigger fetching whenever centralNode.id changes\n\n  // Effect to update graph visualization\n  useEffect(() => {\n    if (!centralNode.id) return; // Ensure centralNode is set\n\n    const graph = graphRef.current; // Use the persistent graph instance\n\n    // Add central node if it doesn't exist\n    if (centralNode.id && !graph.hasNode(centralNode.id)) {\n      console.log('Adding central node to graph:', centralNode);\n      graph.addNode(centralNode.id, {\n        label: centralNode.label,\n        size: 20,\n        color: 'rgba(0, 0, 0, 0)',\n        // Start with transparent color\n        x: 0,\n        y: 0\n      });\n      fadeIn(centralNode.id);\n    }\n\n    // Add parent nodes and edges with delay\n    const parentAngleSpread = Math.PI / 2;\n    const parentRadius = 100;\n    const parentStartAngle = 3 * Math.PI / 4;\n    addNodesAndEdgesWithDelay(parentNodes, graph, 0, 0, parentStartAngle, parentAngleSpread, parentRadius, edges);\n    if (firstRun) {\n      console.log('First run: true');\n      // Add child nodes and edges with delay\n      const childAngleSpread = Math.PI * 2; // 360 degrees for the first run\n      const childRadius = 100;\n      const childStartAngle = 0; // Start angle for 360 degrees\n      addNodesAndEdgesWithDelay(childNodes, graph, 0, 0, childStartAngle, childAngleSpread, childRadius, edges, true);\n\n      // Set firstRun to false after the initial rendering\n      setFirstRun(false);\n    } else {\n      console.log('First run: false');\n      // Retrieve the parent's angle to calculate the starting angle for children\n      const centralNodeInfo = nodeData.get(centralNode.id);\n      console.log(centralNodeInfo);\n      const centralX = centralNodeInfo.x;\n      const centralY = centralNodeInfo.y;\n      const centralAngle = centralNodeInfo.angle;\n      const childAngleSpread = Math.PI / 2;\n      const childRadius = 170;\n      const childStartAngle = centralAngle - Math.PI / 8; // Start angle based on parent's angle\n      addNodesAndEdgesWithDelay(childNodes, graph, centralX, centralY, childStartAngle, childAngleSpread, childRadius, edges);\n    }\n\n    // Clear any existing click handlers\n    sigma.removeAllListeners('clickNode');\n\n    // Set up click handler\n    sigma.on('clickNode', event => {\n      console.log('Node clicked event:', event);\n      handleNodeClick(event.node);\n    });\n\n    // Set up right-click handler\n    sigma.on('rightClickNode', event => {\n      console.log('Node right-click event:', event);\n      handleNodeRightClick(event.node);\n    });\n\n    // Set the graph to Sigma and refresh\n    sigma.setGraph(graph);\n    sigma.refresh();\n\n    // Cleanup function\n    return () => {\n      sigma.removeAllListeners('clickNode');\n      sigma.removeAllListeners('rightClickNode');\n    };\n  }, [sigma, parentNodes, childNodes, edges, centralNode, collapsedNodes]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 317,\n    columnNumber: 10\n  }, this);\n};\n_s(GraphComponent, \"9yABgvMvpPWhduYnkPl9IrnfTs4=\", false, function () {\n  return [useSigma];\n});\n_c = GraphComponent;\nconst GraphWrapper = () => /*#__PURE__*/_jsxDEV(SigmaContainer, {\n  children: /*#__PURE__*/_jsxDEV(GraphComponent, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 322,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 321,\n  columnNumber: 3\n}, this);\n_c2 = GraphWrapper;\nexport default GraphWrapper;\nvar _c, _c2;\n$RefreshReg$(_c, \"GraphComponent\");\n$RefreshReg$(_c2, \"GraphWrapper\");","map":{"version":3,"names":["React","useEffect","useRef","useState","SigmaContainer","useSigma","Graph","jsxDEV","_jsxDEV","styleSheet","document","createElement","type","innerText","fadeInStyle","head","appendChild","fetchDataForKey","key","baseUrl","url","response","fetch","ok","Error","status","data","json","console","log","error","defineEdges","centralNodeId","edges","children","forEach","child","push","source","target","id","parents","parent","GraphComponent","_s","sigma","graphRef","centralNode","setCentralNode","label","parentNodes","setParentNodes","childNodes","setChildNodes","setEdges","collapsedNodes","setCollapsedNodes","Set","nodeData","setNodeData","Map","firstRun","setFirstRun","fadeIn","Id","graph","current","opacity","fadeInInterval","setInterval","clearInterval","setNodeAttribute","handleNodeClick","nodeId","then","central","map","prevCollapsed","newCollapsed","delete","catch","handleNodeRightClick","collapseNodeAndDescendants","nodesToRemove","edgesToRemove","forEachOutboundNeighbor","neighbor","add","node","forEachEdge","edgeId","attributes","hasEdge","dropEdge","hasNode","dropNode","refresh","addNodesAndEdgesWithDelay","nodes","parentX","parentY","startAngle","angleSpread","radius","isRoot","spread","Math","PI","index","entries","has","angle","length","x","cos","y","sin","NodeData","newNodeData","set","addNode","size","color","sleep","edge","addEdge","warn","ms","Promise","resolve","setTimeout","parentAngleSpread","parentRadius","parentStartAngle","childAngleSpread","childRadius","childStartAngle","centralNodeInfo","get","centralX","centralY","centralAngle","removeAllListeners","on","event","setGraph","fileName","_jsxFileName","lineNumber","columnNumber","_c","GraphWrapper","_c2","$RefreshReg$"],"sources":["D:/code/MeshTree/frontend/src/GraphWrapper.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport { SigmaContainer, useSigma } from '@react-sigma/core';\r\nimport Graph from 'graphology';\r\n\r\n// Inject the CSS into the document\r\nconst styleSheet = document.createElement(\"style\");\r\nstyleSheet.type = \"text/css\";\r\nstyleSheet.innerText = fadeInStyle;\r\ndocument.head.appendChild(styleSheet);\r\n\r\nasync function fetchDataForKey(key) {\r\n  const baseUrl = 'http://localhost:5000';\r\n  const url = `${baseUrl}/get/${key}`;\r\n\r\n  try {\r\n    const response = await fetch(url);\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! Status: ${response.status}`);\r\n    }\r\n    const data = await response.json();\r\n    console.log('API Response:', data); // Log the API response\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error fetching data:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nfunction defineEdges(data, centralNodeId) {\r\n  const edges = [];\r\n  data.children.forEach((child) => {\r\n    edges.push({ source: centralNodeId, target: child.id });\r\n  });\r\n  data.parents.forEach((parent) => {\r\n    edges.push({ source: parent.id, target: centralNodeId });\r\n  });\r\n  return edges;\r\n}\r\n\r\nconst GraphComponent = () => {\r\n  const sigma = useSigma();\r\n  const graphRef = useRef(new Graph()); // Persistent graph instance\r\n  const [centralNode, setCentralNode] = useState({ id: '', label: '' });\r\n  const [parentNodes, setParentNodes] = useState([]);\r\n  const [childNodes, setChildNodes] = useState([]);\r\n  const [edges, setEdges] = useState([]);\r\n  const [collapsedNodes, setCollapsedNodes] = useState(new Set());\r\n  const [nodeData, setNodeData] = useState(new Map()); // Track node data\r\n  const [firstRun, setFirstRun] = useState(true); // Track if it's the first run\r\n\r\n  // Function to manually fade in the node\r\n  const fadeIn = (Id) => {\r\n    const graph = graphRef.current; // Access the graph instance\r\n    let opacity = 0;\r\n    const fadeInInterval = setInterval(() => {\r\n      opacity += 0.1; // Increase opacity\r\n      if (opacity >= 1) {\r\n        opacity = 1; // Cap opacity at 1\r\n        clearInterval(fadeInInterval); // Stop the interval when fully opaque\r\n      }\r\n      graph.setNodeAttribute(Id, 'color', `rgba(0, 0, 0, ${opacity})`);\r\n    }, 30); // Adjust the interval duration as needed\r\n  };\r\n\r\n  // Function to handle node clicks\r\n  const handleNodeClick = (nodeId) => {\r\n    console.log(`Node clicked: ${nodeId}`);\r\n    fetchDataForKey(nodeId)\r\n      .then((data) => {\r\n        const central = data.central[0]; // Assuming central is an array with one element\r\n        setCentralNode({ id: central.id, label: central.label });\r\n\r\n        const parents = data.parents.map(({ id, label }) => ({\r\n          id: id,\r\n          label: label\r\n        }));\r\n\r\n        const children = data.children.map(({ id, label }) => ({\r\n          id: id,\r\n          label: label\r\n        }));\r\n\r\n        console.log('Fetched children:', children);\r\n        setParentNodes(parents);\r\n        setChildNodes(children);\r\n        setEdges(defineEdges(data, central.id));\r\n\r\n        // Remove children from the collapsed nodes set\r\n        setCollapsedNodes((prevCollapsed) => {\r\n          const newCollapsed = new Set(prevCollapsed);\r\n          children.forEach((child) => newCollapsed.delete(child.id));\r\n          console.log('Updated collapsedNodes:', newCollapsed);\r\n          return newCollapsed;\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error fetching data for node click:', error);\r\n      });\r\n  };\r\n\r\n  // Function to handle right-click on nodes\r\n  const handleNodeRightClick = (nodeId) => {\r\n    console.log(`Node right-clicked: ${nodeId}`);\r\n    collapseNodeAndDescendants(nodeId);\r\n  };\r\n\r\n  // Function to collapse a node and its descendants\r\n  const collapseNodeAndDescendants = (nodeId) => {\r\n    const graph = graphRef.current;\r\n    const nodesToRemove = new Set();\r\n    const edgesToRemove = new Set();\r\n\r\n    // Collect direct children of the node\r\n    graph.forEachOutboundNeighbor(nodeId, (neighbor) => {\r\n      nodesToRemove.add(neighbor);\r\n    });\r\n\r\n    // Collect all edges connected to these nodes\r\n    nodesToRemove.forEach((node) => {\r\n      graph.forEachEdge(node, (edgeId, attributes, source, target) => {\r\n        edgesToRemove.add(edgeId);\r\n      });\r\n    });\r\n\r\n    // Remove all collected edges and nodes\r\n    edgesToRemove.forEach((edgeId) => {\r\n      if (graph.hasEdge(edgeId)) {\r\n        graph.dropEdge(edgeId);\r\n      }\r\n    });\r\n    nodesToRemove.forEach((node) => {\r\n      if (graph.hasNode(node)) {\r\n        graph.dropNode(node);\r\n      }\r\n    });\r\n\r\n    // Add the node and its children to the collapsed nodes set\r\n    setCollapsedNodes((prevCollapsed) => {\r\n      const newCollapsed = new Set(prevCollapsed);\r\n      newCollapsed.add(nodeId);\r\n      nodesToRemove.forEach((node) => newCollapsed.add(node));\r\n      console.log(newCollapsed);\r\n      return newCollapsed;\r\n    });\r\n\r\n    // Refresh the graph\r\n    sigma.refresh();\r\n  };\r\n\r\n  // Function to add nodes and edges with a delay\r\n  async function addNodesAndEdgesWithDelay(nodes, graph, parentX, parentY, startAngle, angleSpread, radius, edges, isRoot = false) {\r\n    const spread = isRoot ? 2 * Math.PI : angleSpread; // 360 degrees for root, 90 degrees for others\r\n\r\n    for (const [index, node] of nodes.entries()) {\r\n      if (collapsedNodes.has(node.id)) continue; // Skip adding collapsed nodes\r\n\r\n      const angle = startAngle + (index * spread) / (nodes.length);\r\n      const x = parentX + radius * Math.cos(angle);\r\n      const y = parentY + radius * Math.sin(angle);\r\n\r\n      // Update nodeData with the new x, y, and angle\r\n      setNodeData((NodeData) => {\r\n        const newNodeData = new Map(NodeData);\r\n        newNodeData.set(node.id, { x, y, angle });\r\n        return newNodeData;\r\n      });\r\n\r\n      if (!graph.hasNode(node.id)) {\r\n        graph.addNode(node.id, {\r\n          label: node.label,\r\n          size: 20,\r\n          color: 'rgba(0, 0, 0, 0)',\r\n          x: x,\r\n          y: y\r\n        });\r\n        fadeIn(node.id)\r\n      }\r\n      \r\n\r\n      await sleep(100); // Wait for 100ms\r\n\r\n      // Add edges related to this node\r\n      edges.forEach(edge => {\r\n        if ((edge.source === node.id || edge.target === node.id) && !collapsedNodes.has(edge.source) && !collapsedNodes.has(edge.target)) {\r\n          if (!graph.hasEdge(edge.source, edge.target)) {\r\n            try {\r\n              graph.addEdge(edge.source, edge.target);\r\n            } catch (error) {\r\n              console.warn(`Failed to add edge from ${edge.source} to ${edge.target}:`, error);\r\n            }\r\n          }\r\n        }\r\n      });\r\n      await sleep(50); // Wait for 50ms before adding the next edge\r\n    }\r\n  }\r\n\r\n  // Sleep function to pause execution\r\n  function sleep(ms) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n  }\r\n\r\n  // Data fetching effect\r\n  useEffect(() => {\r\n    if (!centralNode.id) {\r\n      console.log('Central node ID is empty, fetching initial data...');\r\n      fetchDataForKey('Root') \r\n        .then((data) => {\r\n          const central = data.central[0]; \r\n          setCentralNode({ id: central.id, label: central.label });\r\n\r\n          const parents = data.parents.map(({ id, label }) => ({\r\n            id: id,\r\n            label: label\r\n          }));\r\n\r\n          const children = data.children.map(({ id, label }) => ({\r\n            id: id,\r\n            label: label\r\n          }));\r\n\r\n          console.log('Fetched children:', children);\r\n          setParentNodes(parents);\r\n          setChildNodes(children);\r\n          setEdges(defineEdges(data, central.id));\r\n\r\n          // Remove children from the collapsed nodes set\r\n          setCollapsedNodes((prevCollapsed) => {\r\n            const newCollapsed = new Set(prevCollapsed);\r\n            children.forEach((child) => newCollapsed.delete(child.id));\r\n            console.log('Updated collapsedNodes:', newCollapsed);\r\n            return newCollapsed;\r\n          });\r\n        })\r\n        .catch((error) => {\r\n          console.error('Error fetching initial data:', error);\r\n        });\r\n    }\r\n  }, [centralNode.id]); // Trigger fetching whenever centralNode.id changes\r\n  \r\n  // Effect to update graph visualization\r\n  useEffect(() => {\r\n    if (!centralNode.id) return; // Ensure centralNode is set\r\n\r\n    const graph = graphRef.current; // Use the persistent graph instance\r\n\r\n\r\n    // Add central node if it doesn't exist\r\n    if (centralNode.id && !graph.hasNode(centralNode.id)) {\r\n      console.log('Adding central node to graph:', centralNode);\r\n      graph.addNode(centralNode.id, {\r\n        label: centralNode.label,\r\n        size: 20,\r\n        color: 'rgba(0, 0, 0, 0)', // Start with transparent color\r\n        x: 0,\r\n        y: 0\r\n      });\r\n      fadeIn(centralNode.id)\r\n    }\r\n\r\n    // Add parent nodes and edges with delay\r\n    const parentAngleSpread = Math.PI / 2;\r\n    const parentRadius = 100;\r\n    const parentStartAngle = 3 * Math.PI / 4;\r\n    addNodesAndEdgesWithDelay(parentNodes, graph, 0, 0, parentStartAngle, parentAngleSpread, parentRadius, edges);\r\n\r\n    if (firstRun) {\r\n      console.log('First run: true');\r\n      // Add child nodes and edges with delay\r\n      const childAngleSpread = Math.PI * 2; // 360 degrees for the first run\r\n      const childRadius = 100;\r\n      const childStartAngle = 0; // Start angle for 360 degrees\r\n      addNodesAndEdgesWithDelay(childNodes, graph, 0, 0, childStartAngle, childAngleSpread, childRadius, edges, true);\r\n\r\n      // Set firstRun to false after the initial rendering\r\n      setFirstRun(false);\r\n    } else {\r\n      console.log('First run: false');\r\n      // Retrieve the parent's angle to calculate the starting angle for children\r\n      const centralNodeInfo = nodeData.get(centralNode.id);\r\n      console.log(centralNodeInfo);\r\n      const centralX = centralNodeInfo.x;\r\n      const centralY = centralNodeInfo.y;\r\n      const centralAngle = centralNodeInfo.angle; \r\n      const childAngleSpread = Math.PI / 2;\r\n      const childRadius = 170;\r\n      const childStartAngle = centralAngle - (Math.PI / 8); // Start angle based on parent's angle\r\n      addNodesAndEdgesWithDelay(childNodes, graph, centralX, centralY, childStartAngle, childAngleSpread, childRadius, edges);\r\n    }\r\n\r\n    // Clear any existing click handlers\r\n    sigma.removeAllListeners('clickNode');\r\n\r\n    // Set up click handler\r\n    sigma.on('clickNode', (event) => {\r\n      console.log('Node clicked event:', event);\r\n      handleNodeClick(event.node);\r\n    });\r\n\r\n    // Set up right-click handler\r\n    sigma.on('rightClickNode', (event) => {\r\n      console.log('Node right-click event:', event);\r\n      handleNodeRightClick(event.node);\r\n    });\r\n\r\n    // Set the graph to Sigma and refresh\r\n    sigma.setGraph(graph);\r\n    sigma.refresh();\r\n\r\n    // Cleanup function\r\n    return () => {\r\n      sigma.removeAllListeners('clickNode');\r\n      sigma.removeAllListeners('rightClickNode');\r\n    };\r\n  }, [sigma, parentNodes, childNodes, edges, centralNode, collapsedNodes]); \r\n\r\n  return <div />;\r\n};\r\n\r\nconst GraphWrapper = () => (\r\n  <SigmaContainer>\r\n    <GraphComponent />\r\n  </SigmaContainer>\r\n);\r\n\r\nexport default GraphWrapper;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,SAASC,cAAc,EAAEC,QAAQ,QAAQ,mBAAmB;AAC5D,OAAOC,KAAK,MAAM,YAAY;;AAE9B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,UAAU,GAAGC,QAAQ,CAACC,aAAa,CAAC,OAAO,CAAC;AAClDF,UAAU,CAACG,IAAI,GAAG,UAAU;AAC5BH,UAAU,CAACI,SAAS,GAAGC,WAAW;AAClCJ,QAAQ,CAACK,IAAI,CAACC,WAAW,CAACP,UAAU,CAAC;AAErC,eAAeQ,eAAeA,CAACC,GAAG,EAAE;EAClC,MAAMC,OAAO,GAAG,uBAAuB;EACvC,MAAMC,GAAG,GAAG,GAAGD,OAAO,QAAQD,GAAG,EAAE;EAEnC,IAAI;IACF,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAG,CAAC;IACjC,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBH,QAAQ,CAACI,MAAM,EAAE,CAAC;IAC3D;IACA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;IAClCC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEH,IAAI,CAAC,CAAC,CAAC;IACpC,OAAOA,IAAI;EACb,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdF,OAAO,CAACE,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,MAAMA,KAAK;EACb;AACF;AAEA,SAASC,WAAWA,CAACL,IAAI,EAAEM,aAAa,EAAE;EACxC,MAAMC,KAAK,GAAG,EAAE;EAChBP,IAAI,CAACQ,QAAQ,CAACC,OAAO,CAAEC,KAAK,IAAK;IAC/BH,KAAK,CAACI,IAAI,CAAC;MAAEC,MAAM,EAAEN,aAAa;MAAEO,MAAM,EAAEH,KAAK,CAACI;IAAG,CAAC,CAAC;EACzD,CAAC,CAAC;EACFd,IAAI,CAACe,OAAO,CAACN,OAAO,CAAEO,MAAM,IAAK;IAC/BT,KAAK,CAACI,IAAI,CAAC;MAAEC,MAAM,EAAEI,MAAM,CAACF,EAAE;MAAED,MAAM,EAAEP;IAAc,CAAC,CAAC;EAC1D,CAAC,CAAC;EACF,OAAOC,KAAK;AACd;AAEA,MAAMU,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAMC,KAAK,GAAGxC,QAAQ,CAAC,CAAC;EACxB,MAAMyC,QAAQ,GAAG5C,MAAM,CAAC,IAAII,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;EACtC,MAAM,CAACyC,WAAW,EAAEC,cAAc,CAAC,GAAG7C,QAAQ,CAAC;IAAEqC,EAAE,EAAE,EAAE;IAAES,KAAK,EAAE;EAAG,CAAC,CAAC;EACrE,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGhD,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACiD,UAAU,EAAEC,aAAa,CAAC,GAAGlD,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAAC8B,KAAK,EAAEqB,QAAQ,CAAC,GAAGnD,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACoD,cAAc,EAAEC,iBAAiB,CAAC,GAAGrD,QAAQ,CAAC,IAAIsD,GAAG,CAAC,CAAC,CAAC;EAC/D,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGxD,QAAQ,CAAC,IAAIyD,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACrD,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAG3D,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAEhD;EACA,MAAM4D,MAAM,GAAIC,EAAE,IAAK;IACrB,MAAMC,KAAK,GAAGnB,QAAQ,CAACoB,OAAO,CAAC,CAAC;IAChC,IAAIC,OAAO,GAAG,CAAC;IACf,MAAMC,cAAc,GAAGC,WAAW,CAAC,MAAM;MACvCF,OAAO,IAAI,GAAG,CAAC,CAAC;MAChB,IAAIA,OAAO,IAAI,CAAC,EAAE;QAChBA,OAAO,GAAG,CAAC,CAAC,CAAC;QACbG,aAAa,CAACF,cAAc,CAAC,CAAC,CAAC;MACjC;MACAH,KAAK,CAACM,gBAAgB,CAACP,EAAE,EAAE,OAAO,EAAE,iBAAiBG,OAAO,GAAG,CAAC;IAClE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;EACV,CAAC;;EAED;EACA,MAAMK,eAAe,GAAIC,MAAM,IAAK;IAClC7C,OAAO,CAACC,GAAG,CAAC,iBAAiB4C,MAAM,EAAE,CAAC;IACtCxD,eAAe,CAACwD,MAAM,CAAC,CACpBC,IAAI,CAAEhD,IAAI,IAAK;MACd,MAAMiD,OAAO,GAAGjD,IAAI,CAACiD,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;MACjC3B,cAAc,CAAC;QAAER,EAAE,EAAEmC,OAAO,CAACnC,EAAE;QAAES,KAAK,EAAE0B,OAAO,CAAC1B;MAAM,CAAC,CAAC;MAExD,MAAMR,OAAO,GAAGf,IAAI,CAACe,OAAO,CAACmC,GAAG,CAAC,CAAC;QAAEpC,EAAE;QAAES;MAAM,CAAC,MAAM;QACnDT,EAAE,EAAEA,EAAE;QACNS,KAAK,EAAEA;MACT,CAAC,CAAC,CAAC;MAEH,MAAMf,QAAQ,GAAGR,IAAI,CAACQ,QAAQ,CAAC0C,GAAG,CAAC,CAAC;QAAEpC,EAAE;QAAES;MAAM,CAAC,MAAM;QACrDT,EAAE,EAAEA,EAAE;QACNS,KAAK,EAAEA;MACT,CAAC,CAAC,CAAC;MAEHrB,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEK,QAAQ,CAAC;MAC1CiB,cAAc,CAACV,OAAO,CAAC;MACvBY,aAAa,CAACnB,QAAQ,CAAC;MACvBoB,QAAQ,CAACvB,WAAW,CAACL,IAAI,EAAEiD,OAAO,CAACnC,EAAE,CAAC,CAAC;;MAEvC;MACAgB,iBAAiB,CAAEqB,aAAa,IAAK;QACnC,MAAMC,YAAY,GAAG,IAAIrB,GAAG,CAACoB,aAAa,CAAC;QAC3C3C,QAAQ,CAACC,OAAO,CAAEC,KAAK,IAAK0C,YAAY,CAACC,MAAM,CAAC3C,KAAK,CAACI,EAAE,CAAC,CAAC;QAC1DZ,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEiD,YAAY,CAAC;QACpD,OAAOA,YAAY;MACrB,CAAC,CAAC;IACJ,CAAC,CAAC,CACDE,KAAK,CAAElD,KAAK,IAAK;MAChBF,OAAO,CAACE,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;IAC7D,CAAC,CAAC;EACN,CAAC;;EAED;EACA,MAAMmD,oBAAoB,GAAIR,MAAM,IAAK;IACvC7C,OAAO,CAACC,GAAG,CAAC,uBAAuB4C,MAAM,EAAE,CAAC;IAC5CS,0BAA0B,CAACT,MAAM,CAAC;EACpC,CAAC;;EAED;EACA,MAAMS,0BAA0B,GAAIT,MAAM,IAAK;IAC7C,MAAMR,KAAK,GAAGnB,QAAQ,CAACoB,OAAO;IAC9B,MAAMiB,aAAa,GAAG,IAAI1B,GAAG,CAAC,CAAC;IAC/B,MAAM2B,aAAa,GAAG,IAAI3B,GAAG,CAAC,CAAC;;IAE/B;IACAQ,KAAK,CAACoB,uBAAuB,CAACZ,MAAM,EAAGa,QAAQ,IAAK;MAClDH,aAAa,CAACI,GAAG,CAACD,QAAQ,CAAC;IAC7B,CAAC,CAAC;;IAEF;IACAH,aAAa,CAAChD,OAAO,CAAEqD,IAAI,IAAK;MAC9BvB,KAAK,CAACwB,WAAW,CAACD,IAAI,EAAE,CAACE,MAAM,EAAEC,UAAU,EAAErD,MAAM,EAAEC,MAAM,KAAK;QAC9D6C,aAAa,CAACG,GAAG,CAACG,MAAM,CAAC;MAC3B,CAAC,CAAC;IACJ,CAAC,CAAC;;IAEF;IACAN,aAAa,CAACjD,OAAO,CAAEuD,MAAM,IAAK;MAChC,IAAIzB,KAAK,CAAC2B,OAAO,CAACF,MAAM,CAAC,EAAE;QACzBzB,KAAK,CAAC4B,QAAQ,CAACH,MAAM,CAAC;MACxB;IACF,CAAC,CAAC;IACFP,aAAa,CAAChD,OAAO,CAAEqD,IAAI,IAAK;MAC9B,IAAIvB,KAAK,CAAC6B,OAAO,CAACN,IAAI,CAAC,EAAE;QACvBvB,KAAK,CAAC8B,QAAQ,CAACP,IAAI,CAAC;MACtB;IACF,CAAC,CAAC;;IAEF;IACAhC,iBAAiB,CAAEqB,aAAa,IAAK;MACnC,MAAMC,YAAY,GAAG,IAAIrB,GAAG,CAACoB,aAAa,CAAC;MAC3CC,YAAY,CAACS,GAAG,CAACd,MAAM,CAAC;MACxBU,aAAa,CAAChD,OAAO,CAAEqD,IAAI,IAAKV,YAAY,CAACS,GAAG,CAACC,IAAI,CAAC,CAAC;MACvD5D,OAAO,CAACC,GAAG,CAACiD,YAAY,CAAC;MACzB,OAAOA,YAAY;IACrB,CAAC,CAAC;;IAEF;IACAjC,KAAK,CAACmD,OAAO,CAAC,CAAC;EACjB,CAAC;;EAED;EACA,eAAeC,yBAAyBA,CAACC,KAAK,EAAEjC,KAAK,EAAEkC,OAAO,EAAEC,OAAO,EAAEC,UAAU,EAAEC,WAAW,EAAEC,MAAM,EAAEtE,KAAK,EAAEuE,MAAM,GAAG,KAAK,EAAE;IAC/H,MAAMC,MAAM,GAAGD,MAAM,GAAG,CAAC,GAAGE,IAAI,CAACC,EAAE,GAAGL,WAAW,CAAC,CAAC;;IAEnD,KAAK,MAAM,CAACM,KAAK,EAAEpB,IAAI,CAAC,IAAIU,KAAK,CAACW,OAAO,CAAC,CAAC,EAAE;MAC3C,IAAItD,cAAc,CAACuD,GAAG,CAACtB,IAAI,CAAChD,EAAE,CAAC,EAAE,SAAS,CAAC;;MAE3C,MAAMuE,KAAK,GAAGV,UAAU,GAAIO,KAAK,GAAGH,MAAM,GAAKP,KAAK,CAACc,MAAO;MAC5D,MAAMC,CAAC,GAAGd,OAAO,GAAGI,MAAM,GAAGG,IAAI,CAACQ,GAAG,CAACH,KAAK,CAAC;MAC5C,MAAMI,CAAC,GAAGf,OAAO,GAAGG,MAAM,GAAGG,IAAI,CAACU,GAAG,CAACL,KAAK,CAAC;;MAE5C;MACApD,WAAW,CAAE0D,QAAQ,IAAK;QACxB,MAAMC,WAAW,GAAG,IAAI1D,GAAG,CAACyD,QAAQ,CAAC;QACrCC,WAAW,CAACC,GAAG,CAAC/B,IAAI,CAAChD,EAAE,EAAE;UAAEyE,CAAC;UAAEE,CAAC;UAAEJ;QAAM,CAAC,CAAC;QACzC,OAAOO,WAAW;MACpB,CAAC,CAAC;MAEF,IAAI,CAACrD,KAAK,CAAC6B,OAAO,CAACN,IAAI,CAAChD,EAAE,CAAC,EAAE;QAC3ByB,KAAK,CAACuD,OAAO,CAAChC,IAAI,CAAChD,EAAE,EAAE;UACrBS,KAAK,EAAEuC,IAAI,CAACvC,KAAK;UACjBwE,IAAI,EAAE,EAAE;UACRC,KAAK,EAAE,kBAAkB;UACzBT,CAAC,EAAEA,CAAC;UACJE,CAAC,EAAEA;QACL,CAAC,CAAC;QACFpD,MAAM,CAACyB,IAAI,CAAChD,EAAE,CAAC;MACjB;MAGA,MAAMmF,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;;MAElB;MACA1F,KAAK,CAACE,OAAO,CAACyF,IAAI,IAAI;QACpB,IAAI,CAACA,IAAI,CAACtF,MAAM,KAAKkD,IAAI,CAAChD,EAAE,IAAIoF,IAAI,CAACrF,MAAM,KAAKiD,IAAI,CAAChD,EAAE,KAAK,CAACe,cAAc,CAACuD,GAAG,CAACc,IAAI,CAACtF,MAAM,CAAC,IAAI,CAACiB,cAAc,CAACuD,GAAG,CAACc,IAAI,CAACrF,MAAM,CAAC,EAAE;UAChI,IAAI,CAAC0B,KAAK,CAAC2B,OAAO,CAACgC,IAAI,CAACtF,MAAM,EAAEsF,IAAI,CAACrF,MAAM,CAAC,EAAE;YAC5C,IAAI;cACF0B,KAAK,CAAC4D,OAAO,CAACD,IAAI,CAACtF,MAAM,EAAEsF,IAAI,CAACrF,MAAM,CAAC;YACzC,CAAC,CAAC,OAAOT,KAAK,EAAE;cACdF,OAAO,CAACkG,IAAI,CAAC,2BAA2BF,IAAI,CAACtF,MAAM,OAAOsF,IAAI,CAACrF,MAAM,GAAG,EAAET,KAAK,CAAC;YAClF;UACF;QACF;MACF,CAAC,CAAC;MACF,MAAM6F,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC;IACnB;EACF;;EAEA;EACA,SAASA,KAAKA,CAACI,EAAE,EAAE;IACjB,OAAO,IAAIC,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAEF,EAAE,CAAC,CAAC;EACxD;;EAEA;EACA9H,SAAS,CAAC,MAAM;IACd,IAAI,CAAC8C,WAAW,CAACP,EAAE,EAAE;MACnBZ,OAAO,CAACC,GAAG,CAAC,oDAAoD,CAAC;MACjEZ,eAAe,CAAC,MAAM,CAAC,CACpByD,IAAI,CAAEhD,IAAI,IAAK;QACd,MAAMiD,OAAO,GAAGjD,IAAI,CAACiD,OAAO,CAAC,CAAC,CAAC;QAC/B3B,cAAc,CAAC;UAAER,EAAE,EAAEmC,OAAO,CAACnC,EAAE;UAAES,KAAK,EAAE0B,OAAO,CAAC1B;QAAM,CAAC,CAAC;QAExD,MAAMR,OAAO,GAAGf,IAAI,CAACe,OAAO,CAACmC,GAAG,CAAC,CAAC;UAAEpC,EAAE;UAAES;QAAM,CAAC,MAAM;UACnDT,EAAE,EAAEA,EAAE;UACNS,KAAK,EAAEA;QACT,CAAC,CAAC,CAAC;QAEH,MAAMf,QAAQ,GAAGR,IAAI,CAACQ,QAAQ,CAAC0C,GAAG,CAAC,CAAC;UAAEpC,EAAE;UAAES;QAAM,CAAC,MAAM;UACrDT,EAAE,EAAEA,EAAE;UACNS,KAAK,EAAEA;QACT,CAAC,CAAC,CAAC;QAEHrB,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEK,QAAQ,CAAC;QAC1CiB,cAAc,CAACV,OAAO,CAAC;QACvBY,aAAa,CAACnB,QAAQ,CAAC;QACvBoB,QAAQ,CAACvB,WAAW,CAACL,IAAI,EAAEiD,OAAO,CAACnC,EAAE,CAAC,CAAC;;QAEvC;QACAgB,iBAAiB,CAAEqB,aAAa,IAAK;UACnC,MAAMC,YAAY,GAAG,IAAIrB,GAAG,CAACoB,aAAa,CAAC;UAC3C3C,QAAQ,CAACC,OAAO,CAAEC,KAAK,IAAK0C,YAAY,CAACC,MAAM,CAAC3C,KAAK,CAACI,EAAE,CAAC,CAAC;UAC1DZ,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEiD,YAAY,CAAC;UACpD,OAAOA,YAAY;QACrB,CAAC,CAAC;MACJ,CAAC,CAAC,CACDE,KAAK,CAAElD,KAAK,IAAK;QAChBF,OAAO,CAACE,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACtD,CAAC,CAAC;IACN;EACF,CAAC,EAAE,CAACiB,WAAW,CAACP,EAAE,CAAC,CAAC,CAAC,CAAC;;EAEtB;EACAvC,SAAS,CAAC,MAAM;IACd,IAAI,CAAC8C,WAAW,CAACP,EAAE,EAAE,OAAO,CAAC;;IAE7B,MAAMyB,KAAK,GAAGnB,QAAQ,CAACoB,OAAO,CAAC,CAAC;;IAGhC;IACA,IAAInB,WAAW,CAACP,EAAE,IAAI,CAACyB,KAAK,CAAC6B,OAAO,CAAC/C,WAAW,CAACP,EAAE,CAAC,EAAE;MACpDZ,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEkB,WAAW,CAAC;MACzDkB,KAAK,CAACuD,OAAO,CAACzE,WAAW,CAACP,EAAE,EAAE;QAC5BS,KAAK,EAAEF,WAAW,CAACE,KAAK;QACxBwE,IAAI,EAAE,EAAE;QACRC,KAAK,EAAE,kBAAkB;QAAE;QAC3BT,CAAC,EAAE,CAAC;QACJE,CAAC,EAAE;MACL,CAAC,CAAC;MACFpD,MAAM,CAAChB,WAAW,CAACP,EAAE,CAAC;IACxB;;IAEA;IACA,MAAM2F,iBAAiB,GAAGzB,IAAI,CAACC,EAAE,GAAG,CAAC;IACrC,MAAMyB,YAAY,GAAG,GAAG;IACxB,MAAMC,gBAAgB,GAAG,CAAC,GAAG3B,IAAI,CAACC,EAAE,GAAG,CAAC;IACxCV,yBAAyB,CAAC/C,WAAW,EAAEe,KAAK,EAAE,CAAC,EAAE,CAAC,EAAEoE,gBAAgB,EAAEF,iBAAiB,EAAEC,YAAY,EAAEnG,KAAK,CAAC;IAE7G,IAAI4B,QAAQ,EAAE;MACZjC,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;MAC9B;MACA,MAAMyG,gBAAgB,GAAG5B,IAAI,CAACC,EAAE,GAAG,CAAC,CAAC,CAAC;MACtC,MAAM4B,WAAW,GAAG,GAAG;MACvB,MAAMC,eAAe,GAAG,CAAC,CAAC,CAAC;MAC3BvC,yBAAyB,CAAC7C,UAAU,EAAEa,KAAK,EAAE,CAAC,EAAE,CAAC,EAAEuE,eAAe,EAAEF,gBAAgB,EAAEC,WAAW,EAAEtG,KAAK,EAAE,IAAI,CAAC;;MAE/G;MACA6B,WAAW,CAAC,KAAK,CAAC;IACpB,CAAC,MAAM;MACLlC,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;MAC/B;MACA,MAAM4G,eAAe,GAAG/E,QAAQ,CAACgF,GAAG,CAAC3F,WAAW,CAACP,EAAE,CAAC;MACpDZ,OAAO,CAACC,GAAG,CAAC4G,eAAe,CAAC;MAC5B,MAAME,QAAQ,GAAGF,eAAe,CAACxB,CAAC;MAClC,MAAM2B,QAAQ,GAAGH,eAAe,CAACtB,CAAC;MAClC,MAAM0B,YAAY,GAAGJ,eAAe,CAAC1B,KAAK;MAC1C,MAAMuB,gBAAgB,GAAG5B,IAAI,CAACC,EAAE,GAAG,CAAC;MACpC,MAAM4B,WAAW,GAAG,GAAG;MACvB,MAAMC,eAAe,GAAGK,YAAY,GAAInC,IAAI,CAACC,EAAE,GAAG,CAAE,CAAC,CAAC;MACtDV,yBAAyB,CAAC7C,UAAU,EAAEa,KAAK,EAAE0E,QAAQ,EAAEC,QAAQ,EAAEJ,eAAe,EAAEF,gBAAgB,EAAEC,WAAW,EAAEtG,KAAK,CAAC;IACzH;;IAEA;IACAY,KAAK,CAACiG,kBAAkB,CAAC,WAAW,CAAC;;IAErC;IACAjG,KAAK,CAACkG,EAAE,CAAC,WAAW,EAAGC,KAAK,IAAK;MAC/BpH,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEmH,KAAK,CAAC;MACzCxE,eAAe,CAACwE,KAAK,CAACxD,IAAI,CAAC;IAC7B,CAAC,CAAC;;IAEF;IACA3C,KAAK,CAACkG,EAAE,CAAC,gBAAgB,EAAGC,KAAK,IAAK;MACpCpH,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEmH,KAAK,CAAC;MAC7C/D,oBAAoB,CAAC+D,KAAK,CAACxD,IAAI,CAAC;IAClC,CAAC,CAAC;;IAEF;IACA3C,KAAK,CAACoG,QAAQ,CAAChF,KAAK,CAAC;IACrBpB,KAAK,CAACmD,OAAO,CAAC,CAAC;;IAEf;IACA,OAAO,MAAM;MACXnD,KAAK,CAACiG,kBAAkB,CAAC,WAAW,CAAC;MACrCjG,KAAK,CAACiG,kBAAkB,CAAC,gBAAgB,CAAC;IAC5C,CAAC;EACH,CAAC,EAAE,CAACjG,KAAK,EAAEK,WAAW,EAAEE,UAAU,EAAEnB,KAAK,EAAEc,WAAW,EAAEQ,cAAc,CAAC,CAAC;EAExE,oBAAO/C,OAAA;IAAA0I,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;AAChB,CAAC;AAACzG,EAAA,CAtRID,cAAc;EAAA,QACJtC,QAAQ;AAAA;AAAAiJ,EAAA,GADlB3G,cAAc;AAwRpB,MAAM4G,YAAY,GAAGA,CAAA,kBACnB/I,OAAA,CAACJ,cAAc;EAAA8B,QAAA,eACb1B,OAAA,CAACmC,cAAc;IAAAuG,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE;AAAC;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OACJ,CACjB;AAACG,GAAA,GAJID,YAAY;AAMlB,eAAeA,YAAY;AAAC,IAAAD,EAAA,EAAAE,GAAA;AAAAC,YAAA,CAAAH,EAAA;AAAAG,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}