{"ast":null,"code":"var _jsxFileName = \"D:\\\\code\\\\MeshTree\\\\frontend\\\\src\\\\GraphWrapper.jsx\",\n  _s = $RefreshSig$();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphComponent = () => {\n  _s();\n  const sigma = useSigma();\n  const containerRef = useRef(null);\n  const [centralNode, setCentralNode] = useState({\n    id: 'Root',\n    label: 'Root'\n  });\n  const [centralNodeLabel, setCentralNodeLabel] = useState('Root'); // Use state for the label\n  const [parentNodes, setParentNodes] = useState([]);\n  const [childNodes, setChildNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n\n  // Function to get the label by node ID\n  function getNodeLabelById(nodeId, nodes) {\n    const node = nodes.find(node => node.id === nodeId);\n    return node ? node.label : null;\n  }\n\n  // Function to handle node clicks\n  const handleNodeClick = nodeId => {\n    const label = getNodeLabelById(nodeId, [...parentNodes, ...childNodes]);\n    setCentralNodeLabel(label); // Update the label in state\n    setCentralNode({\n      id: nodeId,\n      label\n    }); // Set the central node with the new label\n  };\n\n  // Effect to fetch data when central node changes\n  useEffect(() => {\n    if (!centralNode.id) return; // Ensure there's an ID\n\n    fetchDataForKey(centralNode.id).then(data => {\n      const parents = data.parents.map(({\n        id,\n        label\n      }) => ({\n        id,\n        label\n      }));\n      const children = data.children.map(({\n        id,\n        label\n      }) => ({\n        id,\n        label\n      }));\n      setParentNodes(parents);\n      setChildNodes(children);\n      setEdges(defineEdges(data, centralNode.id));\n    }).catch(error => {\n      console.error('Error:', error);\n    });\n  }, [centralNode.id]);\n\n  // Effect to update graph visualization\n  useEffect(() => {\n    const graph = new Graph();\n\n    // Add central node\n    graph.addNode(centralNode.id, {\n      label: centralNodeLabel,\n      size: 20,\n      color: 'black'\n    });\n\n    // Add parent nodes\n    parentNodes.forEach(node => {\n      if (!graph.hasNode(node.id)) {\n        graph.addNode(node.id, {\n          label: node.label,\n          size: 20,\n          color: 'black'\n        });\n      }\n    });\n\n    // Add child nodes\n    childNodes.forEach(node => {\n      if (!graph.hasNode(node.id)) {\n        graph.addNode(node.id, {\n          label: node.label,\n          size: 20,\n          color: 'black'\n        });\n      }\n    });\n\n    // Add edges\n    edges.forEach(edge => {\n      if (!graph.hasEdge(edge.source, edge.target)) {\n        try {\n          graph.addEdge(edge.source, edge.target);\n        } catch (error) {\n          console.warn(`Failed to add edge from ${edge.source} to ${edge.target}:`, error);\n        }\n      }\n    });\n\n    // Position nodes\n    const centerX = 0;\n    const centerY = 0;\n    graph.setNodeAttribute(centralNode.id, 'x', centerX);\n    graph.setNodeAttribute(centralNode.id, 'y', centerY);\n\n    // Position parent nodes\n    const parentAngleSpread = Math.PI / 2;\n    const parentRadius = 100;\n    const parentStartAngle = 3 * Math.PI / 4;\n    parentNodes.forEach((node, index) => {\n      const angle = parentStartAngle + index * parentAngleSpread / Math.max(1, parentNodes.length - 1);\n      const x = centerX + parentRadius * Math.cos(angle);\n      const y = centerY + parentRadius * Math.sin(angle);\n      graph.setNodeAttribute(node.id, 'x', x);\n      graph.setNodeAttribute(node.id, 'y', y);\n    });\n\n    // Position child nodes\n    const childAngleSpread = Math.PI / 2;\n    const childRadius = 100;\n    const childStartAngle = 7 * Math.PI / 4;\n    childNodes.forEach((node, index) => {\n      const angle = childStartAngle + index * childAngleSpread / Math.max(1, childNodes.length - 1);\n      const x = centerX + childRadius * Math.cos(angle);\n      const y = centerY + childRadius * Math.sin(angle);\n      graph.setNodeAttribute(node.id, 'x', x);\n      graph.setNodeAttribute(node.id, 'y', y);\n    });\n\n    // Clear existing click handlers\n    sigma.removeAllListeners('clickNode');\n\n    // Set up click handler\n    sigma.on('clickNode', event => {\n      handleNodeClick(event.node);\n    });\n\n    // Set the new graph and refresh\n    sigma.setGraph(graph);\n    sigma.refresh();\n\n    // Cleanup function\n    return () => {\n      sigma.removeAllListeners('clickNode');\n    };\n  }, [sigma, parentNodes, childNodes, edges, centralNode, centralNodeLabel]); // Add centralNodeLabel to dependencies\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 10\n  }, this);\n};\n_s(GraphComponent, \"Th50MdM1kh7jEBa7eX2tCJWLpuQ=\", true);\n_c = GraphComponent;\nconst GraphWrapper = () => /*#__PURE__*/_jsxDEV(SigmaContainer, {\n  children: /*#__PURE__*/_jsxDEV(GraphComponent, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 140,\n  columnNumber: 3\n}, this);\n_c2 = GraphWrapper;\nexport default GraphWrapper;\nvar _c, _c2;\n$RefreshReg$(_c, \"GraphComponent\");\n$RefreshReg$(_c2, \"GraphWrapper\");","map":{"version":3,"names":["GraphComponent","_s","sigma","useSigma","containerRef","useRef","centralNode","setCentralNode","useState","id","label","centralNodeLabel","setCentralNodeLabel","parentNodes","setParentNodes","childNodes","setChildNodes","edges","setEdges","getNodeLabelById","nodeId","nodes","node","find","handleNodeClick","useEffect","fetchDataForKey","then","data","parents","map","children","defineEdges","catch","error","console","graph","Graph","addNode","size","color","forEach","hasNode","edge","hasEdge","source","target","addEdge","warn","centerX","centerY","setNodeAttribute","parentAngleSpread","Math","PI","parentRadius","parentStartAngle","index","angle","max","length","x","cos","y","sin","childAngleSpread","childRadius","childStartAngle","removeAllListeners","on","event","setGraph","refresh","_jsxDEV","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","GraphWrapper","SigmaContainer","_c2","$RefreshReg$"],"sources":["D:/code/MeshTree/frontend/src/GraphWrapper.jsx"],"sourcesContent":["const GraphComponent = () => {\r\n  const sigma = useSigma();\r\n  const containerRef = useRef(null);\r\n  const [centralNode, setCentralNode] = useState({ id: 'Root', label: 'Root' });\r\n  const [centralNodeLabel, setCentralNodeLabel] = useState('Root'); // Use state for the label\r\n  const [parentNodes, setParentNodes] = useState([]);\r\n  const [childNodes, setChildNodes] = useState([]);\r\n  const [edges, setEdges] = useState([]);\r\n\r\n  // Function to get the label by node ID\r\n  function getNodeLabelById(nodeId, nodes) {\r\n    const node = nodes.find((node) => node.id === nodeId);\r\n    return node ? node.label : null;\r\n  }\r\n\r\n  // Function to handle node clicks\r\n  const handleNodeClick = (nodeId) => {\r\n    const label = getNodeLabelById(nodeId, [...parentNodes, ...childNodes]);\r\n    setCentralNodeLabel(label); // Update the label in state\r\n    setCentralNode({ id: nodeId, label }); // Set the central node with the new label\r\n  };\r\n\r\n  // Effect to fetch data when central node changes\r\n  useEffect(() => {\r\n    if (!centralNode.id) return; // Ensure there's an ID\r\n    \r\n    fetchDataForKey(centralNode.id)\r\n      .then((data) => {\r\n        const parents = data.parents.map(({ id, label }) => ({ id, label }));\r\n        const children = data.children.map(({ id, label }) => ({ id, label }));\r\n\r\n        setParentNodes(parents);\r\n        setChildNodes(children);\r\n        setEdges(defineEdges(data, centralNode.id));\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error:', error);\r\n      });\r\n  }, [centralNode.id]);\r\n\r\n  // Effect to update graph visualization\r\n  useEffect(() => {\r\n    const graph = new Graph();\r\n    \r\n    // Add central node\r\n    graph.addNode(centralNode.id, {\r\n      label: centralNodeLabel,\r\n      size: 20,\r\n      color: 'black'\r\n    });\r\n\r\n    // Add parent nodes\r\n    parentNodes.forEach(node => {\r\n      if (!graph.hasNode(node.id)) {\r\n        graph.addNode(node.id, {\r\n          label: node.label,\r\n          size: 20,\r\n          color: 'black'\r\n        });\r\n      }\r\n    });\r\n\r\n    // Add child nodes\r\n    childNodes.forEach(node => {\r\n      if (!graph.hasNode(node.id)) {\r\n        graph.addNode(node.id, {\r\n          label: node.label,\r\n          size: 20,\r\n          color: 'black'\r\n        });\r\n      }\r\n    });\r\n\r\n    // Add edges\r\n    edges.forEach(edge => {\r\n      if (!graph.hasEdge(edge.source, edge.target)) {\r\n        try {\r\n          graph.addEdge(edge.source, edge.target);\r\n        } catch (error) {\r\n          console.warn(`Failed to add edge from ${edge.source} to ${edge.target}:`, error);\r\n        }\r\n      }\r\n    });\r\n\r\n    // Position nodes\r\n    const centerX = 0;\r\n    const centerY = 0;\r\n    graph.setNodeAttribute(centralNode.id, 'x', centerX);\r\n    graph.setNodeAttribute(centralNode.id, 'y', centerY);\r\n\r\n    // Position parent nodes\r\n    const parentAngleSpread = Math.PI / 2;\r\n    const parentRadius = 100;\r\n    const parentStartAngle = 3 * Math.PI / 4;\r\n\r\n    parentNodes.forEach((node, index) => {\r\n      const angle = parentStartAngle + (index * parentAngleSpread) / Math.max(1, parentNodes.length - 1);\r\n      const x = centerX + parentRadius * Math.cos(angle);\r\n      const y = centerY + parentRadius * Math.sin(angle);\r\n      graph.setNodeAttribute(node.id, 'x', x);\r\n      graph.setNodeAttribute(node.id, 'y', y);\r\n    });\r\n\r\n    // Position child nodes\r\n    const childAngleSpread = Math.PI / 2;\r\n    const childRadius = 100;\r\n    const childStartAngle = 7 * Math.PI / 4;\r\n\r\n    childNodes.forEach((node, index) => {\r\n      const angle = childStartAngle + (index * childAngleSpread) / Math.max(1, childNodes.length - 1);\r\n      const x = centerX + childRadius * Math.cos(angle);\r\n      const y = centerY + childRadius * Math.sin(angle);\r\n      graph.setNodeAttribute(node.id, 'x', x);\r\n      graph.setNodeAttribute(node.id, 'y', y);\r\n    });\r\n\r\n    // Clear existing click handlers\r\n    sigma.removeAllListeners('clickNode');\r\n    \r\n    // Set up click handler\r\n    sigma.on('clickNode', (event) => {\r\n      handleNodeClick(event.node);\r\n    });\r\n\r\n    // Set the new graph and refresh\r\n    sigma.setGraph(graph);\r\n    sigma.refresh();\r\n\r\n    // Cleanup function\r\n    return () => {\r\n      sigma.removeAllListeners('clickNode');\r\n    };\r\n  }, [sigma, parentNodes, childNodes, edges, centralNode, centralNodeLabel]); // Add centralNodeLabel to dependencies\r\n\r\n  return <div ref={containerRef} />;\r\n};\r\n\r\n\r\nconst GraphWrapper = () => (\r\n  <SigmaContainer>\r\n    <GraphComponent />\r\n  </SigmaContainer>\r\n);\r\n\r\nexport default GraphWrapper;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}