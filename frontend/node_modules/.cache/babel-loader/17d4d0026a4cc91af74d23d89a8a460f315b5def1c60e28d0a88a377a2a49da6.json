{"ast":null,"code":"var _jsxFileName = \"D:\\\\code\\\\MeshTree\\\\frontend\\\\src\\\\GraphWrapper2.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { SigmaContainer, useSigma } from '@react-sigma/core';\nimport Graph from 'graphology';\nimport forceAtlas2, { ForceAtlas2SynchronousLayoutParameters } from \"graphology-layout-forceatlas2\";\nimport { useLayoutFactory } from \"@react-sigma/layout-core\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst rootID = 'Root';\nasync function fetchDataForKey(key) {\n  const baseUrl = 'http://localhost:5000';\n  const url = `${baseUrl}/get/${key}`;\n  try {\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    throw error;\n  }\n}\n;\nfunction buildCenterTree(rootID) {\n  let data = fetchDataForKey(rootID);\n  let parents = data.parents;\n  let children;\n}\nconst GraphComponent = () => {\n  _s();\n  const sigma = useSigma();\n  const containerRef = useRef(null);\n  useEffect(() => {\n    const graph = new Graph();\n    nodes.forEach(node => {\n      graph.addNode(node.id, {\n        label: node.label,\n        size: node.size,\n        color: node.color\n      });\n    });\n    edges.forEach(edge => {\n      graph.addEdge(edge.source, edge.target);\n    });\n  }, [sigma]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 10\n  }, this);\n};\n_s(GraphComponent, \"R0bJCO5eGdK7ZLFJaGp7Ix0qrBw=\", false, function () {\n  return [useSigma];\n});\n_c = GraphComponent;\nconst GraphWrapper = () => /*#__PURE__*/_jsxDEV(SigmaContainer, {\n  children: /*#__PURE__*/_jsxDEV(GraphComponent, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 7\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 60,\n  columnNumber: 5\n}, this);\n_c2 = GraphWrapper;\nexport default GraphWrapper;\nvar _c, _c2;\n$RefreshReg$(_c, \"GraphComponent\");\n$RefreshReg$(_c2, \"GraphWrapper\");","map":{"version":3,"names":["React","useEffect","useRef","useState","SigmaContainer","useSigma","Graph","forceAtlas2","ForceAtlas2SynchronousLayoutParameters","useLayoutFactory","jsxDEV","_jsxDEV","rootID","fetchDataForKey","key","baseUrl","url","response","fetch","ok","Error","status","data","json","error","console","buildCenterTree","parents","children","GraphComponent","_s","sigma","containerRef","graph","nodes","forEach","node","addNode","id","label","size","color","edges","edge","addEdge","source","target","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","GraphWrapper","_c2","$RefreshReg$"],"sources":["D:/code/MeshTree/frontend/src/GraphWrapper2.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport { SigmaContainer, useSigma } from '@react-sigma/core';\r\nimport Graph from 'graphology';\r\nimport forceAtlas2, { ForceAtlas2SynchronousLayoutParameters } from \"graphology-layout-forceatlas2\";\r\nimport { useLayoutFactory } from \"@react-sigma/layout-core\";\r\n\r\nconst rootID = 'Root';\r\n\r\nasync function fetchDataForKey(key) {\r\n  const baseUrl = 'http://localhost:5000';\r\n  const url = `${baseUrl}/get/${key}`;\r\n\r\n  try {\r\n    const response = await fetch(url);\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! Status: ${response.status}`);\r\n    }\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error fetching data:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nfunction buildCenterTree(rootID) {\r\n  let data = fetchDataForKey(rootID);\r\n  let parents = data.parents;\r\n let children\r\n}\r\n\r\n\r\n\r\nconst GraphComponent = () => {\r\n  const sigma = useSigma();\r\n  const containerRef = useRef(null);\r\n\r\n  useEffect(() =>{\r\n\r\n    const graph = new Graph();\r\n\r\n    nodes.forEach(node => {\r\n      graph.addNode(node.id, {\r\n        label: node.label,\r\n        size: node.size,\r\n        color: node.color\r\n      });\r\n    });\r\n\r\n    edges.forEach(edge => {\r\n     graph.addEdge(edge.source, edge.target);\r\n    });\r\n  \r\n  }, [sigma]);\r\n  return <div ref={containerRef}  />\r\n}\r\n\r\n\r\nconst GraphWrapper = () => (\r\n    <SigmaContainer>\r\n      <GraphComponent />\r\n    </SigmaContainer>\r\n  );\r\n  \r\nexport default GraphWrapper;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,SAASC,cAAc,EAAEC,QAAQ,QAAQ,mBAAmB;AAC5D,OAAOC,KAAK,MAAM,YAAY;AAC9B,OAAOC,WAAW,IAAIC,sCAAsC,QAAQ,+BAA+B;AACnG,SAASC,gBAAgB,QAAQ,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5D,MAAMC,MAAM,GAAG,MAAM;AAErB,eAAeC,eAAeA,CAACC,GAAG,EAAE;EAClC,MAAMC,OAAO,GAAG,uBAAuB;EACvC,MAAMC,GAAG,GAAG,GAAGD,OAAO,QAAQD,GAAG,EAAE;EAEnC,IAAI;IACF,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAG,CAAC;IACjC,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBH,QAAQ,CAACI,MAAM,EAAE,CAAC;IAC3D;IACA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI;EACb,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,MAAMA,KAAK;EACb;AACF;AAAC;AAED,SAASE,eAAeA,CAACd,MAAM,EAAE;EAC/B,IAAIU,IAAI,GAAGT,eAAe,CAACD,MAAM,CAAC;EAClC,IAAIe,OAAO,GAAGL,IAAI,CAACK,OAAO;EAC3B,IAAIC,QAAQ;AACb;AAIA,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAMC,KAAK,GAAG1B,QAAQ,CAAC,CAAC;EACxB,MAAM2B,YAAY,GAAG9B,MAAM,CAAC,IAAI,CAAC;EAEjCD,SAAS,CAAC,MAAK;IAEb,MAAMgC,KAAK,GAAG,IAAI3B,KAAK,CAAC,CAAC;IAEzB4B,KAAK,CAACC,OAAO,CAACC,IAAI,IAAI;MACpBH,KAAK,CAACI,OAAO,CAACD,IAAI,CAACE,EAAE,EAAE;QACrBC,KAAK,EAAEH,IAAI,CAACG,KAAK;QACjBC,IAAI,EAAEJ,IAAI,CAACI,IAAI;QACfC,KAAK,EAAEL,IAAI,CAACK;MACd,CAAC,CAAC;IACJ,CAAC,CAAC;IAEFC,KAAK,CAACP,OAAO,CAACQ,IAAI,IAAI;MACrBV,KAAK,CAACW,OAAO,CAACD,IAAI,CAACE,MAAM,EAAEF,IAAI,CAACG,MAAM,CAAC;IACxC,CAAC,CAAC;EAEJ,CAAC,EAAE,CAACf,KAAK,CAAC,CAAC;EACX,oBAAOpB,OAAA;IAAKoC,GAAG,EAAEf;EAAa;IAAAgB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAG,CAAC;AACpC,CAAC;AAAArB,EAAA,CAtBKD,cAAc;EAAA,QACJxB,QAAQ;AAAA;AAAA+C,EAAA,GADlBvB,cAAc;AAyBpB,MAAMwB,YAAY,GAAGA,CAAA,kBACjB1C,OAAA,CAACP,cAAc;EAAAwB,QAAA,eACbjB,OAAA,CAACkB,cAAc;IAAAmB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE;AAAC;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OACJ,CACjB;AAACG,GAAA,GAJED,YAAY;AAMlB,eAAeA,YAAY;AAAC,IAAAD,EAAA,EAAAE,GAAA;AAAAC,YAAA,CAAAH,EAAA;AAAAG,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}