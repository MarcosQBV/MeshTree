{"ast":null,"code":"var _jsxFileName = \"D:\\\\code\\\\MeshTree\\\\frontend\\\\src\\\\GraphWrapper.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { SigmaContainer, useSigma } from '@react-sigma/core';\nimport Graph from 'graphology';\n\n// CSS for fade-in effect\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst fadeInStyle = `\n  .fade-in {\n    opacity: 0;\n    animation: fadeIn 1s forwards;\n  }\n\n  @keyframes fadeIn {\n    to {\n      opacity: 1;\n    }\n  }\n`;\n\n// Inject the CSS into the document\nconst styleSheet = document.createElement(\"style\");\nstyleSheet.type = \"text/css\";\nstyleSheet.innerText = fadeInStyle;\ndocument.head.appendChild(styleSheet);\nasync function fetchDataForKey(key) {\n  const baseUrl = 'http://localhost:5000';\n  const url = `${baseUrl}/get/${key}`;\n  try {\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    throw error;\n  }\n}\nfunction defineEdges(data, centralNodeId) {\n  const edges = [];\n  data.children.forEach(child => {\n    edges.push({\n      source: centralNodeId,\n      target: child.id\n    });\n  });\n  data.parents.forEach(parent => {\n    edges.push({\n      source: parent.id,\n      target: centralNodeId\n    });\n  });\n  return edges;\n}\nconst GraphComponent = () => {\n  _s();\n  const sigma = useSigma();\n  const containerRef = useRef(null);\n  const graphRef = useRef(new Graph());\n  const [centralNode, setCentralNode] = useState({\n    id: 'Root',\n    label: 'Root'\n  });\n  const [parentNodes, setParentNodes] = useState([]);\n  const [childNodes, setChildNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const [nodeLevel, setNodeLevel] = useState([]);\n  const [centerX, setCenterX] = useState(0);\n  const [centerY, setCenterY] = useState(0);\n  const [collapsedNodes, setCollapsedNodes] = useState(new Set());\n  const [collapsedNodeData, setCollapsedNodeData] = useState(new Map());\n\n  // Initialize the graph with the root node\n  useEffect(() => {\n    const graph = graphRef.current;\n\n    // Clear the graph first\n    graph.clear();\n\n    // Add initial root node\n    graph.addNode('Root', {\n      label: 'Root',\n      size: 20,\n      color: 'black',\n      x: 0,\n      y: 0\n    });\n    sigma.setGraph(graph);\n    sigma.refresh();\n\n    // Fetch initial data\n    fetchDataForKey('Root').then(data => {\n      setParentNodes(data.parents.map(({\n        id,\n        label\n      }) => ({\n        id,\n        label\n      })));\n      setChildNodes(data.children.map(({\n        id,\n        label\n      }) => ({\n        id,\n        label\n      })));\n      setEdges(defineEdges(data, 'Root'));\n    }).catch(error => {\n      console.error('Error fetching initial data:', error);\n    });\n  }, [sigma]); // Run only once on component mount\n\n  function getNodeLabelById(nodeId, nodes) {\n    const node = nodes.find(node => node.id === nodeId);\n    return node ? node.label : null;\n  }\n  const handleNodeClick = async nodeId => {\n    console.log(`Node clicked: ${nodeId}`);\n    const graph = graphRef.current;\n    if (!graph.hasNode(nodeId)) {\n      console.warn(`Node ${nodeId} not found in graph`);\n      return;\n    }\n    const nodeAttributes = graph.getNodeAttributes(nodeId);\n    const newLabel = nodeAttributes.label;\n    if (collapsedNodes.has(nodeId)) {\n      await expandNode(nodeId);\n    }\n    setCentralNode({\n      id: nodeId,\n      label: newLabel\n    });\n    setCenterX(nodeAttributes.x);\n    setCenterY(nodeAttributes.y);\n\n    // Fetch new data for the clicked node\n    try {\n      const data = await fetchDataForKey(nodeId);\n      setParentNodes(data.parents.map(({\n        id,\n        label\n      }) => ({\n        id,\n        label\n      })));\n      setChildNodes(data.children.map(({\n        id,\n        label\n      }) => ({\n        id,\n        label\n      })));\n      setEdges(defineEdges(data, nodeId));\n    } catch (error) {\n      console.error('Error fetching data for node:', error);\n    }\n  };\n  const expandNode = async nodeId => {\n    const graph = graphRef.current;\n    const storedData = collapsedNodeData.get(nodeId);\n    if (storedData) {\n      for (const child of storedData.children) {\n        if (!graph.hasNode(child.id)) {\n          const angle = Math.random() * 2 * Math.PI;\n          const radius = 100;\n          const x = centerX + radius * Math.cos(angle);\n          const y = centerY + radius * Math.sin(angle);\n          graph.addNode(child.id, {\n            label: child.label,\n            size: 20,\n            color: 'black',\n            x: x,\n            y: y\n          });\n        }\n      }\n      for (const edge of storedData.edges) {\n        if (!graph.hasEdge(edge.source, edge.target)) {\n          try {\n            graph.addEdge(edge.source, edge.target);\n          } catch (error) {\n            console.warn(`Failed to add edge from ${edge.source} to ${edge.target}:`, error);\n          }\n        }\n      }\n      setCollapsedNodes(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(nodeId);\n        return newSet;\n      });\n      setCollapsedNodeData(prev => {\n        const newMap = new Map(prev);\n        newMap.delete(nodeId);\n        return newMap;\n      });\n      sigma.refresh();\n    }\n  };\n  const handleNodeRightClick = event => {\n    event.preventDefault(); // Prevent default context menu\n    const nodeId = event.node;\n    collapseNodeAndDescendants(nodeId);\n  };\n  const collapseNodeAndDescendants = nodeId => {\n    const graph = graphRef.current;\n    const nodesToRemove = new Set();\n    const edgesToRemove = new Set();\n    const collapsedChildren = [];\n    const collapsedEdges = [];\n    graph.forEachOutboundNeighbor(nodeId, neighbor => {\n      nodesToRemove.add(neighbor);\n      collapsedChildren.push({\n        id: neighbor,\n        label: graph.getNodeAttributes(neighbor).label\n      });\n    });\n    nodesToRemove.forEach(node => {\n      graph.forEachEdge(node, (edgeId, attributes, source, target) => {\n        edgesToRemove.add(edgeId);\n        collapsedEdges.push({\n          source,\n          target\n        });\n      });\n    });\n    setCollapsedNodeData(prev => {\n      const newMap = new Map(prev);\n      newMap.set(nodeId, {\n        children: collapsedChildren,\n        edges: collapsedEdges\n      });\n      return newMap;\n    });\n    edgesToRemove.forEach(edgeId => {\n      if (graph.hasEdge(edgeId)) {\n        graph.dropEdge(edgeId);\n      }\n    });\n    nodesToRemove.forEach(node => {\n      if (graph.hasNode(node)) {\n        graph.dropNode(node);\n      }\n    });\n    setCollapsedNodes(prev => {\n      const newSet = new Set(prev);\n      newSet.add(nodeId);\n      return newSet;\n    });\n    sigma.refresh();\n  };\n\n  // Effect to update graph visualization when nodes or edges change\n  useEffect(() => {\n    const graph = graphRef.current;\n\n    // Add parent nodes\n    const parentAngleSpread = Math.PI / 2;\n    const parentRadius = 100;\n    const parentStartAngle = 3 * Math.PI / 4;\n    parentNodes.forEach((node, index) => {\n      if (!collapsedNodes.has(node.id) && !graph.hasNode(node.id)) {\n        const angle = parentStartAngle + index * parentAngleSpread / Math.max(1, parentNodes.length - 1);\n        const x = centerX + parentRadius * Math.cos(angle);\n        const y = centerY + parentRadius * Math.sin(angle);\n        graph.addNode(node.id, {\n          label: node.label,\n          size: 20,\n          color: 'black',\n          x: x,\n          y: y\n        });\n      }\n    });\n\n    // Add child nodes\n    const childAngleSpread = Math.PI / 2;\n    const childRadius = 100;\n    const childStartAngle = 7 * Math.PI / 4;\n    childNodes.forEach((node, index) => {\n      if (!collapsedNodes.has(node.id) && !graph.hasNode(node.id)) {\n        const angle = childStartAngle + index * childAngleSpread / Math.max(1, childNodes.length - 1);\n        const x = centerX + childRadius * Math.cos(angle);\n        const y = centerY + childRadius * Math.sin(angle);\n        graph.addNode(node.id, {\n          label: node.label,\n          size: 20,\n          color: 'black',\n          x: x,\n          y: y\n        });\n      }\n    });\n\n    // Add edges\n    edges.forEach(edge => {\n      if (!collapsedNodes.has(edge.source) && !collapsedNodes.has(edge.target)) {\n        if (!graph.hasEdge(edge.source, edge.target)) {\n          try {\n            graph.addEdge(edge.source, edge.target);\n          } catch (error) {\n            console.warn(`Failed to add edge from ${edge.source} to ${edge.target}:`, error);\n          }\n        }\n      }\n    });\n\n    // Set up event handlers\n    sigma.removeAllListeners('clickNode');\n    sigma.removeAllListeners('rightClickNode');\n    sigma.on('clickNode', event => {\n      handleNodeClick(event.node);\n    });\n    sigma.on('rightClickNode', handleNodeRightClick);\n\n    // Refresh the visualization\n    sigma.refresh();\n    return () => {\n      sigma.removeAllListeners('clickNode');\n      sigma.removeAllListeners('rightClickNode');\n    };\n  }, [sigma, parentNodes, childNodes, edges, centralNode, centerX, centerY, collapsedNodes]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    style: {\n      width: '100%',\n      height: '100vh'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 319,\n    columnNumber: 5\n  }, this);\n};\n_s(GraphComponent, \"meYgF+5/C0CmPzfbxHjB6HU0N10=\", false, function () {\n  return [useSigma];\n});\n_c = GraphComponent;\nconst GraphWrapper = () => /*#__PURE__*/_jsxDEV(SigmaContainer, {\n  style: {\n    width: '100%',\n    height: '100vh'\n  },\n  children: /*#__PURE__*/_jsxDEV(GraphComponent, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 328,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 327,\n  columnNumber: 3\n}, this);\n_c2 = GraphWrapper;\nexport default GraphWrapper;\nvar _c, _c2;\n$RefreshReg$(_c, \"GraphComponent\");\n$RefreshReg$(_c2, \"GraphWrapper\");","map":{"version":3,"names":["React","useEffect","useRef","useState","SigmaContainer","useSigma","Graph","jsxDEV","_jsxDEV","fadeInStyle","styleSheet","document","createElement","type","innerText","head","appendChild","fetchDataForKey","key","baseUrl","url","response","fetch","ok","Error","status","data","json","error","console","defineEdges","centralNodeId","edges","children","forEach","child","push","source","target","id","parents","parent","GraphComponent","_s","sigma","containerRef","graphRef","centralNode","setCentralNode","label","parentNodes","setParentNodes","childNodes","setChildNodes","setEdges","nodeLevel","setNodeLevel","centerX","setCenterX","centerY","setCenterY","collapsedNodes","setCollapsedNodes","Set","collapsedNodeData","setCollapsedNodeData","Map","graph","current","clear","addNode","size","color","x","y","setGraph","refresh","then","map","catch","getNodeLabelById","nodeId","nodes","node","find","handleNodeClick","log","hasNode","warn","nodeAttributes","getNodeAttributes","newLabel","has","expandNode","storedData","get","angle","Math","random","PI","radius","cos","sin","edge","hasEdge","addEdge","prev","newSet","delete","newMap","handleNodeRightClick","event","preventDefault","collapseNodeAndDescendants","nodesToRemove","edgesToRemove","collapsedChildren","collapsedEdges","forEachOutboundNeighbor","neighbor","add","forEachEdge","edgeId","attributes","set","dropEdge","dropNode","parentAngleSpread","parentRadius","parentStartAngle","index","max","length","childAngleSpread","childRadius","childStartAngle","removeAllListeners","on","ref","style","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","GraphWrapper","_c2","$RefreshReg$"],"sources":["D:/code/MeshTree/frontend/src/GraphWrapper.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport { SigmaContainer, useSigma } from '@react-sigma/core';\r\nimport Graph from 'graphology';\r\n\r\n// CSS for fade-in effect\r\nconst fadeInStyle = `\r\n  .fade-in {\r\n    opacity: 0;\r\n    animation: fadeIn 1s forwards;\r\n  }\r\n\r\n  @keyframes fadeIn {\r\n    to {\r\n      opacity: 1;\r\n    }\r\n  }\r\n`;\r\n\r\n// Inject the CSS into the document\r\nconst styleSheet = document.createElement(\"style\");\r\nstyleSheet.type = \"text/css\";\r\nstyleSheet.innerText = fadeInStyle;\r\ndocument.head.appendChild(styleSheet);\r\n\r\nasync function fetchDataForKey(key) {\r\n  const baseUrl = 'http://localhost:5000';\r\n  const url = `${baseUrl}/get/${key}`;\r\n\r\n  try {\r\n    const response = await fetch(url);\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! Status: ${response.status}`);\r\n    }\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error fetching data:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nfunction defineEdges(data, centralNodeId) {\r\n  const edges = [];\r\n  data.children.forEach((child) => {\r\n    edges.push({ source: centralNodeId, target: child.id });\r\n  });\r\n  data.parents.forEach((parent) => {\r\n    edges.push({ source: parent.id, target: centralNodeId });\r\n  });\r\n  return edges;\r\n}\r\n\r\nconst GraphComponent = () => {\r\n  const sigma = useSigma();\r\n  const containerRef = useRef(null);\r\n  const graphRef = useRef(new Graph());\r\n  const [centralNode, setCentralNode] = useState({ id: 'Root', label: 'Root' });\r\n  const [parentNodes, setParentNodes] = useState([]);\r\n  const [childNodes, setChildNodes] = useState([]);\r\n  const [edges, setEdges] = useState([]);\r\n  const [nodeLevel, setNodeLevel] = useState([]);\r\n  const [centerX, setCenterX] = useState(0);\r\n  const [centerY, setCenterY] = useState(0);\r\n  const [collapsedNodes, setCollapsedNodes] = useState(new Set());\r\n  const [collapsedNodeData, setCollapsedNodeData] = useState(new Map());\r\n\r\n  // Initialize the graph with the root node\r\n  useEffect(() => {\r\n    const graph = graphRef.current;\r\n    \r\n    // Clear the graph first\r\n    graph.clear();\r\n    \r\n    // Add initial root node\r\n    graph.addNode('Root', {\r\n      label: 'Root',\r\n      size: 20,\r\n      color: 'black',\r\n      x: 0,\r\n      y: 0\r\n    });\r\n    \r\n    sigma.setGraph(graph);\r\n    sigma.refresh();\r\n    \r\n    // Fetch initial data\r\n    fetchDataForKey('Root')\r\n      .then((data) => {\r\n        setParentNodes(data.parents.map(({ id, label }) => ({ id, label })));\r\n        setChildNodes(data.children.map(({ id, label }) => ({ id, label })));\r\n        setEdges(defineEdges(data, 'Root'));\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error fetching initial data:', error);\r\n      });\r\n  }, [sigma]); // Run only once on component mount\r\n\r\n  function getNodeLabelById(nodeId, nodes) {\r\n    const node = nodes.find((node) => node.id === nodeId);\r\n    return node ? node.label : null;\r\n  }\r\n\r\n  const handleNodeClick = async (nodeId) => {\r\n    console.log(`Node clicked: ${nodeId}`);\r\n    const graph = graphRef.current;\r\n    \r\n    if (!graph.hasNode(nodeId)) {\r\n      console.warn(`Node ${nodeId} not found in graph`);\r\n      return;\r\n    }\r\n\r\n    const nodeAttributes = graph.getNodeAttributes(nodeId);\r\n    const newLabel = nodeAttributes.label;\r\n\r\n    if (collapsedNodes.has(nodeId)) {\r\n      await expandNode(nodeId);\r\n    }\r\n\r\n    setCentralNode({ id: nodeId, label: newLabel });\r\n    setCenterX(nodeAttributes.x);\r\n    setCenterY(nodeAttributes.y);\r\n\r\n    // Fetch new data for the clicked node\r\n    try {\r\n      const data = await fetchDataForKey(nodeId);\r\n      setParentNodes(data.parents.map(({ id, label }) => ({ id, label })));\r\n      setChildNodes(data.children.map(({ id, label }) => ({ id, label })));\r\n      setEdges(defineEdges(data, nodeId));\r\n    } catch (error) {\r\n      console.error('Error fetching data for node:', error);\r\n    }\r\n  };\r\n\r\n  const expandNode = async (nodeId) => {\r\n    const graph = graphRef.current;\r\n    const storedData = collapsedNodeData.get(nodeId);\r\n    \r\n    if (storedData) {\r\n      for (const child of storedData.children) {\r\n        if (!graph.hasNode(child.id)) {\r\n          const angle = Math.random() * 2 * Math.PI;\r\n          const radius = 100;\r\n          const x = centerX + radius * Math.cos(angle);\r\n          const y = centerY + radius * Math.sin(angle);\r\n          \r\n          graph.addNode(child.id, {\r\n            label: child.label,\r\n            size: 20,\r\n            color: 'black',\r\n            x: x,\r\n            y: y\r\n          });\r\n        }\r\n      }\r\n\r\n      for (const edge of storedData.edges) {\r\n        if (!graph.hasEdge(edge.source, edge.target)) {\r\n          try {\r\n            graph.addEdge(edge.source, edge.target);\r\n          } catch (error) {\r\n            console.warn(`Failed to add edge from ${edge.source} to ${edge.target}:`, error);\r\n          }\r\n        }\r\n      }\r\n\r\n      setCollapsedNodes(prev => {\r\n        const newSet = new Set(prev);\r\n        newSet.delete(nodeId);\r\n        return newSet;\r\n      });\r\n\r\n      setCollapsedNodeData(prev => {\r\n        const newMap = new Map(prev);\r\n        newMap.delete(nodeId);\r\n        return newMap;\r\n      });\r\n\r\n      sigma.refresh();\r\n    }\r\n  };\r\n\r\n  const handleNodeRightClick = (event) => {\r\n    event.preventDefault(); // Prevent default context menu\r\n    const nodeId = event.node;\r\n    collapseNodeAndDescendants(nodeId);\r\n  };\r\n\r\n  const collapseNodeAndDescendants = (nodeId) => {\r\n    const graph = graphRef.current;\r\n    const nodesToRemove = new Set();\r\n    const edgesToRemove = new Set();\r\n    const collapsedChildren = [];\r\n    const collapsedEdges = [];\r\n\r\n    graph.forEachOutboundNeighbor(nodeId, (neighbor) => {\r\n      nodesToRemove.add(neighbor);\r\n      collapsedChildren.push({\r\n        id: neighbor,\r\n        label: graph.getNodeAttributes(neighbor).label\r\n      });\r\n    });\r\n\r\n    nodesToRemove.forEach((node) => {\r\n      graph.forEachEdge(node, (edgeId, attributes, source, target) => {\r\n        edgesToRemove.add(edgeId);\r\n        collapsedEdges.push({ source, target });\r\n      });\r\n    });\r\n\r\n    setCollapsedNodeData(prev => {\r\n      const newMap = new Map(prev);\r\n      newMap.set(nodeId, {\r\n        children: collapsedChildren,\r\n        edges: collapsedEdges\r\n      });\r\n      return newMap;\r\n    });\r\n\r\n    edgesToRemove.forEach((edgeId) => {\r\n      if (graph.hasEdge(edgeId)) {\r\n        graph.dropEdge(edgeId);\r\n      }\r\n    });\r\n\r\n    nodesToRemove.forEach((node) => {\r\n      if (graph.hasNode(node)) {\r\n        graph.dropNode(node);\r\n      }\r\n    });\r\n\r\n    setCollapsedNodes(prev => {\r\n      const newSet = new Set(prev);\r\n      newSet.add(nodeId);\r\n      return newSet;\r\n    });\r\n\r\n    sigma.refresh();\r\n  };\r\n\r\n  // Effect to update graph visualization when nodes or edges change\r\n  useEffect(() => {\r\n    const graph = graphRef.current;\r\n    \r\n    // Add parent nodes\r\n    const parentAngleSpread = Math.PI / 2;\r\n    const parentRadius = 100;\r\n    const parentStartAngle = 3 * Math.PI / 4;\r\n    \r\n    parentNodes.forEach((node, index) => {\r\n      if (!collapsedNodes.has(node.id) && !graph.hasNode(node.id)) {\r\n        const angle = parentStartAngle + (index * parentAngleSpread) / Math.max(1, parentNodes.length - 1);\r\n        const x = centerX + parentRadius * Math.cos(angle);\r\n        const y = centerY + parentRadius * Math.sin(angle);\r\n        \r\n        graph.addNode(node.id, {\r\n          label: node.label,\r\n          size: 20,\r\n          color: 'black',\r\n          x: x,\r\n          y: y\r\n        });\r\n      }\r\n    });\r\n\r\n    // Add child nodes\r\n    const childAngleSpread = Math.PI / 2;\r\n    const childRadius = 100;\r\n    const childStartAngle = 7 * Math.PI / 4;\r\n    \r\n    childNodes.forEach((node, index) => {\r\n      if (!collapsedNodes.has(node.id) && !graph.hasNode(node.id)) {\r\n        const angle = childStartAngle + (index * childAngleSpread) / Math.max(1, childNodes.length - 1);\r\n        const x = centerX + childRadius * Math.cos(angle);\r\n        const y = centerY + childRadius * Math.sin(angle);\r\n        \r\n        graph.addNode(node.id, {\r\n          label: node.label,\r\n          size: 20,\r\n          color: 'black',\r\n          x: x,\r\n          y: y\r\n        });\r\n      }\r\n    });\r\n\r\n    // Add edges\r\n    edges.forEach(edge => {\r\n      if (!collapsedNodes.has(edge.source) && !collapsedNodes.has(edge.target)) {\r\n        if (!graph.hasEdge(edge.source, edge.target)) {\r\n          try {\r\n            graph.addEdge(edge.source, edge.target);\r\n          } catch (error) {\r\n            console.warn(`Failed to add edge from ${edge.source} to ${edge.target}:`, error);\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    // Set up event handlers\r\n    sigma.removeAllListeners('clickNode');\r\n    sigma.removeAllListeners('rightClickNode');\r\n    \r\n    sigma.on('clickNode', (event) => {\r\n      handleNodeClick(event.node);\r\n    });\r\n\r\n    sigma.on('rightClickNode', handleNodeRightClick);\r\n\r\n    // Refresh the visualization\r\n    sigma.refresh();\r\n\r\n    return () => {\r\n      sigma.removeAllListeners('clickNode');\r\n      sigma.removeAllListeners('rightClickNode');\r\n    };\r\n  }, [sigma, parentNodes, childNodes, edges, centralNode, centerX, centerY, collapsedNodes]);\r\n\r\n  return (\r\n    <div \r\n      ref={containerRef} \r\n      style={{ width: '100%', height: '100vh' }}\r\n    />\r\n  );\r\n};\r\n\r\nconst GraphWrapper = () => (\r\n  <SigmaContainer style={{ width: '100%', height: '100vh' }}>\r\n    <GraphComponent />\r\n  </SigmaContainer>\r\n);\r\n\r\nexport default GraphWrapper;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}