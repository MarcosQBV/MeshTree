{"ast":null,"code":"var _jsxFileName = \"D:\\\\code\\\\MeshTree\\\\frontend\\\\src\\\\GraphWrapper.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { SigmaContainer, useSigma } from '@react-sigma/core';\nimport Graph from 'graphology';\n\n// CSS for fade-in effect\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst fadeInStyle = `\n  .fade-in {\n    opacity: 0;\n    animation: fadeIn 1s forwards;\n  }\n\n  @keyframes fadeIn {\n    to {\n      opacity: 1;\n    }\n  }\n`;\n\n// Inject the CSS into the document\nconst styleSheet = document.createElement(\"style\");\nstyleSheet.type = \"text/css\";\nstyleSheet.innerText = fadeInStyle;\ndocument.head.appendChild(styleSheet);\nasync function fetchDataForKey(key) {\n  const baseUrl = 'http://localhost:5000';\n  const url = `${baseUrl}/get/${key}`;\n  try {\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    const data = await response.json();\n    console.log('API Response:', data); // Log the API response\n    return data;\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    throw error;\n  }\n}\nfunction defineEdges(data, centralNodeId) {\n  const edges = [];\n  data.children.forEach(child => {\n    edges.push({\n      source: centralNodeId,\n      target: child.id\n    });\n  });\n  data.parents.forEach(parent => {\n    edges.push({\n      source: parent.id,\n      target: centralNodeId\n    });\n  });\n  return edges;\n}\nconst GraphComponent = () => {\n  _s();\n  const sigma = useSigma();\n  const containerRef = useRef(null);\n  const graphRef = useRef(new Graph()); // Persistent graph instance\n  const [centralNode, setCentralNode] = useState({\n    id: '',\n    label: ''\n  });\n  const [parentNodes, setParentNodes] = useState([]);\n  const [childNodes, setChildNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const [nodeLevel, setNodeLevel] = useState([]); // Initialize nodeLevel as a state\n  const [centerX, setCenterX] = useState(0); // State for center X coordinate\n  const [centerY, setCenterY] = useState(0); // State for center Y coordinate\n  const [collapsedNodes, setCollapsedNodes] = useState(new Set()); // Track collapsed nodes and their children\n  const [firstRun, setFirstRun] = useState(true); // Track if it's the first run\n  const [nodeAngles, setNodeAngles] = useState({}); // State to store node angles\n\n  // Function to handle node clicks\n  const handleNodeClick = nodeId => {\n    console.log(`Node clicked: ${nodeId}`);\n    fetchDataForKey(nodeId).then(data => {\n      const central = data.central[0]; // Assuming central is an array with one element\n      setCentralNode({\n        id: central.id,\n        label: central.label\n      });\n      const parents = data.parents.map(({\n        id,\n        label\n      }) => ({\n        id: id,\n        label: label\n      }));\n      const children = data.children.map(({\n        id,\n        label\n      }) => ({\n        id: id,\n        label: label\n      }));\n      console.log('Fetched children:', children);\n      setParentNodes(parents);\n      setChildNodes(children);\n      setEdges(defineEdges(data, central.id));\n\n      // Remove children from the collapsed nodes set\n      setCollapsedNodes(prevCollapsed => {\n        const newCollapsed = new Set(prevCollapsed);\n        children.forEach(child => newCollapsed.delete(child.id));\n        console.log('Updated collapsedNodes:', newCollapsed);\n        return newCollapsed;\n      });\n\n      // Get the coordinates of the clicked node\n      const nodeAttributes = graphRef.current.getNodeAttributes(nodeId);\n      setCenterX(nodeAttributes.x);\n      setCenterY(nodeAttributes.y);\n    }).catch(error => {\n      console.error('Error fetching data for node click:', error);\n    });\n  };\n\n  // Function to handle right-click on nodes\n  const handleNodeRightClick = nodeId => {\n    collapseNodeAndDescendants(nodeId);\n  };\n\n  // Function to collapse a node and its descendants\n  const collapseNodeAndDescendants = nodeId => {\n    const graph = graphRef.current;\n    const nodesToRemove = new Set();\n    const edgesToRemove = new Set();\n\n    // Collect direct children of the node\n    graph.forEachOutboundNeighbor(nodeId, neighbor => {\n      nodesToRemove.add(neighbor);\n    });\n\n    // Collect all edges connected to these nodes\n    nodesToRemove.forEach(node => {\n      graph.forEachEdge(node, (edgeId, attributes, source, target) => {\n        edgesToRemove.add(edgeId);\n      });\n    });\n\n    // Remove all collected edges and nodes\n    edgesToRemove.forEach(edgeId => {\n      if (graph.hasEdge(edgeId)) {\n        graph.dropEdge(edgeId);\n      }\n    });\n    nodesToRemove.forEach(node => {\n      if (graph.hasNode(node)) {\n        graph.dropNode(node);\n      }\n    });\n\n    // Add the node and its children to the collapsed nodes set\n    setCollapsedNodes(prevCollapsed => {\n      const newCollapsed = new Set(prevCollapsed);\n      newCollapsed.add(nodeId);\n      nodesToRemove.forEach(node => newCollapsed.add(node));\n      console.log(newCollapsed);\n      return newCollapsed;\n    });\n\n    // Refresh the graph\n    sigma.refresh();\n  };\n\n  // Function to add nodes and edges with a delay\n  async function addNodesAndEdgesWithDelay(nodes, graph, parentX, parentY, startAngle, angleSpread, radius, edges, level) {\n    const newAngles = {}; // Local variable to store angles for this batch of nodes\n\n    for (const [index, node] of nodes.entries()) {\n      if (collapsedNodes.has(node.id)) continue; // Skip adding collapsed nodes\n\n      const angle = startAngle + index * angleSpread / nodes.length;\n      const x = parentX + radius * Math.cos(angle);\n      const y = parentY + radius * Math.sin(angle);\n\n      // Store the angle in a local variable\n      newAngles[node.id] = angle;\n      if (!graph.hasNode(node.id)) {\n        graph.addNode(node.id, {\n          label: node.label,\n          size: 20,\n          color: 'black',\n          className: 'fade-in',\n          // Apply the fade-in class\n          x: x,\n          y: y\n        });\n\n        // Add node level information\n        setNodeLevel(prevNodeLevel => [...prevNodeLevel, {\n          id: node.id,\n          label: node.label,\n          level: level\n        }]);\n      }\n      await sleep(100); // Wait for 100ms\n\n      // Add edges related to this node\n      edges.forEach(edge => {\n        if ((edge.source === node.id || edge.target === node.id) && !collapsedNodes.has(edge.source) && !collapsedNodes.has(edge.target)) {\n          if (!graph.hasEdge(edge.source, edge.target)) {\n            try {\n              graph.addEdge(edge.source, edge.target);\n            } catch (error) {\n              console.warn(`Failed to add edge from ${edge.source} to ${edge.target}:`, error);\n            }\n          }\n        }\n      });\n      await sleep(50); // Wait for 50ms before adding the next edge\n    }\n\n    // Update nodeAngles state after processing all nodes\n    setNodeAngles(prevAngles => ({\n      ...prevAngles,\n      ...newAngles\n    }));\n  }\n\n  // Sleep function to pause execution\n  function sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n  useEffect(() => {\n    if (!centralNode.id) {\n      console.log('Central node ID is empty, fetching initial data...');\n      fetchDataForKey('Root') // Replace 'Root' with your actual initial node ID\n      .then(data => {\n        const central = data.central[0]; // Assuming central is an array with one element\n        setCentralNode({\n          id: central.id,\n          label: central.label\n        });\n        const parents = data.parents.map(({\n          id,\n          label\n        }) => ({\n          id: id,\n          label: label\n        }));\n        const children = data.children.map(({\n          id,\n          label\n        }) => ({\n          id: id,\n          label: label\n        }));\n        console.log('Fetched children:', children);\n        setParentNodes(parents);\n        setChildNodes(children);\n        setEdges(defineEdges(data, central.id));\n\n        // Remove children from the collapsed nodes set\n        setCollapsedNodes(prevCollapsed => {\n          const newCollapsed = new Set(prevCollapsed);\n          children.forEach(child => newCollapsed.delete(child.id));\n          console.log('Updated collapsedNodes:', newCollapsed);\n          return newCollapsed;\n        });\n      }).catch(error => {\n        console.error('Error fetching initial data:', error);\n      });\n    }\n  }, [centralNode.id]); // Trigger fetching whenever centralNode.id changes\n\n  // Effect to update graph visualization\n  useEffect(() => {\n    const graph = graphRef.current; // Use the persistent graph instance\n\n    // Add central node if it doesn't exist\n    if (centralNode.id && !graph.hasNode(centralNode.id)) {\n      console.log('Adding central node to graph:', centralNode);\n      graph.addNode(centralNode.id, {\n        label: centralNode.label,\n        size: 20,\n        color: 'black',\n        className: 'fade-in',\n        // Apply the fade-in class\n        x: centerX,\n        y: centerY\n      });\n\n      // Add central node level information\n      setNodeLevel([{\n        id: centralNode.id,\n        label: centralNode.label,\n        level: 0\n      }]);\n    }\n\n    // Add parent nodes and edges with delay\n    const parentAngleSpread = Math.PI / 2;\n    const parentRadius = 100;\n    const parentStartAngle = 3 * Math.PI / 4;\n    addNodesAndEdgesWithDelay(parentNodes, graph, centerX, centerY, parentStartAngle, parentAngleSpread, parentRadius, edges, 1);\n    if (firstRun === true) {\n      // Add child nodes and edges with delay\n      const childAngleSpread = Math.PI * 2; // 360 degrees for the first run\n      const childRadius = 100;\n      const childStartAngle = 0; // Start angle for 360 degrees\n      addNodesAndEdgesWithDelay(childNodes, graph, centerX, centerY, childStartAngle, childAngleSpread, childRadius, edges, 1);\n      setFirstRun(false); // Set firstRun to false after the first run\n    } else {\n      // Retrieve the parent's angle to calculate the starting angle for children\n      const parentAngle = nodeAngles[centralNode.id] || 0;\n      const childAngleSpread = Math.PI / 2;\n      const childRadius = 100;\n      const childStartAngle = parentAngle; // Start angle based on parent's angle\n      addNodesAndEdgesWithDelay(childNodes, graph, centerX, centerY, childStartAngle, childAngleSpread, childRadius, edges, 1);\n      console.log('first run ? : ', firstRun);\n    }\n\n    // Clear any existing click handlers\n    sigma.removeAllListeners('clickNode');\n\n    // Set up click handler\n    sigma.on('clickNode', event => {\n      handleNodeClick(event.node);\n    });\n\n    // Set up right-click handler\n    sigma.on('rightClickNode', event => {\n      handleNodeRightClick(event.node);\n    });\n\n    // Set the graph to Sigma and refresh\n    sigma.setGraph(graph);\n    sigma.refresh();\n\n    // Cleanup function\n    return () => {\n      sigma.removeAllListeners('clickNode');\n      sigma.removeAllListeners('rightClickNode');\n    };\n  }, [sigma, parentNodes, childNodes, edges, centralNode, centerX, centerY, collapsedNodes, firstRun]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 322,\n    columnNumber: 10\n  }, this);\n};\n_s(GraphComponent, \"WKc9KOsEjLKhJHvhfbjqStKUuX4=\", false, function () {\n  return [useSigma];\n});\n_c = GraphComponent;\nconst GraphWrapper = () => /*#__PURE__*/_jsxDEV(SigmaContainer, {\n  children: /*#__PURE__*/_jsxDEV(GraphComponent, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 327,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 326,\n  columnNumber: 3\n}, this);\n_c2 = GraphWrapper;\nexport default GraphWrapper;\nvar _c, _c2;\n$RefreshReg$(_c, \"GraphComponent\");\n$RefreshReg$(_c2, \"GraphWrapper\");","map":{"version":3,"names":["React","useEffect","useRef","useState","SigmaContainer","useSigma","Graph","jsxDEV","_jsxDEV","fadeInStyle","styleSheet","document","createElement","type","innerText","head","appendChild","fetchDataForKey","key","baseUrl","url","response","fetch","ok","Error","status","data","json","console","log","error","defineEdges","centralNodeId","edges","children","forEach","child","push","source","target","id","parents","parent","GraphComponent","_s","sigma","containerRef","graphRef","centralNode","setCentralNode","label","parentNodes","setParentNodes","childNodes","setChildNodes","setEdges","nodeLevel","setNodeLevel","centerX","setCenterX","centerY","setCenterY","collapsedNodes","setCollapsedNodes","Set","firstRun","setFirstRun","nodeAngles","setNodeAngles","handleNodeClick","nodeId","then","central","map","prevCollapsed","newCollapsed","delete","nodeAttributes","current","getNodeAttributes","x","y","catch","handleNodeRightClick","collapseNodeAndDescendants","graph","nodesToRemove","edgesToRemove","forEachOutboundNeighbor","neighbor","add","node","forEachEdge","edgeId","attributes","hasEdge","dropEdge","hasNode","dropNode","refresh","addNodesAndEdgesWithDelay","nodes","parentX","parentY","startAngle","angleSpread","radius","level","newAngles","index","entries","has","angle","length","Math","cos","sin","addNode","size","color","className","prevNodeLevel","sleep","edge","addEdge","warn","prevAngles","ms","Promise","resolve","setTimeout","parentAngleSpread","PI","parentRadius","parentStartAngle","childAngleSpread","childRadius","childStartAngle","parentAngle","removeAllListeners","on","event","setGraph","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","GraphWrapper","_c2","$RefreshReg$"],"sources":["D:/code/MeshTree/frontend/src/GraphWrapper.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport { SigmaContainer, useSigma } from '@react-sigma/core';\r\nimport Graph from 'graphology';\r\n\r\n// CSS for fade-in effect\r\nconst fadeInStyle = `\r\n  .fade-in {\r\n    opacity: 0;\r\n    animation: fadeIn 1s forwards;\r\n  }\r\n\r\n  @keyframes fadeIn {\r\n    to {\r\n      opacity: 1;\r\n    }\r\n  }\r\n`;\r\n\r\n// Inject the CSS into the document\r\nconst styleSheet = document.createElement(\"style\");\r\nstyleSheet.type = \"text/css\";\r\nstyleSheet.innerText = fadeInStyle;\r\ndocument.head.appendChild(styleSheet);\r\n\r\nasync function fetchDataForKey(key) {\r\n  const baseUrl = 'http://localhost:5000';\r\n  const url = `${baseUrl}/get/${key}`;\r\n\r\n  try {\r\n    const response = await fetch(url);\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! Status: ${response.status}`);\r\n    }\r\n    const data = await response.json();\r\n    console.log('API Response:', data); // Log the API response\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error fetching data:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nfunction defineEdges(data, centralNodeId) {\r\n  const edges = [];\r\n  data.children.forEach((child) => {\r\n    edges.push({ source: centralNodeId, target: child.id });\r\n  });\r\n  data.parents.forEach((parent) => {\r\n    edges.push({ source: parent.id, target: centralNodeId });\r\n  });\r\n  return edges;\r\n}\r\n\r\nconst GraphComponent = () => {\r\n  const sigma = useSigma();\r\n  const containerRef = useRef(null);\r\n  const graphRef = useRef(new Graph()); // Persistent graph instance\r\n  const [centralNode, setCentralNode] = useState({ id: '', label: '' });\r\n  const [parentNodes, setParentNodes] = useState([]);\r\n  const [childNodes, setChildNodes] = useState([]);\r\n  const [edges, setEdges] = useState([]);\r\n  const [nodeLevel, setNodeLevel] = useState([]); // Initialize nodeLevel as a state\r\n  const [centerX, setCenterX] = useState(0); // State for center X coordinate\r\n  const [centerY, setCenterY] = useState(0); // State for center Y coordinate\r\n  const [collapsedNodes, setCollapsedNodes] = useState(new Set()); // Track collapsed nodes and their children\r\n  const [firstRun, setFirstRun] = useState(true); // Track if it's the first run\r\n  const [nodeAngles, setNodeAngles] = useState({}); // State to store node angles\r\n\r\n  // Function to handle node clicks\r\n  const handleNodeClick = (nodeId) => {\r\n    console.log(`Node clicked: ${nodeId}`);\r\n    fetchDataForKey(nodeId)\r\n      .then((data) => {\r\n        const central = data.central[0]; // Assuming central is an array with one element\r\n        setCentralNode({ id: central.id, label: central.label });\r\n\r\n        const parents = data.parents.map(({ id, label }) => ({\r\n          id: id,\r\n          label: label\r\n        }));\r\n\r\n        const children = data.children.map(({ id, label }) => ({\r\n          id: id,\r\n          label: label\r\n        }));\r\n\r\n        console.log('Fetched children:', children);\r\n        setParentNodes(parents);\r\n        setChildNodes(children);\r\n        setEdges(defineEdges(data, central.id));\r\n\r\n        // Remove children from the collapsed nodes set\r\n        setCollapsedNodes((prevCollapsed) => {\r\n          const newCollapsed = new Set(prevCollapsed);\r\n          children.forEach((child) => newCollapsed.delete(child.id));\r\n          console.log('Updated collapsedNodes:', newCollapsed);\r\n          return newCollapsed;\r\n        });\r\n\r\n        // Get the coordinates of the clicked node\r\n        const nodeAttributes = graphRef.current.getNodeAttributes(nodeId);\r\n        setCenterX(nodeAttributes.x);\r\n        setCenterY(nodeAttributes.y);\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error fetching data for node click:', error);\r\n      });\r\n  };\r\n\r\n  // Function to handle right-click on nodes\r\n  const handleNodeRightClick = (nodeId) => {\r\n    collapseNodeAndDescendants(nodeId);\r\n  };\r\n\r\n  // Function to collapse a node and its descendants\r\n  const collapseNodeAndDescendants = (nodeId) => {\r\n    const graph = graphRef.current;\r\n    const nodesToRemove = new Set();\r\n    const edgesToRemove = new Set();\r\n\r\n    // Collect direct children of the node\r\n    graph.forEachOutboundNeighbor(nodeId, (neighbor) => {\r\n      nodesToRemove.add(neighbor);\r\n    });\r\n\r\n    // Collect all edges connected to these nodes\r\n    nodesToRemove.forEach((node) => {\r\n      graph.forEachEdge(node, (edgeId, attributes, source, target) => {\r\n        edgesToRemove.add(edgeId);\r\n      });\r\n    });\r\n\r\n    // Remove all collected edges and nodes\r\n    edgesToRemove.forEach((edgeId) => {\r\n      if (graph.hasEdge(edgeId)) {\r\n        graph.dropEdge(edgeId);\r\n      }\r\n    });\r\n    nodesToRemove.forEach((node) => {\r\n      if (graph.hasNode(node)) {\r\n        graph.dropNode(node);\r\n      }\r\n    });\r\n\r\n    // Add the node and its children to the collapsed nodes set\r\n    setCollapsedNodes((prevCollapsed) => {\r\n      const newCollapsed = new Set(prevCollapsed);\r\n      newCollapsed.add(nodeId);\r\n      nodesToRemove.forEach((node) => newCollapsed.add(node));\r\n      console.log(newCollapsed);\r\n      return newCollapsed;\r\n    });\r\n\r\n    // Refresh the graph\r\n    sigma.refresh();\r\n  };\r\n\r\n  // Function to add nodes and edges with a delay\r\n  async function addNodesAndEdgesWithDelay(nodes, graph, parentX, parentY, startAngle, angleSpread, radius, edges, level) {\r\n    const newAngles = {}; // Local variable to store angles for this batch of nodes\r\n\r\n    for (const [index, node] of nodes.entries()) {\r\n      if (collapsedNodes.has(node.id)) continue; // Skip adding collapsed nodes\r\n\r\n      const angle = startAngle + (index * angleSpread) / (nodes.length);\r\n      const x = parentX + radius * Math.cos(angle);\r\n      const y = parentY + radius * Math.sin(angle);\r\n\r\n      // Store the angle in a local variable\r\n      newAngles[node.id] = angle;\r\n\r\n      if (!graph.hasNode(node.id)) {\r\n        graph.addNode(node.id, {\r\n          label: node.label,\r\n          size: 20,\r\n          color: 'black',\r\n          className: 'fade-in', // Apply the fade-in class\r\n          x: x,\r\n          y: y\r\n        });\r\n\r\n        // Add node level information\r\n        setNodeLevel((prevNodeLevel) => [\r\n          ...prevNodeLevel,\r\n          { id: node.id, label: node.label, level: level }\r\n        ]);\r\n      }\r\n      await sleep(100); // Wait for 100ms\r\n\r\n      // Add edges related to this node\r\n      edges.forEach(edge => {\r\n        if ((edge.source === node.id || edge.target === node.id) && !collapsedNodes.has(edge.source) && !collapsedNodes.has(edge.target)) {\r\n          if (!graph.hasEdge(edge.source, edge.target)) {\r\n            try {\r\n              graph.addEdge(edge.source, edge.target);\r\n            } catch (error) {\r\n              console.warn(`Failed to add edge from ${edge.source} to ${edge.target}:`, error);\r\n            }\r\n          }\r\n        }\r\n      });\r\n      await sleep(50); // Wait for 50ms before adding the next edge\r\n    }\r\n\r\n    // Update nodeAngles state after processing all nodes\r\n    setNodeAngles((prevAngles) => ({\r\n      ...prevAngles,\r\n      ...newAngles,\r\n    }));\r\n  }\r\n\r\n  // Sleep function to pause execution\r\n  function sleep(ms) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!centralNode.id) {\r\n      console.log('Central node ID is empty, fetching initial data...');\r\n      fetchDataForKey('Root') // Replace 'Root' with your actual initial node ID\r\n        .then((data) => {\r\n          const central = data.central[0]; // Assuming central is an array with one element\r\n          setCentralNode({ id: central.id, label: central.label });\r\n\r\n          const parents = data.parents.map(({ id, label }) => ({\r\n            id: id,\r\n            label: label\r\n          }));\r\n\r\n          const children = data.children.map(({ id, label }) => ({\r\n            id: id,\r\n            label: label\r\n          }));\r\n\r\n          console.log('Fetched children:', children);\r\n          setParentNodes(parents);\r\n          setChildNodes(children);\r\n          setEdges(defineEdges(data, central.id));\r\n\r\n          // Remove children from the collapsed nodes set\r\n          setCollapsedNodes((prevCollapsed) => {\r\n            const newCollapsed = new Set(prevCollapsed);\r\n            children.forEach((child) => newCollapsed.delete(child.id));\r\n            console.log('Updated collapsedNodes:', newCollapsed);\r\n            return newCollapsed;\r\n          });\r\n        })\r\n        .catch((error) => {\r\n          console.error('Error fetching initial data:', error);\r\n        });\r\n    }\r\n  }, [centralNode.id]); // Trigger fetching whenever centralNode.id changes\r\n\r\n  // Effect to update graph visualization\r\n  useEffect(() => {\r\n    const graph = graphRef.current; // Use the persistent graph instance\r\n\r\n    // Add central node if it doesn't exist\r\n    if (centralNode.id && !graph.hasNode(centralNode.id)) {\r\n      console.log('Adding central node to graph:', centralNode);\r\n      graph.addNode(centralNode.id, {\r\n        label: centralNode.label,\r\n        size: 20,\r\n        color: 'black',\r\n        className: 'fade-in', // Apply the fade-in class\r\n        x: centerX,\r\n        y: centerY\r\n      });\r\n\r\n      // Add central node level information\r\n      setNodeLevel([{ id: centralNode.id, label: centralNode.label, level: 0 }]);\r\n    }\r\n\r\n    // Add parent nodes and edges with delay\r\n    const parentAngleSpread = Math.PI / 2;\r\n    const parentRadius = 100;\r\n    const parentStartAngle = 3 * Math.PI / 4;\r\n    addNodesAndEdgesWithDelay(parentNodes, graph, centerX, centerY, parentStartAngle, parentAngleSpread, parentRadius, edges, 1);\r\n\r\n    if (firstRun === true) {\r\n      // Add child nodes and edges with delay\r\n      const childAngleSpread = Math.PI * 2; // 360 degrees for the first run\r\n      const childRadius = 100;\r\n      const childStartAngle = 0; // Start angle for 360 degrees\r\n      addNodesAndEdgesWithDelay(childNodes, graph, centerX, centerY, childStartAngle, childAngleSpread, childRadius, edges, 1);\r\n\r\n      setFirstRun(false); // Set firstRun to false after the first run\r\n    } else {\r\n      // Retrieve the parent's angle to calculate the starting angle for children\r\n      const parentAngle = nodeAngles[centralNode.id] || 0;\r\n      const childAngleSpread = Math.PI / 2;\r\n      const childRadius = 100;\r\n      const childStartAngle = parentAngle; // Start angle based on parent's angle\r\n      addNodesAndEdgesWithDelay(childNodes, graph, centerX, centerY, childStartAngle, childAngleSpread, childRadius, edges, 1);\r\n      console.log('first run ? : ',firstRun);\r\n    }\r\n\r\n    // Clear any existing click handlers\r\n    sigma.removeAllListeners('clickNode');\r\n\r\n    // Set up click handler\r\n    sigma.on('clickNode', (event) => {\r\n      handleNodeClick(event.node);\r\n    });\r\n\r\n    // Set up right-click handler\r\n    sigma.on('rightClickNode', (event) => {\r\n      handleNodeRightClick(event.node);\r\n    });\r\n\r\n    // Set the graph to Sigma and refresh\r\n    sigma.setGraph(graph);\r\n    sigma.refresh();\r\n\r\n    // Cleanup function\r\n    return () => {\r\n      sigma.removeAllListeners('clickNode');\r\n      sigma.removeAllListeners('rightClickNode');\r\n    };\r\n  }, [sigma, parentNodes, childNodes, edges, centralNode, centerX, centerY, collapsedNodes, firstRun]);\r\n\r\n  return <div ref={containerRef} />;\r\n};\r\n\r\nconst GraphWrapper = () => (\r\n  <SigmaContainer>\r\n    <GraphComponent />\r\n  </SigmaContainer>\r\n);\r\n\r\nexport default GraphWrapper;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}