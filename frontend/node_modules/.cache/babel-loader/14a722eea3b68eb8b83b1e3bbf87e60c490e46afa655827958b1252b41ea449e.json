{"ast":null,"code":"import { t as toPropertyKey, e as _getPrototypeOf, d as _createClass, a as _classCallCheck, _ as _inherits, b as _callSuper, c as _assertThisInitialized } from './inherits-45ee1abe.esm.js';\nimport { i as indexToColor, f as floatColor } from './colors-2f6d17f0.esm.js';\nfunction _defineProperty(obj, key, value) {\n  key = toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread2(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n    if (object === null) break;\n  }\n  return object;\n}\nfunction _get() {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get.bind();\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = _superPropBase(target, property);\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n      if (desc.get) {\n        return desc.get.call(arguments.length < 3 ? target : receiver);\n      }\n      return desc.value;\n    };\n  }\n  return _get.apply(this, arguments);\n}\nfunction getAttributeItemsCount(attr) {\n  return attr.normalized ? 1 : attr.size;\n}\nfunction getAttributesItemsCount(attrs) {\n  var res = 0;\n  attrs.forEach(function (attr) {\n    return res += getAttributeItemsCount(attr);\n  });\n  return res;\n}\nfunction loadShader(type, gl, source) {\n  var glType = type === \"VERTEX\" ? gl.VERTEX_SHADER : gl.FRAGMENT_SHADER;\n\n  // Creating the shader\n  var shader = gl.createShader(glType);\n  if (shader === null) {\n    throw new Error(\"loadShader: error while creating the shader\");\n  }\n\n  // Loading source\n  gl.shaderSource(shader, source);\n\n  // Compiling the shader\n  gl.compileShader(shader);\n\n  // Retrieving compilation status\n  var successfullyCompiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n\n  // Throwing if something went awry\n  if (!successfullyCompiled) {\n    var infoLog = gl.getShaderInfoLog(shader);\n    gl.deleteShader(shader);\n    throw new Error(\"loadShader: error while compiling the shader:\\n\".concat(infoLog, \"\\n\").concat(source));\n  }\n  return shader;\n}\nfunction loadVertexShader(gl, source) {\n  return loadShader(\"VERTEX\", gl, source);\n}\nfunction loadFragmentShader(gl, source) {\n  return loadShader(\"FRAGMENT\", gl, source);\n}\n\n/**\n * Function used to load a program.\n */\nfunction loadProgram(gl, shaders) {\n  var program = gl.createProgram();\n  if (program === null) {\n    throw new Error(\"loadProgram: error while creating the program.\");\n  }\n  var i, l;\n\n  // Attaching the shaders\n  for (i = 0, l = shaders.length; i < l; i++) gl.attachShader(program, shaders[i]);\n  gl.linkProgram(program);\n\n  // Checking status\n  var successfullyLinked = gl.getProgramParameter(program, gl.LINK_STATUS);\n  if (!successfullyLinked) {\n    gl.deleteProgram(program);\n    throw new Error(\"loadProgram: error while linking the program.\");\n  }\n  return program;\n}\nfunction killProgram(_ref) {\n  var gl = _ref.gl,\n    buffer = _ref.buffer,\n    program = _ref.program,\n    vertexShader = _ref.vertexShader,\n    fragmentShader = _ref.fragmentShader;\n  gl.deleteShader(vertexShader);\n  gl.deleteShader(fragmentShader);\n  gl.deleteProgram(program);\n  gl.deleteBuffer(buffer);\n}\n\n/**\n * Function use to print a float for inserting in a GLSL program.\n */\nfunction numberToGLSLFloat(n) {\n  return n % 1 === 0 ? n.toFixed(1) : n.toString();\n}\nvar PICKING_PREFIX = \"#define PICKING_MODE\\n\";\nvar SIZE_FACTOR_PER_ATTRIBUTE_TYPE = _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, WebGL2RenderingContext.BOOL, 1), WebGL2RenderingContext.BYTE, 1), WebGL2RenderingContext.UNSIGNED_BYTE, 1), WebGL2RenderingContext.SHORT, 2), WebGL2RenderingContext.UNSIGNED_SHORT, 2), WebGL2RenderingContext.INT, 4), WebGL2RenderingContext.UNSIGNED_INT, 4), WebGL2RenderingContext.FLOAT, 4);\nvar AbstractProgram = /*#__PURE__*/_createClass(\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nfunction AbstractProgram(_gl, _pickGl, _renderer) {\n  _classCallCheck(this, AbstractProgram);\n});\nvar Program = /*#__PURE__*/function () {\n  function Program(gl, pickingBuffer, renderer) {\n    _classCallCheck(this, Program);\n    // GLenum\n    _defineProperty(this, \"array\", new Float32Array());\n    _defineProperty(this, \"constantArray\", new Float32Array());\n    _defineProperty(this, \"capacity\", 0);\n    _defineProperty(this, \"verticesCount\", 0);\n    // Reading and caching program definition\n    var def = this.getDefinition();\n    this.VERTICES = def.VERTICES;\n    this.VERTEX_SHADER_SOURCE = def.VERTEX_SHADER_SOURCE;\n    this.FRAGMENT_SHADER_SOURCE = def.FRAGMENT_SHADER_SOURCE;\n    this.UNIFORMS = def.UNIFORMS;\n    this.ATTRIBUTES = def.ATTRIBUTES;\n    this.METHOD = def.METHOD;\n    this.CONSTANT_ATTRIBUTES = \"CONSTANT_ATTRIBUTES\" in def ? def.CONSTANT_ATTRIBUTES : [];\n    this.CONSTANT_DATA = \"CONSTANT_DATA\" in def ? def.CONSTANT_DATA : [];\n    this.isInstanced = \"CONSTANT_ATTRIBUTES\" in def;\n\n    // Computing stride\n    this.ATTRIBUTES_ITEMS_COUNT = getAttributesItemsCount(this.ATTRIBUTES);\n    this.STRIDE = this.VERTICES * this.ATTRIBUTES_ITEMS_COUNT;\n\n    // Members\n    this.renderer = renderer;\n    this.normalProgram = this.getProgramInfo(\"normal\", gl, def.VERTEX_SHADER_SOURCE, def.FRAGMENT_SHADER_SOURCE, null);\n    this.pickProgram = pickingBuffer ? this.getProgramInfo(\"pick\", gl, PICKING_PREFIX + def.VERTEX_SHADER_SOURCE, PICKING_PREFIX + def.FRAGMENT_SHADER_SOURCE, pickingBuffer) : null;\n\n    // For instanced programs:\n    if (this.isInstanced) {\n      var constantAttributesItemsCount = getAttributesItemsCount(this.CONSTANT_ATTRIBUTES);\n      if (this.CONSTANT_DATA.length !== this.VERTICES) throw new Error(\"Program: error while getting constant data (expected \".concat(this.VERTICES, \" items, received \").concat(this.CONSTANT_DATA.length, \" instead)\"));\n      this.constantArray = new Float32Array(this.CONSTANT_DATA.length * constantAttributesItemsCount);\n      for (var i = 0; i < this.CONSTANT_DATA.length; i++) {\n        var vector = this.CONSTANT_DATA[i];\n        if (vector.length !== constantAttributesItemsCount) throw new Error(\"Program: error while getting constant data (one vector has \".concat(vector.length, \" items instead of \").concat(constantAttributesItemsCount, \")\"));\n        for (var j = 0; j < vector.length; j++) this.constantArray[i * constantAttributesItemsCount + j] = vector[j];\n      }\n      this.STRIDE = this.ATTRIBUTES_ITEMS_COUNT;\n    }\n  }\n  _createClass(Program, [{\n    key: \"kill\",\n    value: function kill() {\n      killProgram(this.normalProgram);\n      if (this.pickProgram) {\n        killProgram(this.pickProgram);\n        this.pickProgram = null;\n      }\n    }\n  }, {\n    key: \"getProgramInfo\",\n    value: function getProgramInfo(name, gl, vertexShaderSource, fragmentShaderSource, frameBuffer) {\n      var def = this.getDefinition();\n\n      // WebGL buffers\n      var buffer = gl.createBuffer();\n      if (buffer === null) throw new Error(\"Program: error while creating the WebGL buffer.\");\n\n      // Shaders and program\n      var vertexShader = loadVertexShader(gl, vertexShaderSource);\n      var fragmentShader = loadFragmentShader(gl, fragmentShaderSource);\n      var program = loadProgram(gl, [vertexShader, fragmentShader]);\n\n      // Initializing locations\n      var uniformLocations = {};\n      def.UNIFORMS.forEach(function (uniformName) {\n        var location = gl.getUniformLocation(program, uniformName);\n        if (location) uniformLocations[uniformName] = location;\n      });\n      var attributeLocations = {};\n      def.ATTRIBUTES.forEach(function (attr) {\n        attributeLocations[attr.name] = gl.getAttribLocation(program, attr.name);\n      });\n\n      // For instanced programs:\n      var constantBuffer;\n      if (\"CONSTANT_ATTRIBUTES\" in def) {\n        def.CONSTANT_ATTRIBUTES.forEach(function (attr) {\n          attributeLocations[attr.name] = gl.getAttribLocation(program, attr.name);\n        });\n        constantBuffer = gl.createBuffer();\n        if (constantBuffer === null) throw new Error(\"Program: error while creating the WebGL constant buffer.\");\n      }\n      return {\n        name: name,\n        program: program,\n        gl: gl,\n        frameBuffer: frameBuffer,\n        buffer: buffer,\n        constantBuffer: constantBuffer || {},\n        uniformLocations: uniformLocations,\n        attributeLocations: attributeLocations,\n        isPicking: name === \"pick\",\n        vertexShader: vertexShader,\n        fragmentShader: fragmentShader\n      };\n    }\n  }, {\n    key: \"bindProgram\",\n    value: function bindProgram(program) {\n      var _this = this;\n      var offset = 0;\n      var gl = program.gl,\n        buffer = program.buffer;\n      if (!this.isInstanced) {\n        gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n        offset = 0;\n        this.ATTRIBUTES.forEach(function (attr) {\n          return offset += _this.bindAttribute(attr, program, offset);\n        });\n        gl.bufferData(gl.ARRAY_BUFFER, this.array, gl.DYNAMIC_DRAW);\n      } else {\n        // Handle constant data (things that remain unchanged for all items):\n        gl.bindBuffer(gl.ARRAY_BUFFER, program.constantBuffer);\n        offset = 0;\n        this.CONSTANT_ATTRIBUTES.forEach(function (attr) {\n          return offset += _this.bindAttribute(attr, program, offset, false);\n        });\n        gl.bufferData(gl.ARRAY_BUFFER, this.constantArray, gl.STATIC_DRAW);\n\n        // Handle \"instance specific\" data (things that vary for each item):\n        gl.bindBuffer(gl.ARRAY_BUFFER, program.buffer);\n        offset = 0;\n        this.ATTRIBUTES.forEach(function (attr) {\n          return offset += _this.bindAttribute(attr, program, offset, true);\n        });\n        gl.bufferData(gl.ARRAY_BUFFER, this.array, gl.DYNAMIC_DRAW);\n      }\n      gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    }\n  }, {\n    key: \"unbindProgram\",\n    value: function unbindProgram(program) {\n      var _this2 = this;\n      if (!this.isInstanced) {\n        this.ATTRIBUTES.forEach(function (attr) {\n          return _this2.unbindAttribute(attr, program);\n        });\n      } else {\n        this.CONSTANT_ATTRIBUTES.forEach(function (attr) {\n          return _this2.unbindAttribute(attr, program, false);\n        });\n        this.ATTRIBUTES.forEach(function (attr) {\n          return _this2.unbindAttribute(attr, program, true);\n        });\n      }\n    }\n  }, {\n    key: \"bindAttribute\",\n    value: function bindAttribute(attr, program, offset, setDivisor) {\n      var sizeFactor = SIZE_FACTOR_PER_ATTRIBUTE_TYPE[attr.type];\n      if (typeof sizeFactor !== \"number\") throw new Error(\"Program.bind: yet unsupported attribute type \\\"\".concat(attr.type, \"\\\"\"));\n      var location = program.attributeLocations[attr.name];\n      var gl = program.gl;\n      if (location !== -1) {\n        gl.enableVertexAttribArray(location);\n        var stride = !this.isInstanced ? this.ATTRIBUTES_ITEMS_COUNT * Float32Array.BYTES_PER_ELEMENT : (setDivisor ? this.ATTRIBUTES_ITEMS_COUNT : getAttributesItemsCount(this.CONSTANT_ATTRIBUTES)) * Float32Array.BYTES_PER_ELEMENT;\n        gl.vertexAttribPointer(location, attr.size, attr.type, attr.normalized || false, stride, offset);\n        if (this.isInstanced && setDivisor) {\n          if (gl instanceof WebGL2RenderingContext) {\n            gl.vertexAttribDivisor(location, 1);\n          } else {\n            var ext = gl.getExtension(\"ANGLE_instanced_arrays\");\n            if (ext) ext.vertexAttribDivisorANGLE(location, 1);\n          }\n        }\n      }\n      return attr.size * sizeFactor;\n    }\n  }, {\n    key: \"unbindAttribute\",\n    value: function unbindAttribute(attr, program, unsetDivisor) {\n      var location = program.attributeLocations[attr.name];\n      var gl = program.gl;\n      if (location !== -1) {\n        gl.disableVertexAttribArray(location);\n        if (this.isInstanced && unsetDivisor) {\n          if (gl instanceof WebGL2RenderingContext) {\n            gl.vertexAttribDivisor(location, 0);\n          } else {\n            var ext = gl.getExtension(\"ANGLE_instanced_arrays\");\n            if (ext) ext.vertexAttribDivisorANGLE(location, 0);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"reallocate\",\n    value: function reallocate(capacity) {\n      // If desired capacity has not changed we do nothing\n      // NOTE: it's possible here to implement more subtle reallocation schemes\n      // when the number of rendered items increase or decrease\n      if (capacity === this.capacity) return;\n      this.capacity = capacity;\n      this.verticesCount = this.VERTICES * capacity;\n      this.array = new Float32Array(!this.isInstanced ? this.verticesCount * this.ATTRIBUTES_ITEMS_COUNT : this.capacity * this.ATTRIBUTES_ITEMS_COUNT);\n    }\n  }, {\n    key: \"hasNothingToRender\",\n    value: function hasNothingToRender() {\n      return this.verticesCount === 0;\n    }\n  }, {\n    key: \"renderProgram\",\n    value: function renderProgram(params, programInfo) {\n      var gl = programInfo.gl,\n        program = programInfo.program;\n\n      // With the current fix for #1397, the alpha blending is enabled for the\n      // picking layer:\n      gl.enable(gl.BLEND);\n\n      // Original code:\n      // if (!isPicking) gl.enable(gl.BLEND);\n      // else gl.disable(gl.BLEND);\n\n      gl.useProgram(program);\n      this.setUniforms(params, programInfo);\n      this.drawWebGL(this.METHOD, programInfo);\n    }\n  }, {\n    key: \"render\",\n    value: function render(params) {\n      if (this.hasNothingToRender()) return;\n      if (this.pickProgram) {\n        this.pickProgram.gl.viewport(0, 0, params.width * params.pixelRatio / params.downSizingRatio, params.height * params.pixelRatio / params.downSizingRatio);\n        this.bindProgram(this.pickProgram);\n        this.renderProgram(_objectSpread2(_objectSpread2({}, params), {}, {\n          pixelRatio: params.pixelRatio / params.downSizingRatio\n        }), this.pickProgram);\n        this.unbindProgram(this.pickProgram);\n      }\n      this.normalProgram.gl.viewport(0, 0, params.width * params.pixelRatio, params.height * params.pixelRatio);\n      this.bindProgram(this.normalProgram);\n      this.renderProgram(params, this.normalProgram);\n      this.unbindProgram(this.normalProgram);\n    }\n  }, {\n    key: \"drawWebGL\",\n    value: function drawWebGL(method, _ref) {\n      var gl = _ref.gl,\n        frameBuffer = _ref.frameBuffer;\n      gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n      if (!this.isInstanced) {\n        gl.drawArrays(method, 0, this.verticesCount);\n      } else {\n        if (gl instanceof WebGL2RenderingContext) {\n          gl.drawArraysInstanced(method, 0, this.VERTICES, this.capacity);\n        } else {\n          var ext = gl.getExtension(\"ANGLE_instanced_arrays\");\n          if (ext) ext.drawArraysInstancedANGLE(method, 0, this.VERTICES, this.capacity);\n        }\n      }\n    }\n  }]);\n  return Program;\n}();\nvar AbstractNodeProgram = /*#__PURE__*/function (_AbstractProgram) {\n  _inherits(AbstractNodeProgram, _AbstractProgram);\n  function AbstractNodeProgram() {\n    _classCallCheck(this, AbstractNodeProgram);\n    return _callSuper(this, AbstractNodeProgram, arguments);\n  }\n  return _createClass(AbstractNodeProgram);\n}(AbstractProgram);\nvar NodeProgram = /*#__PURE__*/function (_ref) {\n  _inherits(NodeProgram, _ref);\n  function NodeProgram() {\n    _classCallCheck(this, NodeProgram);\n    return _callSuper(this, NodeProgram, arguments);\n  }\n  _createClass(NodeProgram, [{\n    key: \"kill\",\n    value: function kill() {\n      _get(_getPrototypeOf(NodeProgram.prototype), \"kill\", this).call(this);\n    }\n  }, {\n    key: \"process\",\n    value: function process(nodeIndex, offset, data) {\n      var i = offset * this.STRIDE;\n      // NOTE: dealing with hidden items automatically\n      if (data.hidden) {\n        for (var l = i + this.STRIDE; i < l; i++) {\n          this.array[i] = 0;\n        }\n        return;\n      }\n      return this.processVisibleItem(indexToColor(nodeIndex), i, data);\n    }\n  }]);\n  return NodeProgram;\n}(Program);\n/**\n * Helper function combining two or more programs into a single compound one.\n * Note that this is more a quick & easy way to combine program than a really\n * performant option. More performant programs can be written entirely.\n *\n * @param  {array}    programClasses - Program classes to combine.\n * @param  {function} drawLabel - An optional node \"draw label\" function.\n * @param  {function} drawHover - An optional node \"draw hover\" function.\n * @return {function}\n */\nfunction createNodeCompoundProgram(programClasses, drawLabel, drawHover) {\n  return /*#__PURE__*/function () {\n    function NodeCompoundProgram(gl, pickingBuffer, renderer) {\n      _classCallCheck(this, NodeCompoundProgram);\n      _defineProperty(this, \"drawLabel\", drawLabel);\n      _defineProperty(this, \"drawHover\", drawHover);\n      this.programs = programClasses.map(function (Program) {\n        return new Program(gl, pickingBuffer, renderer);\n      });\n    }\n    _createClass(NodeCompoundProgram, [{\n      key: \"reallocate\",\n      value: function reallocate(capacity) {\n        this.programs.forEach(function (program) {\n          return program.reallocate(capacity);\n        });\n      }\n    }, {\n      key: \"process\",\n      value: function process(nodeIndex, offset, data) {\n        this.programs.forEach(function (program) {\n          return program.process(nodeIndex, offset, data);\n        });\n      }\n    }, {\n      key: \"render\",\n      value: function render(params) {\n        this.programs.forEach(function (program) {\n          return program.render(params);\n        });\n      }\n    }, {\n      key: \"kill\",\n      value: function kill() {\n        this.programs.forEach(function (program) {\n          return program.kill();\n        });\n      }\n    }]);\n    return NodeCompoundProgram;\n  }();\n}\nvar AbstractEdgeProgram = /*#__PURE__*/function (_AbstractProgram) {\n  _inherits(AbstractEdgeProgram, _AbstractProgram);\n  function AbstractEdgeProgram() {\n    _classCallCheck(this, AbstractEdgeProgram);\n    return _callSuper(this, AbstractEdgeProgram, arguments);\n  }\n  return _createClass(AbstractEdgeProgram);\n}(AbstractProgram);\nvar EdgeProgram = /*#__PURE__*/function (_ref) {\n  _inherits(EdgeProgram, _ref);\n  function EdgeProgram() {\n    var _this;\n    _classCallCheck(this, EdgeProgram);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _callSuper(this, EdgeProgram, [].concat(args));\n    _defineProperty(_assertThisInitialized(_this), \"drawLabel\", undefined);\n    return _this;\n  }\n  _createClass(EdgeProgram, [{\n    key: \"kill\",\n    value: function kill() {\n      _get(_getPrototypeOf(EdgeProgram.prototype), \"kill\", this).call(this);\n    }\n  }, {\n    key: \"process\",\n    value: function process(edgeIndex, offset, sourceData, targetData, data) {\n      var i = offset * this.STRIDE;\n      // NOTE: dealing with hidden items automatically\n      if (data.hidden || sourceData.hidden || targetData.hidden) {\n        for (var l = i + this.STRIDE; i < l; i++) {\n          this.array[i] = 0;\n        }\n        return;\n      }\n      return this.processVisibleItem(indexToColor(edgeIndex), i, sourceData, targetData, data);\n    }\n  }]);\n  return EdgeProgram;\n}(Program);\n/**\n * Helper function combining two or more programs into a single compound one.\n * Note that this is more a quick & easy way to combine program than a really\n * performant option. More performant programs can be written entirely.\n *\n * @param  {array}    programClasses - Program classes to combine.\n * @param  {function} drawLabel - An optional edge \"draw label\" function.\n * @return {function}\n */\nfunction createEdgeCompoundProgram(programClasses, drawLabel) {\n  return /*#__PURE__*/function () {\n    function EdgeCompoundProgram(gl, pickingBuffer, renderer) {\n      _classCallCheck(this, EdgeCompoundProgram);\n      _defineProperty(this, \"drawLabel\", drawLabel);\n      this.programs = programClasses.map(function (Program) {\n        return new Program(gl, pickingBuffer, renderer);\n      });\n    }\n    _createClass(EdgeCompoundProgram, [{\n      key: \"reallocate\",\n      value: function reallocate(capacity) {\n        this.programs.forEach(function (program) {\n          return program.reallocate(capacity);\n        });\n      }\n    }, {\n      key: \"process\",\n      value: function process(edgeIndex, offset, sourceData, targetData, data) {\n        this.programs.forEach(function (program) {\n          return program.process(edgeIndex, offset, sourceData, targetData, data);\n        });\n      }\n    }, {\n      key: \"render\",\n      value: function render(params) {\n        this.programs.forEach(function (program) {\n          return program.render(params);\n        });\n      }\n    }, {\n      key: \"kill\",\n      value: function kill() {\n        this.programs.forEach(function (program) {\n          return program.kill();\n        });\n      }\n    }]);\n    return EdgeCompoundProgram;\n  }();\n}\nfunction drawStraightEdgeLabel(context, edgeData, sourceData, targetData, settings) {\n  var size = settings.edgeLabelSize,\n    font = settings.edgeLabelFont,\n    weight = settings.edgeLabelWeight,\n    color = settings.edgeLabelColor.attribute ? edgeData[settings.edgeLabelColor.attribute] || settings.edgeLabelColor.color || \"#000\" : settings.edgeLabelColor.color;\n  var label = edgeData.label;\n  if (!label) return;\n  context.fillStyle = color;\n  context.font = \"\".concat(weight, \" \").concat(size, \"px \").concat(font);\n\n  // Computing positions without considering nodes sizes:\n  var sSize = sourceData.size;\n  var tSize = targetData.size;\n  var sx = sourceData.x;\n  var sy = sourceData.y;\n  var tx = targetData.x;\n  var ty = targetData.y;\n  var cx = (sx + tx) / 2;\n  var cy = (sy + ty) / 2;\n  var dx = tx - sx;\n  var dy = ty - sy;\n  var d = Math.sqrt(dx * dx + dy * dy);\n  if (d < sSize + tSize) return;\n\n  // Adding nodes sizes:\n  sx += dx * sSize / d;\n  sy += dy * sSize / d;\n  tx -= dx * tSize / d;\n  ty -= dy * tSize / d;\n  cx = (sx + tx) / 2;\n  cy = (sy + ty) / 2;\n  dx = tx - sx;\n  dy = ty - sy;\n  d = Math.sqrt(dx * dx + dy * dy);\n\n  // Handling ellipsis\n  var textLength = context.measureText(label).width;\n  if (textLength > d) {\n    var ellipsis = \"…\";\n    label = label + ellipsis;\n    textLength = context.measureText(label).width;\n    while (textLength > d && label.length > 1) {\n      label = label.slice(0, -2) + ellipsis;\n      textLength = context.measureText(label).width;\n    }\n    if (label.length < 4) return;\n  }\n  var angle;\n  if (dx > 0) {\n    if (dy > 0) angle = Math.acos(dx / d);else angle = Math.asin(dy / d);\n  } else {\n    if (dy > 0) angle = Math.acos(dx / d) + Math.PI;else angle = Math.asin(dx / d) + Math.PI / 2;\n  }\n  context.save();\n  context.translate(cx, cy);\n  context.rotate(angle);\n  context.fillText(label, -textLength / 2, edgeData.size / 2 + size);\n  context.restore();\n}\nfunction drawDiscNodeLabel(context, data, settings) {\n  if (!data.label) return;\n  var size = settings.labelSize,\n    font = settings.labelFont,\n    weight = settings.labelWeight,\n    color = settings.labelColor.attribute ? data[settings.labelColor.attribute] || settings.labelColor.color || \"#000\" : settings.labelColor.color;\n  context.fillStyle = color;\n  context.font = \"\".concat(weight, \" \").concat(size, \"px \").concat(font);\n  context.fillText(data.label, data.x + data.size + 3, data.y + size / 3);\n}\n\n/**\n * Draw an hovered node.\n * - if there is no label => display a shadow on the node\n * - if the label box is bigger than node size => display a label box that contains the node with a shadow\n * - else node with shadow and the label box\n */\nfunction drawDiscNodeHover(context, data, settings) {\n  var size = settings.labelSize,\n    font = settings.labelFont,\n    weight = settings.labelWeight;\n  context.font = \"\".concat(weight, \" \").concat(size, \"px \").concat(font);\n\n  // Then we draw the label background\n  context.fillStyle = \"#FFF\";\n  context.shadowOffsetX = 0;\n  context.shadowOffsetY = 0;\n  context.shadowBlur = 8;\n  context.shadowColor = \"#000\";\n  var PADDING = 2;\n  if (typeof data.label === \"string\") {\n    var textWidth = context.measureText(data.label).width,\n      boxWidth = Math.round(textWidth + 5),\n      boxHeight = Math.round(size + 2 * PADDING),\n      radius = Math.max(data.size, size / 2) + PADDING;\n    var angleRadian = Math.asin(boxHeight / 2 / radius);\n    var xDeltaCoord = Math.sqrt(Math.abs(Math.pow(radius, 2) - Math.pow(boxHeight / 2, 2)));\n    context.beginPath();\n    context.moveTo(data.x + xDeltaCoord, data.y + boxHeight / 2);\n    context.lineTo(data.x + radius + boxWidth, data.y + boxHeight / 2);\n    context.lineTo(data.x + radius + boxWidth, data.y - boxHeight / 2);\n    context.lineTo(data.x + xDeltaCoord, data.y - boxHeight / 2);\n    context.arc(data.x, data.y, radius, angleRadian, -angleRadian);\n    context.closePath();\n    context.fill();\n  } else {\n    context.beginPath();\n    context.arc(data.x, data.y, data.size + PADDING, 0, Math.PI * 2);\n    context.closePath();\n    context.fill();\n  }\n  context.shadowOffsetX = 0;\n  context.shadowOffsetY = 0;\n  context.shadowBlur = 0;\n\n  // And finally we draw the label\n  drawDiscNodeLabel(context, data, settings);\n}\n\n// language=GLSL\nvar SHADER_SOURCE$6 = /*glsl*/\"\\nprecision highp float;\\n\\nvarying vec4 v_color;\\nvarying vec2 v_diffVector;\\nvarying float v_radius;\\n\\nuniform float u_correctionRatio;\\n\\nconst vec4 transparent = vec4(0.0, 0.0, 0.0, 0.0);\\n\\nvoid main(void) {\\n  float border = u_correctionRatio * 2.0;\\n  float dist = length(v_diffVector) - v_radius + border;\\n\\n  // No antialiasing for picking mode:\\n  #ifdef PICKING_MODE\\n  if (dist > border)\\n    gl_FragColor = transparent;\\n  else\\n    gl_FragColor = v_color;\\n\\n  #else\\n  float t = 0.0;\\n  if (dist > border)\\n    t = 1.0;\\n  else if (dist > 0.0)\\n    t = dist / border;\\n\\n  gl_FragColor = mix(v_color, transparent, t);\\n  #endif\\n}\\n\";\nvar FRAGMENT_SHADER_SOURCE$2 = SHADER_SOURCE$6;\n\n// language=GLSL\nvar SHADER_SOURCE$5 = /*glsl*/\"\\nattribute vec4 a_id;\\nattribute vec4 a_color;\\nattribute vec2 a_position;\\nattribute float a_size;\\nattribute float a_angle;\\n\\nuniform mat3 u_matrix;\\nuniform float u_sizeRatio;\\nuniform float u_correctionRatio;\\n\\nvarying vec4 v_color;\\nvarying vec2 v_diffVector;\\nvarying float v_radius;\\nvarying float v_border;\\n\\nconst float bias = 255.0 / 254.0;\\n\\nvoid main() {\\n  float size = a_size * u_correctionRatio / u_sizeRatio * 4.0;\\n  vec2 diffVector = size * vec2(cos(a_angle), sin(a_angle));\\n  vec2 position = a_position + diffVector;\\n  gl_Position = vec4(\\n    (u_matrix * vec3(position, 1)).xy,\\n    0,\\n    1\\n  );\\n\\n  v_diffVector = diffVector;\\n  v_radius = size / 2.0;\\n\\n  #ifdef PICKING_MODE\\n  // For picking mode, we use the ID as the color:\\n  v_color = a_id;\\n  #else\\n  // For normal mode, we use the color:\\n  v_color = a_color;\\n  #endif\\n\\n  v_color.a *= bias;\\n}\\n\";\nvar VERTEX_SHADER_SOURCE$3 = SHADER_SOURCE$5;\nvar _WebGLRenderingContex$3 = WebGLRenderingContext,\n  UNSIGNED_BYTE$3 = _WebGLRenderingContex$3.UNSIGNED_BYTE,\n  FLOAT$3 = _WebGLRenderingContex$3.FLOAT;\nvar UNIFORMS$3 = [\"u_sizeRatio\", \"u_correctionRatio\", \"u_matrix\"];\nvar NodeCircleProgram = /*#__PURE__*/function (_NodeProgram) {\n  _inherits(NodeCircleProgram, _NodeProgram);\n  function NodeCircleProgram() {\n    _classCallCheck(this, NodeCircleProgram);\n    return _callSuper(this, NodeCircleProgram, arguments);\n  }\n  _createClass(NodeCircleProgram, [{\n    key: \"getDefinition\",\n    value: function getDefinition() {\n      return {\n        VERTICES: 3,\n        VERTEX_SHADER_SOURCE: VERTEX_SHADER_SOURCE$3,\n        FRAGMENT_SHADER_SOURCE: FRAGMENT_SHADER_SOURCE$2,\n        METHOD: WebGLRenderingContext.TRIANGLES,\n        UNIFORMS: UNIFORMS$3,\n        ATTRIBUTES: [{\n          name: \"a_position\",\n          size: 2,\n          type: FLOAT$3\n        }, {\n          name: \"a_size\",\n          size: 1,\n          type: FLOAT$3\n        }, {\n          name: \"a_color\",\n          size: 4,\n          type: UNSIGNED_BYTE$3,\n          normalized: true\n        }, {\n          name: \"a_id\",\n          size: 4,\n          type: UNSIGNED_BYTE$3,\n          normalized: true\n        }],\n        CONSTANT_ATTRIBUTES: [{\n          name: \"a_angle\",\n          size: 1,\n          type: FLOAT$3\n        }],\n        CONSTANT_DATA: [[NodeCircleProgram.ANGLE_1], [NodeCircleProgram.ANGLE_2], [NodeCircleProgram.ANGLE_3]]\n      };\n    }\n  }, {\n    key: \"processVisibleItem\",\n    value: function processVisibleItem(nodeIndex, startIndex, data) {\n      var array = this.array;\n      var color = floatColor(data.color);\n      array[startIndex++] = data.x;\n      array[startIndex++] = data.y;\n      array[startIndex++] = data.size;\n      array[startIndex++] = color;\n      array[startIndex++] = nodeIndex;\n    }\n  }, {\n    key: \"setUniforms\",\n    value: function setUniforms(params, _ref) {\n      var gl = _ref.gl,\n        uniformLocations = _ref.uniformLocations;\n      var u_sizeRatio = uniformLocations.u_sizeRatio,\n        u_correctionRatio = uniformLocations.u_correctionRatio,\n        u_matrix = uniformLocations.u_matrix;\n      gl.uniform1f(u_correctionRatio, params.correctionRatio);\n      gl.uniform1f(u_sizeRatio, params.sizeRatio);\n      gl.uniformMatrix3fv(u_matrix, false, params.matrix);\n    }\n  }]);\n  return NodeCircleProgram;\n}(NodeProgram);\n_defineProperty(NodeCircleProgram, \"ANGLE_1\", 0);\n_defineProperty(NodeCircleProgram, \"ANGLE_2\", 2 * Math.PI / 3);\n_defineProperty(NodeCircleProgram, \"ANGLE_3\", 4 * Math.PI / 3);\n\n// language=GLSL\nvar SHADER_SOURCE$4 = /*glsl*/\"\\nprecision mediump float;\\n\\nvarying vec4 v_color;\\n\\nvoid main(void) {\\n  gl_FragColor = v_color;\\n}\\n\";\nvar FRAGMENT_SHADER_SOURCE$1 = SHADER_SOURCE$4;\n\n// language=GLSL\nvar SHADER_SOURCE$3 = /*glsl*/\"\\nattribute vec2 a_position;\\nattribute vec2 a_normal;\\nattribute float a_radius;\\nattribute vec3 a_barycentric;\\n\\n#ifdef PICKING_MODE\\nattribute vec4 a_id;\\n#else\\nattribute vec4 a_color;\\n#endif\\n\\nuniform mat3 u_matrix;\\nuniform float u_sizeRatio;\\nuniform float u_correctionRatio;\\nuniform float u_minEdgeThickness;\\nuniform float u_lengthToThicknessRatio;\\nuniform float u_widenessToThicknessRatio;\\n\\nvarying vec4 v_color;\\n\\nconst float bias = 255.0 / 254.0;\\n\\nvoid main() {\\n  float minThickness = u_minEdgeThickness;\\n\\n  float normalLength = length(a_normal);\\n  vec2 unitNormal = a_normal / normalLength;\\n\\n  // These first computations are taken from edge.vert.glsl and\\n  // edge.clamped.vert.glsl. Please read it to get better comments on what's\\n  // happening:\\n  float pixelsThickness = max(normalLength / u_sizeRatio, minThickness);\\n  float webGLThickness = pixelsThickness * u_correctionRatio;\\n  float webGLNodeRadius = a_radius * 2.0 * u_correctionRatio / u_sizeRatio;\\n  float webGLArrowHeadLength = webGLThickness * u_lengthToThicknessRatio * 2.0;\\n  float webGLArrowHeadThickness = webGLThickness * u_widenessToThicknessRatio;\\n\\n  float da = a_barycentric.x;\\n  float db = a_barycentric.y;\\n  float dc = a_barycentric.z;\\n\\n  vec2 delta = vec2(\\n      da * (webGLNodeRadius * unitNormal.y)\\n    + db * ((webGLNodeRadius + webGLArrowHeadLength) * unitNormal.y + webGLArrowHeadThickness * unitNormal.x)\\n    + dc * ((webGLNodeRadius + webGLArrowHeadLength) * unitNormal.y - webGLArrowHeadThickness * unitNormal.x),\\n\\n      da * (-webGLNodeRadius * unitNormal.x)\\n    + db * (-(webGLNodeRadius + webGLArrowHeadLength) * unitNormal.x + webGLArrowHeadThickness * unitNormal.y)\\n    + dc * (-(webGLNodeRadius + webGLArrowHeadLength) * unitNormal.x - webGLArrowHeadThickness * unitNormal.y)\\n  );\\n\\n  vec2 position = (u_matrix * vec3(a_position + delta, 1)).xy;\\n\\n  gl_Position = vec4(position, 0, 1);\\n\\n  #ifdef PICKING_MODE\\n  // For picking mode, we use the ID as the color:\\n  v_color = a_id;\\n  #else\\n  // For normal mode, we use the color:\\n  v_color = a_color;\\n  #endif\\n\\n  v_color.a *= bias;\\n}\\n\";\nvar VERTEX_SHADER_SOURCE$2 = SHADER_SOURCE$3;\nvar _WebGLRenderingContex$2 = WebGLRenderingContext,\n  UNSIGNED_BYTE$2 = _WebGLRenderingContex$2.UNSIGNED_BYTE,\n  FLOAT$2 = _WebGLRenderingContex$2.FLOAT;\nvar UNIFORMS$2 = [\"u_matrix\", \"u_sizeRatio\", \"u_correctionRatio\", \"u_minEdgeThickness\", \"u_lengthToThicknessRatio\", \"u_widenessToThicknessRatio\"];\nvar DEFAULT_EDGE_ARROW_HEAD_PROGRAM_OPTIONS = {\n  lengthToThicknessRatio: 2.5,\n  widenessToThicknessRatio: 2\n};\nfunction createEdgeArrowHeadProgram(inputOptions) {\n  var options = _objectSpread2(_objectSpread2({}, DEFAULT_EDGE_ARROW_HEAD_PROGRAM_OPTIONS), inputOptions || {});\n  return /*#__PURE__*/function (_EdgeProgram) {\n    _inherits(EdgeArrowHeadProgram, _EdgeProgram);\n    function EdgeArrowHeadProgram() {\n      _classCallCheck(this, EdgeArrowHeadProgram);\n      return _callSuper(this, EdgeArrowHeadProgram, arguments);\n    }\n    _createClass(EdgeArrowHeadProgram, [{\n      key: \"getDefinition\",\n      value: function getDefinition() {\n        return {\n          VERTICES: 3,\n          VERTEX_SHADER_SOURCE: VERTEX_SHADER_SOURCE$2,\n          FRAGMENT_SHADER_SOURCE: FRAGMENT_SHADER_SOURCE$1,\n          METHOD: WebGLRenderingContext.TRIANGLES,\n          UNIFORMS: UNIFORMS$2,\n          ATTRIBUTES: [{\n            name: \"a_position\",\n            size: 2,\n            type: FLOAT$2\n          }, {\n            name: \"a_normal\",\n            size: 2,\n            type: FLOAT$2\n          }, {\n            name: \"a_radius\",\n            size: 1,\n            type: FLOAT$2\n          }, {\n            name: \"a_color\",\n            size: 4,\n            type: UNSIGNED_BYTE$2,\n            normalized: true\n          }, {\n            name: \"a_id\",\n            size: 4,\n            type: UNSIGNED_BYTE$2,\n            normalized: true\n          }],\n          CONSTANT_ATTRIBUTES: [{\n            name: \"a_barycentric\",\n            size: 3,\n            type: FLOAT$2\n          }],\n          CONSTANT_DATA: [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\n        };\n      }\n    }, {\n      key: \"processVisibleItem\",\n      value: function processVisibleItem(edgeIndex, startIndex, sourceData, targetData, data) {\n        var thickness = data.size || 1;\n        var radius = targetData.size || 1;\n        var x1 = sourceData.x;\n        var y1 = sourceData.y;\n        var x2 = targetData.x;\n        var y2 = targetData.y;\n        var color = floatColor(data.color);\n\n        // Computing normals\n        var dx = x2 - x1;\n        var dy = y2 - y1;\n        var len = dx * dx + dy * dy;\n        var n1 = 0;\n        var n2 = 0;\n        if (len) {\n          len = 1 / Math.sqrt(len);\n          n1 = -dy * len * thickness;\n          n2 = dx * len * thickness;\n        }\n        var array = this.array;\n        array[startIndex++] = x2;\n        array[startIndex++] = y2;\n        array[startIndex++] = -n1;\n        array[startIndex++] = -n2;\n        array[startIndex++] = radius;\n        array[startIndex++] = color;\n        array[startIndex++] = edgeIndex;\n      }\n    }, {\n      key: \"setUniforms\",\n      value: function setUniforms(params, _ref) {\n        var gl = _ref.gl,\n          uniformLocations = _ref.uniformLocations;\n        var u_matrix = uniformLocations.u_matrix,\n          u_sizeRatio = uniformLocations.u_sizeRatio,\n          u_correctionRatio = uniformLocations.u_correctionRatio,\n          u_minEdgeThickness = uniformLocations.u_minEdgeThickness,\n          u_lengthToThicknessRatio = uniformLocations.u_lengthToThicknessRatio,\n          u_widenessToThicknessRatio = uniformLocations.u_widenessToThicknessRatio;\n        gl.uniformMatrix3fv(u_matrix, false, params.matrix);\n        gl.uniform1f(u_sizeRatio, params.sizeRatio);\n        gl.uniform1f(u_correctionRatio, params.correctionRatio);\n        gl.uniform1f(u_minEdgeThickness, params.minEdgeThickness);\n        gl.uniform1f(u_lengthToThicknessRatio, options.lengthToThicknessRatio);\n        gl.uniform1f(u_widenessToThicknessRatio, options.widenessToThicknessRatio);\n      }\n    }]);\n    return EdgeArrowHeadProgram;\n  }(EdgeProgram);\n}\ncreateEdgeArrowHeadProgram();\n\n// language=GLSL\nvar SHADER_SOURCE$2 = /*glsl*/\"\\nprecision mediump float;\\n\\nvarying vec4 v_color;\\nvarying vec2 v_normal;\\nvarying float v_thickness;\\nvarying float v_feather;\\n\\nconst vec4 transparent = vec4(0.0, 0.0, 0.0, 0.0);\\n\\nvoid main(void) {\\n  // We only handle antialiasing for normal mode:\\n  #ifdef PICKING_MODE\\n  gl_FragColor = v_color;\\n  #else\\n  float dist = length(v_normal) * v_thickness;\\n\\n  float t = smoothstep(\\n    v_thickness - v_feather,\\n    v_thickness,\\n    dist\\n  );\\n\\n  gl_FragColor = mix(v_color, transparent, t);\\n  #endif\\n}\\n\";\nvar FRAGMENT_SHADER_SOURCE = SHADER_SOURCE$2;\n\n// language=GLSL\nvar SHADER_SOURCE$1 = /*glsl*/\"\\nattribute vec4 a_id;\\nattribute vec4 a_color;\\nattribute vec2 a_normal;\\nattribute float a_normalCoef;\\nattribute vec2 a_positionStart;\\nattribute vec2 a_positionEnd;\\nattribute float a_positionCoef;\\nattribute float a_radius;\\nattribute float a_radiusCoef;\\n\\nuniform mat3 u_matrix;\\nuniform float u_zoomRatio;\\nuniform float u_sizeRatio;\\nuniform float u_pixelRatio;\\nuniform float u_correctionRatio;\\nuniform float u_minEdgeThickness;\\nuniform float u_lengthToThicknessRatio;\\nuniform float u_feather;\\n\\nvarying vec4 v_color;\\nvarying vec2 v_normal;\\nvarying float v_thickness;\\nvarying float v_feather;\\n\\nconst float bias = 255.0 / 254.0;\\n\\nvoid main() {\\n  float minThickness = u_minEdgeThickness;\\n\\n  float radius = a_radius * a_radiusCoef;\\n  vec2 normal = a_normal * a_normalCoef;\\n  vec2 position = a_positionStart * (1.0 - a_positionCoef) + a_positionEnd * a_positionCoef;\\n\\n  float normalLength = length(normal);\\n  vec2 unitNormal = normal / normalLength;\\n\\n  // These first computations are taken from edge.vert.glsl. Please read it to\\n  // get better comments on what's happening:\\n  float pixelsThickness = max(normalLength, minThickness * u_sizeRatio);\\n  float webGLThickness = pixelsThickness * u_correctionRatio / u_sizeRatio;\\n\\n  // Here, we move the point to leave space for the arrow head:\\n  float direction = sign(radius);\\n  float webGLNodeRadius = direction * radius * 2.0 * u_correctionRatio / u_sizeRatio;\\n  float webGLArrowHeadLength = webGLThickness * u_lengthToThicknessRatio * 2.0;\\n\\n  vec2 compensationVector = vec2(-direction * unitNormal.y, direction * unitNormal.x) * (webGLNodeRadius + webGLArrowHeadLength);\\n\\n  // Here is the proper position of the vertex\\n  gl_Position = vec4((u_matrix * vec3(position + unitNormal * webGLThickness + compensationVector, 1)).xy, 0, 1);\\n\\n  v_thickness = webGLThickness / u_zoomRatio;\\n\\n  v_normal = unitNormal;\\n\\n  v_feather = u_feather * u_correctionRatio / u_zoomRatio / u_pixelRatio * 2.0;\\n\\n  #ifdef PICKING_MODE\\n  // For picking mode, we use the ID as the color:\\n  v_color = a_id;\\n  #else\\n  // For normal mode, we use the color:\\n  v_color = a_color;\\n  #endif\\n\\n  v_color.a *= bias;\\n}\\n\";\nvar VERTEX_SHADER_SOURCE$1 = SHADER_SOURCE$1;\nvar _WebGLRenderingContex$1 = WebGLRenderingContext,\n  UNSIGNED_BYTE$1 = _WebGLRenderingContex$1.UNSIGNED_BYTE,\n  FLOAT$1 = _WebGLRenderingContex$1.FLOAT;\nvar UNIFORMS$1 = [\"u_matrix\", \"u_zoomRatio\", \"u_sizeRatio\", \"u_correctionRatio\", \"u_pixelRatio\", \"u_feather\", \"u_minEdgeThickness\", \"u_lengthToThicknessRatio\"];\nvar DEFAULT_EDGE_CLAMPED_PROGRAM_OPTIONS = {\n  lengthToThicknessRatio: DEFAULT_EDGE_ARROW_HEAD_PROGRAM_OPTIONS.lengthToThicknessRatio\n};\nfunction createEdgeClampedProgram(inputOptions) {\n  var options = _objectSpread2(_objectSpread2({}, DEFAULT_EDGE_CLAMPED_PROGRAM_OPTIONS), inputOptions || {});\n  return /*#__PURE__*/function (_EdgeProgram) {\n    _inherits(EdgeClampedProgram, _EdgeProgram);\n    function EdgeClampedProgram() {\n      _classCallCheck(this, EdgeClampedProgram);\n      return _callSuper(this, EdgeClampedProgram, arguments);\n    }\n    _createClass(EdgeClampedProgram, [{\n      key: \"getDefinition\",\n      value: function getDefinition() {\n        return {\n          VERTICES: 6,\n          VERTEX_SHADER_SOURCE: VERTEX_SHADER_SOURCE$1,\n          FRAGMENT_SHADER_SOURCE: FRAGMENT_SHADER_SOURCE,\n          METHOD: WebGLRenderingContext.TRIANGLES,\n          UNIFORMS: UNIFORMS$1,\n          ATTRIBUTES: [{\n            name: \"a_positionStart\",\n            size: 2,\n            type: FLOAT$1\n          }, {\n            name: \"a_positionEnd\",\n            size: 2,\n            type: FLOAT$1\n          }, {\n            name: \"a_normal\",\n            size: 2,\n            type: FLOAT$1\n          }, {\n            name: \"a_color\",\n            size: 4,\n            type: UNSIGNED_BYTE$1,\n            normalized: true\n          }, {\n            name: \"a_id\",\n            size: 4,\n            type: UNSIGNED_BYTE$1,\n            normalized: true\n          }, {\n            name: \"a_radius\",\n            size: 1,\n            type: FLOAT$1\n          }],\n          CONSTANT_ATTRIBUTES: [\n          // If 0, then position will be a_positionStart\n          // If 1, then position will be a_positionEnd\n          {\n            name: \"a_positionCoef\",\n            size: 1,\n            type: FLOAT$1\n          }, {\n            name: \"a_normalCoef\",\n            size: 1,\n            type: FLOAT$1\n          }, {\n            name: \"a_radiusCoef\",\n            size: 1,\n            type: FLOAT$1\n          }],\n          CONSTANT_DATA: [[0, 1, 0], [0, -1, 0], [1, 1, 1], [1, 1, 1], [0, -1, 0], [1, -1, -1]]\n        };\n      }\n    }, {\n      key: \"processVisibleItem\",\n      value: function processVisibleItem(edgeIndex, startIndex, sourceData, targetData, data) {\n        var thickness = data.size || 1;\n        var x1 = sourceData.x;\n        var y1 = sourceData.y;\n        var x2 = targetData.x;\n        var y2 = targetData.y;\n        var color = floatColor(data.color);\n\n        // Computing normals\n        var dx = x2 - x1;\n        var dy = y2 - y1;\n        var radius = targetData.size || 1;\n        var len = dx * dx + dy * dy;\n        var n1 = 0;\n        var n2 = 0;\n        if (len) {\n          len = 1 / Math.sqrt(len);\n          n1 = -dy * len * thickness;\n          n2 = dx * len * thickness;\n        }\n        var array = this.array;\n        array[startIndex++] = x1;\n        array[startIndex++] = y1;\n        array[startIndex++] = x2;\n        array[startIndex++] = y2;\n        array[startIndex++] = n1;\n        array[startIndex++] = n2;\n        array[startIndex++] = color;\n        array[startIndex++] = edgeIndex;\n        array[startIndex++] = radius;\n      }\n    }, {\n      key: \"setUniforms\",\n      value: function setUniforms(params, _ref) {\n        var gl = _ref.gl,\n          uniformLocations = _ref.uniformLocations;\n        var u_matrix = uniformLocations.u_matrix,\n          u_zoomRatio = uniformLocations.u_zoomRatio,\n          u_feather = uniformLocations.u_feather,\n          u_pixelRatio = uniformLocations.u_pixelRatio,\n          u_correctionRatio = uniformLocations.u_correctionRatio,\n          u_sizeRatio = uniformLocations.u_sizeRatio,\n          u_minEdgeThickness = uniformLocations.u_minEdgeThickness,\n          u_lengthToThicknessRatio = uniformLocations.u_lengthToThicknessRatio;\n        gl.uniformMatrix3fv(u_matrix, false, params.matrix);\n        gl.uniform1f(u_zoomRatio, params.zoomRatio);\n        gl.uniform1f(u_sizeRatio, params.sizeRatio);\n        gl.uniform1f(u_correctionRatio, params.correctionRatio);\n        gl.uniform1f(u_pixelRatio, params.pixelRatio);\n        gl.uniform1f(u_feather, params.antiAliasingFeather);\n        gl.uniform1f(u_minEdgeThickness, params.minEdgeThickness);\n        gl.uniform1f(u_lengthToThicknessRatio, options.lengthToThicknessRatio);\n      }\n    }]);\n    return EdgeClampedProgram;\n  }(EdgeProgram);\n}\ncreateEdgeClampedProgram();\nfunction createEdgeArrowProgram(inputOptions) {\n  return createEdgeCompoundProgram([createEdgeClampedProgram(inputOptions), createEdgeArrowHeadProgram(inputOptions)]);\n}\nvar EdgeArrowProgram = createEdgeArrowProgram();\nvar EdgeArrowProgram$1 = EdgeArrowProgram;\n\n// language=GLSL\nvar SHADER_SOURCE = /*glsl*/\"\\nattribute vec4 a_id;\\nattribute vec4 a_color;\\nattribute vec2 a_normal;\\nattribute float a_normalCoef;\\nattribute vec2 a_positionStart;\\nattribute vec2 a_positionEnd;\\nattribute float a_positionCoef;\\n\\nuniform mat3 u_matrix;\\nuniform float u_sizeRatio;\\nuniform float u_zoomRatio;\\nuniform float u_pixelRatio;\\nuniform float u_correctionRatio;\\nuniform float u_minEdgeThickness;\\nuniform float u_feather;\\n\\nvarying vec4 v_color;\\nvarying vec2 v_normal;\\nvarying float v_thickness;\\nvarying float v_feather;\\n\\nconst float bias = 255.0 / 254.0;\\n\\nvoid main() {\\n  float minThickness = u_minEdgeThickness;\\n\\n  vec2 normal = a_normal * a_normalCoef;\\n  vec2 position = a_positionStart * (1.0 - a_positionCoef) + a_positionEnd * a_positionCoef;\\n\\n  float normalLength = length(normal);\\n  vec2 unitNormal = normal / normalLength;\\n\\n  // We require edges to be at least \\\"minThickness\\\" pixels thick *on screen*\\n  // (so we need to compensate the size ratio):\\n  float pixelsThickness = max(normalLength, minThickness * u_sizeRatio);\\n\\n  // Then, we need to retrieve the normalized thickness of the edge in the WebGL\\n  // referential (in a ([0, 1], [0, 1]) space), using our \\\"magic\\\" correction\\n  // ratio:\\n  float webGLThickness = pixelsThickness * u_correctionRatio / u_sizeRatio;\\n\\n  // Here is the proper position of the vertex\\n  gl_Position = vec4((u_matrix * vec3(position + unitNormal * webGLThickness, 1)).xy, 0, 1);\\n\\n  // For the fragment shader though, we need a thickness that takes the \\\"magic\\\"\\n  // correction ratio into account (as in webGLThickness), but so that the\\n  // antialiasing effect does not depend on the zoom level. So here's yet\\n  // another thickness version:\\n  v_thickness = webGLThickness / u_zoomRatio;\\n\\n  v_normal = unitNormal;\\n\\n  v_feather = u_feather * u_correctionRatio / u_zoomRatio / u_pixelRatio * 2.0;\\n\\n  #ifdef PICKING_MODE\\n  // For picking mode, we use the ID as the color:\\n  v_color = a_id;\\n  #else\\n  // For normal mode, we use the color:\\n  v_color = a_color;\\n  #endif\\n\\n  v_color.a *= bias;\\n}\\n\";\nvar VERTEX_SHADER_SOURCE = SHADER_SOURCE;\nvar _WebGLRenderingContex = WebGLRenderingContext,\n  UNSIGNED_BYTE = _WebGLRenderingContex.UNSIGNED_BYTE,\n  FLOAT = _WebGLRenderingContex.FLOAT;\nvar UNIFORMS = [\"u_matrix\", \"u_zoomRatio\", \"u_sizeRatio\", \"u_correctionRatio\", \"u_pixelRatio\", \"u_feather\", \"u_minEdgeThickness\"];\nvar EdgeRectangleProgram = /*#__PURE__*/function (_EdgeProgram) {\n  _inherits(EdgeRectangleProgram, _EdgeProgram);\n  function EdgeRectangleProgram() {\n    _classCallCheck(this, EdgeRectangleProgram);\n    return _callSuper(this, EdgeRectangleProgram, arguments);\n  }\n  _createClass(EdgeRectangleProgram, [{\n    key: \"getDefinition\",\n    value: function getDefinition() {\n      return {\n        VERTICES: 6,\n        VERTEX_SHADER_SOURCE: VERTEX_SHADER_SOURCE,\n        FRAGMENT_SHADER_SOURCE: FRAGMENT_SHADER_SOURCE,\n        METHOD: WebGLRenderingContext.TRIANGLES,\n        UNIFORMS: UNIFORMS,\n        ATTRIBUTES: [{\n          name: \"a_positionStart\",\n          size: 2,\n          type: FLOAT\n        }, {\n          name: \"a_positionEnd\",\n          size: 2,\n          type: FLOAT\n        }, {\n          name: \"a_normal\",\n          size: 2,\n          type: FLOAT\n        }, {\n          name: \"a_color\",\n          size: 4,\n          type: UNSIGNED_BYTE,\n          normalized: true\n        }, {\n          name: \"a_id\",\n          size: 4,\n          type: UNSIGNED_BYTE,\n          normalized: true\n        }],\n        CONSTANT_ATTRIBUTES: [\n        // If 0, then position will be a_positionStart\n        // If 2, then position will be a_positionEnd\n        {\n          name: \"a_positionCoef\",\n          size: 1,\n          type: FLOAT\n        }, {\n          name: \"a_normalCoef\",\n          size: 1,\n          type: FLOAT\n        }],\n        CONSTANT_DATA: [[0, 1], [0, -1], [1, 1], [1, 1], [0, -1], [1, -1]]\n      };\n    }\n  }, {\n    key: \"processVisibleItem\",\n    value: function processVisibleItem(edgeIndex, startIndex, sourceData, targetData, data) {\n      var thickness = data.size || 1;\n      var x1 = sourceData.x;\n      var y1 = sourceData.y;\n      var x2 = targetData.x;\n      var y2 = targetData.y;\n      var color = floatColor(data.color);\n\n      // Computing normals\n      var dx = x2 - x1;\n      var dy = y2 - y1;\n      var len = dx * dx + dy * dy;\n      var n1 = 0;\n      var n2 = 0;\n      if (len) {\n        len = 1 / Math.sqrt(len);\n        n1 = -dy * len * thickness;\n        n2 = dx * len * thickness;\n      }\n      var array = this.array;\n      array[startIndex++] = x1;\n      array[startIndex++] = y1;\n      array[startIndex++] = x2;\n      array[startIndex++] = y2;\n      array[startIndex++] = n1;\n      array[startIndex++] = n2;\n      array[startIndex++] = color;\n      array[startIndex++] = edgeIndex;\n    }\n  }, {\n    key: \"setUniforms\",\n    value: function setUniforms(params, _ref) {\n      var gl = _ref.gl,\n        uniformLocations = _ref.uniformLocations;\n      var u_matrix = uniformLocations.u_matrix,\n        u_zoomRatio = uniformLocations.u_zoomRatio,\n        u_feather = uniformLocations.u_feather,\n        u_pixelRatio = uniformLocations.u_pixelRatio,\n        u_correctionRatio = uniformLocations.u_correctionRatio,\n        u_sizeRatio = uniformLocations.u_sizeRatio,\n        u_minEdgeThickness = uniformLocations.u_minEdgeThickness;\n      gl.uniformMatrix3fv(u_matrix, false, params.matrix);\n      gl.uniform1f(u_zoomRatio, params.zoomRatio);\n      gl.uniform1f(u_sizeRatio, params.sizeRatio);\n      gl.uniform1f(u_correctionRatio, params.correctionRatio);\n      gl.uniform1f(u_pixelRatio, params.pixelRatio);\n      gl.uniform1f(u_feather, params.antiAliasingFeather);\n      gl.uniform1f(u_minEdgeThickness, params.minEdgeThickness);\n    }\n  }]);\n  return EdgeRectangleProgram;\n}(EdgeProgram);\nexport { AbstractNodeProgram as A, DEFAULT_EDGE_ARROW_HEAD_PROGRAM_OPTIONS as D, EdgeArrowProgram$1 as E, NodeCircleProgram as N, Program as P, _defineProperty as _, _objectSpread2 as a, drawDiscNodeLabel as b, drawDiscNodeHover as c, drawStraightEdgeLabel as d, EdgeRectangleProgram as e, NodeProgram as f, EdgeProgram as g, createNodeCompoundProgram as h, AbstractEdgeProgram as i, createEdgeCompoundProgram as j, AbstractProgram as k, createEdgeArrowProgram as l, getAttributeItemsCount as m, getAttributesItemsCount as n, loadVertexShader as o, loadFragmentShader as p, loadProgram as q, killProgram as r, numberToGLSLFloat as s, createEdgeArrowHeadProgram as t, DEFAULT_EDGE_CLAMPED_PROGRAM_OPTIONS as u, createEdgeClampedProgram as v };","map":{"version":3,"names":["t","toPropertyKey","e","_getPrototypeOf","d","_createClass","a","_classCallCheck","_","_inherits","b","_callSuper","c","_assertThisInitialized","i","indexToColor","f","floatColor","_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","ownKeys","r","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","push","apply","_objectSpread2","arguments","length","forEach","getOwnPropertyDescriptors","defineProperties","_superPropBase","object","property","prototype","hasOwnProperty","call","_get","Reflect","get","bind","target","receiver","base","desc","getAttributeItemsCount","attr","normalized","size","getAttributesItemsCount","attrs","res","loadShader","type","gl","source","glType","VERTEX_SHADER","FRAGMENT_SHADER","shader","createShader","Error","shaderSource","compileShader","successfullyCompiled","getShaderParameter","COMPILE_STATUS","infoLog","getShaderInfoLog","deleteShader","concat","loadVertexShader","loadFragmentShader","loadProgram","shaders","program","createProgram","l","attachShader","linkProgram","successfullyLinked","getProgramParameter","LINK_STATUS","deleteProgram","killProgram","_ref","buffer","vertexShader","fragmentShader","deleteBuffer","numberToGLSLFloat","n","toFixed","toString","PICKING_PREFIX","SIZE_FACTOR_PER_ATTRIBUTE_TYPE","WebGL2RenderingContext","BOOL","BYTE","UNSIGNED_BYTE","SHORT","UNSIGNED_SHORT","INT","UNSIGNED_INT","FLOAT","AbstractProgram","_gl","_pickGl","_renderer","Program","pickingBuffer","renderer","Float32Array","def","getDefinition","VERTICES","VERTEX_SHADER_SOURCE","FRAGMENT_SHADER_SOURCE","UNIFORMS","ATTRIBUTES","METHOD","CONSTANT_ATTRIBUTES","CONSTANT_DATA","isInstanced","ATTRIBUTES_ITEMS_COUNT","STRIDE","normalProgram","getProgramInfo","pickProgram","constantAttributesItemsCount","constantArray","vector","j","kill","name","vertexShaderSource","fragmentShaderSource","frameBuffer","createBuffer","uniformLocations","uniformName","location","getUniformLocation","attributeLocations","getAttribLocation","constantBuffer","isPicking","bindProgram","_this","offset","bindBuffer","ARRAY_BUFFER","bindAttribute","bufferData","array","DYNAMIC_DRAW","STATIC_DRAW","unbindProgram","_this2","unbindAttribute","setDivisor","sizeFactor","enableVertexAttribArray","stride","BYTES_PER_ELEMENT","vertexAttribPointer","vertexAttribDivisor","ext","getExtension","vertexAttribDivisorANGLE","unsetDivisor","disableVertexAttribArray","reallocate","capacity","verticesCount","hasNothingToRender","renderProgram","params","programInfo","enable","BLEND","useProgram","setUniforms","drawWebGL","render","viewport","width","pixelRatio","downSizingRatio","height","method","bindFramebuffer","FRAMEBUFFER","drawArrays","drawArraysInstanced","drawArraysInstancedANGLE","AbstractNodeProgram","_AbstractProgram","NodeProgram","process","nodeIndex","data","hidden","processVisibleItem","createNodeCompoundProgram","programClasses","drawLabel","drawHover","NodeCompoundProgram","programs","map","AbstractEdgeProgram","EdgeProgram","_len","args","Array","_key","undefined","edgeIndex","sourceData","targetData","createEdgeCompoundProgram","EdgeCompoundProgram","drawStraightEdgeLabel","context","edgeData","settings","edgeLabelSize","font","edgeLabelFont","weight","edgeLabelWeight","color","edgeLabelColor","attribute","label","fillStyle","sSize","tSize","sx","x","sy","y","tx","ty","cx","cy","dx","dy","Math","sqrt","textLength","measureText","ellipsis","slice","angle","acos","asin","PI","save","translate","rotate","fillText","restore","drawDiscNodeLabel","labelSize","labelFont","labelWeight","labelColor","drawDiscNodeHover","shadowOffsetX","shadowOffsetY","shadowBlur","shadowColor","PADDING","textWidth","boxWidth","round","boxHeight","radius","max","angleRadian","xDeltaCoord","abs","pow","beginPath","moveTo","lineTo","arc","closePath","fill","SHADER_SOURCE$6","FRAGMENT_SHADER_SOURCE$2","SHADER_SOURCE$5","VERTEX_SHADER_SOURCE$3","_WebGLRenderingContex$3","WebGLRenderingContext","UNSIGNED_BYTE$3","FLOAT$3","UNIFORMS$3","NodeCircleProgram","_NodeProgram","TRIANGLES","ANGLE_1","ANGLE_2","ANGLE_3","startIndex","u_sizeRatio","u_correctionRatio","u_matrix","uniform1f","correctionRatio","sizeRatio","uniformMatrix3fv","matrix","SHADER_SOURCE$4","FRAGMENT_SHADER_SOURCE$1","SHADER_SOURCE$3","VERTEX_SHADER_SOURCE$2","_WebGLRenderingContex$2","UNSIGNED_BYTE$2","FLOAT$2","UNIFORMS$2","DEFAULT_EDGE_ARROW_HEAD_PROGRAM_OPTIONS","lengthToThicknessRatio","widenessToThicknessRatio","createEdgeArrowHeadProgram","inputOptions","options","_EdgeProgram","EdgeArrowHeadProgram","thickness","x1","y1","x2","y2","len","n1","n2","u_minEdgeThickness","u_lengthToThicknessRatio","u_widenessToThicknessRatio","minEdgeThickness","SHADER_SOURCE$2","SHADER_SOURCE$1","VERTEX_SHADER_SOURCE$1","_WebGLRenderingContex$1","UNSIGNED_BYTE$1","FLOAT$1","UNIFORMS$1","DEFAULT_EDGE_CLAMPED_PROGRAM_OPTIONS","createEdgeClampedProgram","EdgeClampedProgram","u_zoomRatio","u_feather","u_pixelRatio","zoomRatio","antiAliasingFeather","createEdgeArrowProgram","EdgeArrowProgram","EdgeArrowProgram$1","SHADER_SOURCE","_WebGLRenderingContex","EdgeRectangleProgram","A","D","E","N","P","g","h","k","m","p","q","s","u","v"],"sources":["D:/code/MeshTree/frontend/node_modules/sigma/dist/index-ffa87df4.esm.js"],"sourcesContent":["import { t as toPropertyKey, e as _getPrototypeOf, d as _createClass, a as _classCallCheck, _ as _inherits, b as _callSuper, c as _assertThisInitialized } from './inherits-45ee1abe.esm.js';\nimport { i as indexToColor, f as floatColor } from './colors-2f6d17f0.esm.js';\n\nfunction _defineProperty(obj, key, value) {\n  key = toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread2(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n    if (object === null) break;\n  }\n  return object;\n}\n\nfunction _get() {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get.bind();\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = _superPropBase(target, property);\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n      if (desc.get) {\n        return desc.get.call(arguments.length < 3 ? target : receiver);\n      }\n      return desc.value;\n    };\n  }\n  return _get.apply(this, arguments);\n}\n\nfunction getAttributeItemsCount(attr) {\n  return attr.normalized ? 1 : attr.size;\n}\nfunction getAttributesItemsCount(attrs) {\n  var res = 0;\n  attrs.forEach(function (attr) {\n    return res += getAttributeItemsCount(attr);\n  });\n  return res;\n}\nfunction loadShader(type, gl, source) {\n  var glType = type === \"VERTEX\" ? gl.VERTEX_SHADER : gl.FRAGMENT_SHADER;\n\n  // Creating the shader\n  var shader = gl.createShader(glType);\n  if (shader === null) {\n    throw new Error(\"loadShader: error while creating the shader\");\n  }\n\n  // Loading source\n  gl.shaderSource(shader, source);\n\n  // Compiling the shader\n  gl.compileShader(shader);\n\n  // Retrieving compilation status\n  var successfullyCompiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n\n  // Throwing if something went awry\n  if (!successfullyCompiled) {\n    var infoLog = gl.getShaderInfoLog(shader);\n    gl.deleteShader(shader);\n    throw new Error(\"loadShader: error while compiling the shader:\\n\".concat(infoLog, \"\\n\").concat(source));\n  }\n  return shader;\n}\nfunction loadVertexShader(gl, source) {\n  return loadShader(\"VERTEX\", gl, source);\n}\nfunction loadFragmentShader(gl, source) {\n  return loadShader(\"FRAGMENT\", gl, source);\n}\n\n/**\n * Function used to load a program.\n */\nfunction loadProgram(gl, shaders) {\n  var program = gl.createProgram();\n  if (program === null) {\n    throw new Error(\"loadProgram: error while creating the program.\");\n  }\n  var i, l;\n\n  // Attaching the shaders\n  for (i = 0, l = shaders.length; i < l; i++) gl.attachShader(program, shaders[i]);\n  gl.linkProgram(program);\n\n  // Checking status\n  var successfullyLinked = gl.getProgramParameter(program, gl.LINK_STATUS);\n  if (!successfullyLinked) {\n    gl.deleteProgram(program);\n    throw new Error(\"loadProgram: error while linking the program.\");\n  }\n  return program;\n}\nfunction killProgram(_ref) {\n  var gl = _ref.gl,\n    buffer = _ref.buffer,\n    program = _ref.program,\n    vertexShader = _ref.vertexShader,\n    fragmentShader = _ref.fragmentShader;\n  gl.deleteShader(vertexShader);\n  gl.deleteShader(fragmentShader);\n  gl.deleteProgram(program);\n  gl.deleteBuffer(buffer);\n}\n\n/**\n * Function use to print a float for inserting in a GLSL program.\n */\nfunction numberToGLSLFloat(n) {\n  return n % 1 === 0 ? n.toFixed(1) : n.toString();\n}\n\nvar PICKING_PREFIX = \"#define PICKING_MODE\\n\";\nvar SIZE_FACTOR_PER_ATTRIBUTE_TYPE = _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, WebGL2RenderingContext.BOOL, 1), WebGL2RenderingContext.BYTE, 1), WebGL2RenderingContext.UNSIGNED_BYTE, 1), WebGL2RenderingContext.SHORT, 2), WebGL2RenderingContext.UNSIGNED_SHORT, 2), WebGL2RenderingContext.INT, 4), WebGL2RenderingContext.UNSIGNED_INT, 4), WebGL2RenderingContext.FLOAT, 4);\nvar AbstractProgram = /*#__PURE__*/_createClass(\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nfunction AbstractProgram(_gl, _pickGl, _renderer) {\n  _classCallCheck(this, AbstractProgram);\n});\nvar Program = /*#__PURE__*/function () {\n  function Program(gl, pickingBuffer, renderer) {\n    _classCallCheck(this, Program);\n    // GLenum\n    _defineProperty(this, \"array\", new Float32Array());\n    _defineProperty(this, \"constantArray\", new Float32Array());\n    _defineProperty(this, \"capacity\", 0);\n    _defineProperty(this, \"verticesCount\", 0);\n    // Reading and caching program definition\n    var def = this.getDefinition();\n    this.VERTICES = def.VERTICES;\n    this.VERTEX_SHADER_SOURCE = def.VERTEX_SHADER_SOURCE;\n    this.FRAGMENT_SHADER_SOURCE = def.FRAGMENT_SHADER_SOURCE;\n    this.UNIFORMS = def.UNIFORMS;\n    this.ATTRIBUTES = def.ATTRIBUTES;\n    this.METHOD = def.METHOD;\n    this.CONSTANT_ATTRIBUTES = \"CONSTANT_ATTRIBUTES\" in def ? def.CONSTANT_ATTRIBUTES : [];\n    this.CONSTANT_DATA = \"CONSTANT_DATA\" in def ? def.CONSTANT_DATA : [];\n    this.isInstanced = \"CONSTANT_ATTRIBUTES\" in def;\n\n    // Computing stride\n    this.ATTRIBUTES_ITEMS_COUNT = getAttributesItemsCount(this.ATTRIBUTES);\n    this.STRIDE = this.VERTICES * this.ATTRIBUTES_ITEMS_COUNT;\n\n    // Members\n    this.renderer = renderer;\n    this.normalProgram = this.getProgramInfo(\"normal\", gl, def.VERTEX_SHADER_SOURCE, def.FRAGMENT_SHADER_SOURCE, null);\n    this.pickProgram = pickingBuffer ? this.getProgramInfo(\"pick\", gl, PICKING_PREFIX + def.VERTEX_SHADER_SOURCE, PICKING_PREFIX + def.FRAGMENT_SHADER_SOURCE, pickingBuffer) : null;\n\n    // For instanced programs:\n    if (this.isInstanced) {\n      var constantAttributesItemsCount = getAttributesItemsCount(this.CONSTANT_ATTRIBUTES);\n      if (this.CONSTANT_DATA.length !== this.VERTICES) throw new Error(\"Program: error while getting constant data (expected \".concat(this.VERTICES, \" items, received \").concat(this.CONSTANT_DATA.length, \" instead)\"));\n      this.constantArray = new Float32Array(this.CONSTANT_DATA.length * constantAttributesItemsCount);\n      for (var i = 0; i < this.CONSTANT_DATA.length; i++) {\n        var vector = this.CONSTANT_DATA[i];\n        if (vector.length !== constantAttributesItemsCount) throw new Error(\"Program: error while getting constant data (one vector has \".concat(vector.length, \" items instead of \").concat(constantAttributesItemsCount, \")\"));\n        for (var j = 0; j < vector.length; j++) this.constantArray[i * constantAttributesItemsCount + j] = vector[j];\n      }\n      this.STRIDE = this.ATTRIBUTES_ITEMS_COUNT;\n    }\n  }\n  _createClass(Program, [{\n    key: \"kill\",\n    value: function kill() {\n      killProgram(this.normalProgram);\n      if (this.pickProgram) {\n        killProgram(this.pickProgram);\n        this.pickProgram = null;\n      }\n    }\n  }, {\n    key: \"getProgramInfo\",\n    value: function getProgramInfo(name, gl, vertexShaderSource, fragmentShaderSource, frameBuffer) {\n      var def = this.getDefinition();\n\n      // WebGL buffers\n      var buffer = gl.createBuffer();\n      if (buffer === null) throw new Error(\"Program: error while creating the WebGL buffer.\");\n\n      // Shaders and program\n      var vertexShader = loadVertexShader(gl, vertexShaderSource);\n      var fragmentShader = loadFragmentShader(gl, fragmentShaderSource);\n      var program = loadProgram(gl, [vertexShader, fragmentShader]);\n\n      // Initializing locations\n      var uniformLocations = {};\n      def.UNIFORMS.forEach(function (uniformName) {\n        var location = gl.getUniformLocation(program, uniformName);\n        if (location) uniformLocations[uniformName] = location;\n      });\n      var attributeLocations = {};\n      def.ATTRIBUTES.forEach(function (attr) {\n        attributeLocations[attr.name] = gl.getAttribLocation(program, attr.name);\n      });\n\n      // For instanced programs:\n      var constantBuffer;\n      if (\"CONSTANT_ATTRIBUTES\" in def) {\n        def.CONSTANT_ATTRIBUTES.forEach(function (attr) {\n          attributeLocations[attr.name] = gl.getAttribLocation(program, attr.name);\n        });\n        constantBuffer = gl.createBuffer();\n        if (constantBuffer === null) throw new Error(\"Program: error while creating the WebGL constant buffer.\");\n      }\n      return {\n        name: name,\n        program: program,\n        gl: gl,\n        frameBuffer: frameBuffer,\n        buffer: buffer,\n        constantBuffer: constantBuffer || {},\n        uniformLocations: uniformLocations,\n        attributeLocations: attributeLocations,\n        isPicking: name === \"pick\",\n        vertexShader: vertexShader,\n        fragmentShader: fragmentShader\n      };\n    }\n  }, {\n    key: \"bindProgram\",\n    value: function bindProgram(program) {\n      var _this = this;\n      var offset = 0;\n      var gl = program.gl,\n        buffer = program.buffer;\n      if (!this.isInstanced) {\n        gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n        offset = 0;\n        this.ATTRIBUTES.forEach(function (attr) {\n          return offset += _this.bindAttribute(attr, program, offset);\n        });\n        gl.bufferData(gl.ARRAY_BUFFER, this.array, gl.DYNAMIC_DRAW);\n      } else {\n        // Handle constant data (things that remain unchanged for all items):\n        gl.bindBuffer(gl.ARRAY_BUFFER, program.constantBuffer);\n        offset = 0;\n        this.CONSTANT_ATTRIBUTES.forEach(function (attr) {\n          return offset += _this.bindAttribute(attr, program, offset, false);\n        });\n        gl.bufferData(gl.ARRAY_BUFFER, this.constantArray, gl.STATIC_DRAW);\n\n        // Handle \"instance specific\" data (things that vary for each item):\n        gl.bindBuffer(gl.ARRAY_BUFFER, program.buffer);\n        offset = 0;\n        this.ATTRIBUTES.forEach(function (attr) {\n          return offset += _this.bindAttribute(attr, program, offset, true);\n        });\n        gl.bufferData(gl.ARRAY_BUFFER, this.array, gl.DYNAMIC_DRAW);\n      }\n      gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    }\n  }, {\n    key: \"unbindProgram\",\n    value: function unbindProgram(program) {\n      var _this2 = this;\n      if (!this.isInstanced) {\n        this.ATTRIBUTES.forEach(function (attr) {\n          return _this2.unbindAttribute(attr, program);\n        });\n      } else {\n        this.CONSTANT_ATTRIBUTES.forEach(function (attr) {\n          return _this2.unbindAttribute(attr, program, false);\n        });\n        this.ATTRIBUTES.forEach(function (attr) {\n          return _this2.unbindAttribute(attr, program, true);\n        });\n      }\n    }\n  }, {\n    key: \"bindAttribute\",\n    value: function bindAttribute(attr, program, offset, setDivisor) {\n      var sizeFactor = SIZE_FACTOR_PER_ATTRIBUTE_TYPE[attr.type];\n      if (typeof sizeFactor !== \"number\") throw new Error(\"Program.bind: yet unsupported attribute type \\\"\".concat(attr.type, \"\\\"\"));\n      var location = program.attributeLocations[attr.name];\n      var gl = program.gl;\n      if (location !== -1) {\n        gl.enableVertexAttribArray(location);\n        var stride = !this.isInstanced ? this.ATTRIBUTES_ITEMS_COUNT * Float32Array.BYTES_PER_ELEMENT : (setDivisor ? this.ATTRIBUTES_ITEMS_COUNT : getAttributesItemsCount(this.CONSTANT_ATTRIBUTES)) * Float32Array.BYTES_PER_ELEMENT;\n        gl.vertexAttribPointer(location, attr.size, attr.type, attr.normalized || false, stride, offset);\n        if (this.isInstanced && setDivisor) {\n          if (gl instanceof WebGL2RenderingContext) {\n            gl.vertexAttribDivisor(location, 1);\n          } else {\n            var ext = gl.getExtension(\"ANGLE_instanced_arrays\");\n            if (ext) ext.vertexAttribDivisorANGLE(location, 1);\n          }\n        }\n      }\n      return attr.size * sizeFactor;\n    }\n  }, {\n    key: \"unbindAttribute\",\n    value: function unbindAttribute(attr, program, unsetDivisor) {\n      var location = program.attributeLocations[attr.name];\n      var gl = program.gl;\n      if (location !== -1) {\n        gl.disableVertexAttribArray(location);\n        if (this.isInstanced && unsetDivisor) {\n          if (gl instanceof WebGL2RenderingContext) {\n            gl.vertexAttribDivisor(location, 0);\n          } else {\n            var ext = gl.getExtension(\"ANGLE_instanced_arrays\");\n            if (ext) ext.vertexAttribDivisorANGLE(location, 0);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"reallocate\",\n    value: function reallocate(capacity) {\n      // If desired capacity has not changed we do nothing\n      // NOTE: it's possible here to implement more subtle reallocation schemes\n      // when the number of rendered items increase or decrease\n      if (capacity === this.capacity) return;\n      this.capacity = capacity;\n      this.verticesCount = this.VERTICES * capacity;\n      this.array = new Float32Array(!this.isInstanced ? this.verticesCount * this.ATTRIBUTES_ITEMS_COUNT : this.capacity * this.ATTRIBUTES_ITEMS_COUNT);\n    }\n  }, {\n    key: \"hasNothingToRender\",\n    value: function hasNothingToRender() {\n      return this.verticesCount === 0;\n    }\n  }, {\n    key: \"renderProgram\",\n    value: function renderProgram(params, programInfo) {\n      var gl = programInfo.gl,\n        program = programInfo.program;\n\n      // With the current fix for #1397, the alpha blending is enabled for the\n      // picking layer:\n      gl.enable(gl.BLEND);\n\n      // Original code:\n      // if (!isPicking) gl.enable(gl.BLEND);\n      // else gl.disable(gl.BLEND);\n\n      gl.useProgram(program);\n      this.setUniforms(params, programInfo);\n      this.drawWebGL(this.METHOD, programInfo);\n    }\n  }, {\n    key: \"render\",\n    value: function render(params) {\n      if (this.hasNothingToRender()) return;\n      if (this.pickProgram) {\n        this.pickProgram.gl.viewport(0, 0, params.width * params.pixelRatio / params.downSizingRatio, params.height * params.pixelRatio / params.downSizingRatio);\n        this.bindProgram(this.pickProgram);\n        this.renderProgram(_objectSpread2(_objectSpread2({}, params), {}, {\n          pixelRatio: params.pixelRatio / params.downSizingRatio\n        }), this.pickProgram);\n        this.unbindProgram(this.pickProgram);\n      }\n      this.normalProgram.gl.viewport(0, 0, params.width * params.pixelRatio, params.height * params.pixelRatio);\n      this.bindProgram(this.normalProgram);\n      this.renderProgram(params, this.normalProgram);\n      this.unbindProgram(this.normalProgram);\n    }\n  }, {\n    key: \"drawWebGL\",\n    value: function drawWebGL(method, _ref) {\n      var gl = _ref.gl,\n        frameBuffer = _ref.frameBuffer;\n      gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n      if (!this.isInstanced) {\n        gl.drawArrays(method, 0, this.verticesCount);\n      } else {\n        if (gl instanceof WebGL2RenderingContext) {\n          gl.drawArraysInstanced(method, 0, this.VERTICES, this.capacity);\n        } else {\n          var ext = gl.getExtension(\"ANGLE_instanced_arrays\");\n          if (ext) ext.drawArraysInstancedANGLE(method, 0, this.VERTICES, this.capacity);\n        }\n      }\n    }\n  }]);\n  return Program;\n}();\n\nvar AbstractNodeProgram = /*#__PURE__*/function (_AbstractProgram) {\n  _inherits(AbstractNodeProgram, _AbstractProgram);\n  function AbstractNodeProgram() {\n    _classCallCheck(this, AbstractNodeProgram);\n    return _callSuper(this, AbstractNodeProgram, arguments);\n  }\n  return _createClass(AbstractNodeProgram);\n}(AbstractProgram);\nvar NodeProgram = /*#__PURE__*/function (_ref) {\n  _inherits(NodeProgram, _ref);\n  function NodeProgram() {\n    _classCallCheck(this, NodeProgram);\n    return _callSuper(this, NodeProgram, arguments);\n  }\n  _createClass(NodeProgram, [{\n    key: \"kill\",\n    value: function kill() {\n      _get(_getPrototypeOf(NodeProgram.prototype), \"kill\", this).call(this);\n    }\n  }, {\n    key: \"process\",\n    value: function process(nodeIndex, offset, data) {\n      var i = offset * this.STRIDE;\n      // NOTE: dealing with hidden items automatically\n      if (data.hidden) {\n        for (var l = i + this.STRIDE; i < l; i++) {\n          this.array[i] = 0;\n        }\n        return;\n      }\n      return this.processVisibleItem(indexToColor(nodeIndex), i, data);\n    }\n  }]);\n  return NodeProgram;\n}(Program);\n/**\n * Helper function combining two or more programs into a single compound one.\n * Note that this is more a quick & easy way to combine program than a really\n * performant option. More performant programs can be written entirely.\n *\n * @param  {array}    programClasses - Program classes to combine.\n * @param  {function} drawLabel - An optional node \"draw label\" function.\n * @param  {function} drawHover - An optional node \"draw hover\" function.\n * @return {function}\n */\nfunction createNodeCompoundProgram(programClasses, drawLabel, drawHover) {\n  return /*#__PURE__*/function () {\n    function NodeCompoundProgram(gl, pickingBuffer, renderer) {\n      _classCallCheck(this, NodeCompoundProgram);\n      _defineProperty(this, \"drawLabel\", drawLabel);\n      _defineProperty(this, \"drawHover\", drawHover);\n      this.programs = programClasses.map(function (Program) {\n        return new Program(gl, pickingBuffer, renderer);\n      });\n    }\n    _createClass(NodeCompoundProgram, [{\n      key: \"reallocate\",\n      value: function reallocate(capacity) {\n        this.programs.forEach(function (program) {\n          return program.reallocate(capacity);\n        });\n      }\n    }, {\n      key: \"process\",\n      value: function process(nodeIndex, offset, data) {\n        this.programs.forEach(function (program) {\n          return program.process(nodeIndex, offset, data);\n        });\n      }\n    }, {\n      key: \"render\",\n      value: function render(params) {\n        this.programs.forEach(function (program) {\n          return program.render(params);\n        });\n      }\n    }, {\n      key: \"kill\",\n      value: function kill() {\n        this.programs.forEach(function (program) {\n          return program.kill();\n        });\n      }\n    }]);\n    return NodeCompoundProgram;\n  }();\n}\n\nvar AbstractEdgeProgram = /*#__PURE__*/function (_AbstractProgram) {\n  _inherits(AbstractEdgeProgram, _AbstractProgram);\n  function AbstractEdgeProgram() {\n    _classCallCheck(this, AbstractEdgeProgram);\n    return _callSuper(this, AbstractEdgeProgram, arguments);\n  }\n  return _createClass(AbstractEdgeProgram);\n}(AbstractProgram);\nvar EdgeProgram = /*#__PURE__*/function (_ref) {\n  _inherits(EdgeProgram, _ref);\n  function EdgeProgram() {\n    var _this;\n    _classCallCheck(this, EdgeProgram);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _callSuper(this, EdgeProgram, [].concat(args));\n    _defineProperty(_assertThisInitialized(_this), \"drawLabel\", undefined);\n    return _this;\n  }\n  _createClass(EdgeProgram, [{\n    key: \"kill\",\n    value: function kill() {\n      _get(_getPrototypeOf(EdgeProgram.prototype), \"kill\", this).call(this);\n    }\n  }, {\n    key: \"process\",\n    value: function process(edgeIndex, offset, sourceData, targetData, data) {\n      var i = offset * this.STRIDE;\n      // NOTE: dealing with hidden items automatically\n      if (data.hidden || sourceData.hidden || targetData.hidden) {\n        for (var l = i + this.STRIDE; i < l; i++) {\n          this.array[i] = 0;\n        }\n        return;\n      }\n      return this.processVisibleItem(indexToColor(edgeIndex), i, sourceData, targetData, data);\n    }\n  }]);\n  return EdgeProgram;\n}(Program);\n/**\n * Helper function combining two or more programs into a single compound one.\n * Note that this is more a quick & easy way to combine program than a really\n * performant option. More performant programs can be written entirely.\n *\n * @param  {array}    programClasses - Program classes to combine.\n * @param  {function} drawLabel - An optional edge \"draw label\" function.\n * @return {function}\n */\nfunction createEdgeCompoundProgram(programClasses, drawLabel) {\n  return /*#__PURE__*/function () {\n    function EdgeCompoundProgram(gl, pickingBuffer, renderer) {\n      _classCallCheck(this, EdgeCompoundProgram);\n      _defineProperty(this, \"drawLabel\", drawLabel);\n      this.programs = programClasses.map(function (Program) {\n        return new Program(gl, pickingBuffer, renderer);\n      });\n    }\n    _createClass(EdgeCompoundProgram, [{\n      key: \"reallocate\",\n      value: function reallocate(capacity) {\n        this.programs.forEach(function (program) {\n          return program.reallocate(capacity);\n        });\n      }\n    }, {\n      key: \"process\",\n      value: function process(edgeIndex, offset, sourceData, targetData, data) {\n        this.programs.forEach(function (program) {\n          return program.process(edgeIndex, offset, sourceData, targetData, data);\n        });\n      }\n    }, {\n      key: \"render\",\n      value: function render(params) {\n        this.programs.forEach(function (program) {\n          return program.render(params);\n        });\n      }\n    }, {\n      key: \"kill\",\n      value: function kill() {\n        this.programs.forEach(function (program) {\n          return program.kill();\n        });\n      }\n    }]);\n    return EdgeCompoundProgram;\n  }();\n}\n\nfunction drawStraightEdgeLabel(context, edgeData, sourceData, targetData, settings) {\n  var size = settings.edgeLabelSize,\n    font = settings.edgeLabelFont,\n    weight = settings.edgeLabelWeight,\n    color = settings.edgeLabelColor.attribute ? edgeData[settings.edgeLabelColor.attribute] || settings.edgeLabelColor.color || \"#000\" : settings.edgeLabelColor.color;\n  var label = edgeData.label;\n  if (!label) return;\n  context.fillStyle = color;\n  context.font = \"\".concat(weight, \" \").concat(size, \"px \").concat(font);\n\n  // Computing positions without considering nodes sizes:\n  var sSize = sourceData.size;\n  var tSize = targetData.size;\n  var sx = sourceData.x;\n  var sy = sourceData.y;\n  var tx = targetData.x;\n  var ty = targetData.y;\n  var cx = (sx + tx) / 2;\n  var cy = (sy + ty) / 2;\n  var dx = tx - sx;\n  var dy = ty - sy;\n  var d = Math.sqrt(dx * dx + dy * dy);\n  if (d < sSize + tSize) return;\n\n  // Adding nodes sizes:\n  sx += dx * sSize / d;\n  sy += dy * sSize / d;\n  tx -= dx * tSize / d;\n  ty -= dy * tSize / d;\n  cx = (sx + tx) / 2;\n  cy = (sy + ty) / 2;\n  dx = tx - sx;\n  dy = ty - sy;\n  d = Math.sqrt(dx * dx + dy * dy);\n\n  // Handling ellipsis\n  var textLength = context.measureText(label).width;\n  if (textLength > d) {\n    var ellipsis = \"…\";\n    label = label + ellipsis;\n    textLength = context.measureText(label).width;\n    while (textLength > d && label.length > 1) {\n      label = label.slice(0, -2) + ellipsis;\n      textLength = context.measureText(label).width;\n    }\n    if (label.length < 4) return;\n  }\n  var angle;\n  if (dx > 0) {\n    if (dy > 0) angle = Math.acos(dx / d);else angle = Math.asin(dy / d);\n  } else {\n    if (dy > 0) angle = Math.acos(dx / d) + Math.PI;else angle = Math.asin(dx / d) + Math.PI / 2;\n  }\n  context.save();\n  context.translate(cx, cy);\n  context.rotate(angle);\n  context.fillText(label, -textLength / 2, edgeData.size / 2 + size);\n  context.restore();\n}\n\nfunction drawDiscNodeLabel(context, data, settings) {\n  if (!data.label) return;\n  var size = settings.labelSize,\n    font = settings.labelFont,\n    weight = settings.labelWeight,\n    color = settings.labelColor.attribute ? data[settings.labelColor.attribute] || settings.labelColor.color || \"#000\" : settings.labelColor.color;\n  context.fillStyle = color;\n  context.font = \"\".concat(weight, \" \").concat(size, \"px \").concat(font);\n  context.fillText(data.label, data.x + data.size + 3, data.y + size / 3);\n}\n\n/**\n * Draw an hovered node.\n * - if there is no label => display a shadow on the node\n * - if the label box is bigger than node size => display a label box that contains the node with a shadow\n * - else node with shadow and the label box\n */\nfunction drawDiscNodeHover(context, data, settings) {\n  var size = settings.labelSize,\n    font = settings.labelFont,\n    weight = settings.labelWeight;\n  context.font = \"\".concat(weight, \" \").concat(size, \"px \").concat(font);\n\n  // Then we draw the label background\n  context.fillStyle = \"#FFF\";\n  context.shadowOffsetX = 0;\n  context.shadowOffsetY = 0;\n  context.shadowBlur = 8;\n  context.shadowColor = \"#000\";\n  var PADDING = 2;\n  if (typeof data.label === \"string\") {\n    var textWidth = context.measureText(data.label).width,\n      boxWidth = Math.round(textWidth + 5),\n      boxHeight = Math.round(size + 2 * PADDING),\n      radius = Math.max(data.size, size / 2) + PADDING;\n    var angleRadian = Math.asin(boxHeight / 2 / radius);\n    var xDeltaCoord = Math.sqrt(Math.abs(Math.pow(radius, 2) - Math.pow(boxHeight / 2, 2)));\n    context.beginPath();\n    context.moveTo(data.x + xDeltaCoord, data.y + boxHeight / 2);\n    context.lineTo(data.x + radius + boxWidth, data.y + boxHeight / 2);\n    context.lineTo(data.x + radius + boxWidth, data.y - boxHeight / 2);\n    context.lineTo(data.x + xDeltaCoord, data.y - boxHeight / 2);\n    context.arc(data.x, data.y, radius, angleRadian, -angleRadian);\n    context.closePath();\n    context.fill();\n  } else {\n    context.beginPath();\n    context.arc(data.x, data.y, data.size + PADDING, 0, Math.PI * 2);\n    context.closePath();\n    context.fill();\n  }\n  context.shadowOffsetX = 0;\n  context.shadowOffsetY = 0;\n  context.shadowBlur = 0;\n\n  // And finally we draw the label\n  drawDiscNodeLabel(context, data, settings);\n}\n\n// language=GLSL\nvar SHADER_SOURCE$6 = /*glsl*/\"\\nprecision highp float;\\n\\nvarying vec4 v_color;\\nvarying vec2 v_diffVector;\\nvarying float v_radius;\\n\\nuniform float u_correctionRatio;\\n\\nconst vec4 transparent = vec4(0.0, 0.0, 0.0, 0.0);\\n\\nvoid main(void) {\\n  float border = u_correctionRatio * 2.0;\\n  float dist = length(v_diffVector) - v_radius + border;\\n\\n  // No antialiasing for picking mode:\\n  #ifdef PICKING_MODE\\n  if (dist > border)\\n    gl_FragColor = transparent;\\n  else\\n    gl_FragColor = v_color;\\n\\n  #else\\n  float t = 0.0;\\n  if (dist > border)\\n    t = 1.0;\\n  else if (dist > 0.0)\\n    t = dist / border;\\n\\n  gl_FragColor = mix(v_color, transparent, t);\\n  #endif\\n}\\n\";\nvar FRAGMENT_SHADER_SOURCE$2 = SHADER_SOURCE$6;\n\n// language=GLSL\nvar SHADER_SOURCE$5 = /*glsl*/\"\\nattribute vec4 a_id;\\nattribute vec4 a_color;\\nattribute vec2 a_position;\\nattribute float a_size;\\nattribute float a_angle;\\n\\nuniform mat3 u_matrix;\\nuniform float u_sizeRatio;\\nuniform float u_correctionRatio;\\n\\nvarying vec4 v_color;\\nvarying vec2 v_diffVector;\\nvarying float v_radius;\\nvarying float v_border;\\n\\nconst float bias = 255.0 / 254.0;\\n\\nvoid main() {\\n  float size = a_size * u_correctionRatio / u_sizeRatio * 4.0;\\n  vec2 diffVector = size * vec2(cos(a_angle), sin(a_angle));\\n  vec2 position = a_position + diffVector;\\n  gl_Position = vec4(\\n    (u_matrix * vec3(position, 1)).xy,\\n    0,\\n    1\\n  );\\n\\n  v_diffVector = diffVector;\\n  v_radius = size / 2.0;\\n\\n  #ifdef PICKING_MODE\\n  // For picking mode, we use the ID as the color:\\n  v_color = a_id;\\n  #else\\n  // For normal mode, we use the color:\\n  v_color = a_color;\\n  #endif\\n\\n  v_color.a *= bias;\\n}\\n\";\nvar VERTEX_SHADER_SOURCE$3 = SHADER_SOURCE$5;\n\nvar _WebGLRenderingContex$3 = WebGLRenderingContext,\n  UNSIGNED_BYTE$3 = _WebGLRenderingContex$3.UNSIGNED_BYTE,\n  FLOAT$3 = _WebGLRenderingContex$3.FLOAT;\nvar UNIFORMS$3 = [\"u_sizeRatio\", \"u_correctionRatio\", \"u_matrix\"];\nvar NodeCircleProgram = /*#__PURE__*/function (_NodeProgram) {\n  _inherits(NodeCircleProgram, _NodeProgram);\n  function NodeCircleProgram() {\n    _classCallCheck(this, NodeCircleProgram);\n    return _callSuper(this, NodeCircleProgram, arguments);\n  }\n  _createClass(NodeCircleProgram, [{\n    key: \"getDefinition\",\n    value: function getDefinition() {\n      return {\n        VERTICES: 3,\n        VERTEX_SHADER_SOURCE: VERTEX_SHADER_SOURCE$3,\n        FRAGMENT_SHADER_SOURCE: FRAGMENT_SHADER_SOURCE$2,\n        METHOD: WebGLRenderingContext.TRIANGLES,\n        UNIFORMS: UNIFORMS$3,\n        ATTRIBUTES: [{\n          name: \"a_position\",\n          size: 2,\n          type: FLOAT$3\n        }, {\n          name: \"a_size\",\n          size: 1,\n          type: FLOAT$3\n        }, {\n          name: \"a_color\",\n          size: 4,\n          type: UNSIGNED_BYTE$3,\n          normalized: true\n        }, {\n          name: \"a_id\",\n          size: 4,\n          type: UNSIGNED_BYTE$3,\n          normalized: true\n        }],\n        CONSTANT_ATTRIBUTES: [{\n          name: \"a_angle\",\n          size: 1,\n          type: FLOAT$3\n        }],\n        CONSTANT_DATA: [[NodeCircleProgram.ANGLE_1], [NodeCircleProgram.ANGLE_2], [NodeCircleProgram.ANGLE_3]]\n      };\n    }\n  }, {\n    key: \"processVisibleItem\",\n    value: function processVisibleItem(nodeIndex, startIndex, data) {\n      var array = this.array;\n      var color = floatColor(data.color);\n      array[startIndex++] = data.x;\n      array[startIndex++] = data.y;\n      array[startIndex++] = data.size;\n      array[startIndex++] = color;\n      array[startIndex++] = nodeIndex;\n    }\n  }, {\n    key: \"setUniforms\",\n    value: function setUniforms(params, _ref) {\n      var gl = _ref.gl,\n        uniformLocations = _ref.uniformLocations;\n      var u_sizeRatio = uniformLocations.u_sizeRatio,\n        u_correctionRatio = uniformLocations.u_correctionRatio,\n        u_matrix = uniformLocations.u_matrix;\n      gl.uniform1f(u_correctionRatio, params.correctionRatio);\n      gl.uniform1f(u_sizeRatio, params.sizeRatio);\n      gl.uniformMatrix3fv(u_matrix, false, params.matrix);\n    }\n  }]);\n  return NodeCircleProgram;\n}(NodeProgram);\n_defineProperty(NodeCircleProgram, \"ANGLE_1\", 0);\n_defineProperty(NodeCircleProgram, \"ANGLE_2\", 2 * Math.PI / 3);\n_defineProperty(NodeCircleProgram, \"ANGLE_3\", 4 * Math.PI / 3);\n\n// language=GLSL\nvar SHADER_SOURCE$4 = /*glsl*/\"\\nprecision mediump float;\\n\\nvarying vec4 v_color;\\n\\nvoid main(void) {\\n  gl_FragColor = v_color;\\n}\\n\";\nvar FRAGMENT_SHADER_SOURCE$1 = SHADER_SOURCE$4;\n\n// language=GLSL\nvar SHADER_SOURCE$3 = /*glsl*/\"\\nattribute vec2 a_position;\\nattribute vec2 a_normal;\\nattribute float a_radius;\\nattribute vec3 a_barycentric;\\n\\n#ifdef PICKING_MODE\\nattribute vec4 a_id;\\n#else\\nattribute vec4 a_color;\\n#endif\\n\\nuniform mat3 u_matrix;\\nuniform float u_sizeRatio;\\nuniform float u_correctionRatio;\\nuniform float u_minEdgeThickness;\\nuniform float u_lengthToThicknessRatio;\\nuniform float u_widenessToThicknessRatio;\\n\\nvarying vec4 v_color;\\n\\nconst float bias = 255.0 / 254.0;\\n\\nvoid main() {\\n  float minThickness = u_minEdgeThickness;\\n\\n  float normalLength = length(a_normal);\\n  vec2 unitNormal = a_normal / normalLength;\\n\\n  // These first computations are taken from edge.vert.glsl and\\n  // edge.clamped.vert.glsl. Please read it to get better comments on what's\\n  // happening:\\n  float pixelsThickness = max(normalLength / u_sizeRatio, minThickness);\\n  float webGLThickness = pixelsThickness * u_correctionRatio;\\n  float webGLNodeRadius = a_radius * 2.0 * u_correctionRatio / u_sizeRatio;\\n  float webGLArrowHeadLength = webGLThickness * u_lengthToThicknessRatio * 2.0;\\n  float webGLArrowHeadThickness = webGLThickness * u_widenessToThicknessRatio;\\n\\n  float da = a_barycentric.x;\\n  float db = a_barycentric.y;\\n  float dc = a_barycentric.z;\\n\\n  vec2 delta = vec2(\\n      da * (webGLNodeRadius * unitNormal.y)\\n    + db * ((webGLNodeRadius + webGLArrowHeadLength) * unitNormal.y + webGLArrowHeadThickness * unitNormal.x)\\n    + dc * ((webGLNodeRadius + webGLArrowHeadLength) * unitNormal.y - webGLArrowHeadThickness * unitNormal.x),\\n\\n      da * (-webGLNodeRadius * unitNormal.x)\\n    + db * (-(webGLNodeRadius + webGLArrowHeadLength) * unitNormal.x + webGLArrowHeadThickness * unitNormal.y)\\n    + dc * (-(webGLNodeRadius + webGLArrowHeadLength) * unitNormal.x - webGLArrowHeadThickness * unitNormal.y)\\n  );\\n\\n  vec2 position = (u_matrix * vec3(a_position + delta, 1)).xy;\\n\\n  gl_Position = vec4(position, 0, 1);\\n\\n  #ifdef PICKING_MODE\\n  // For picking mode, we use the ID as the color:\\n  v_color = a_id;\\n  #else\\n  // For normal mode, we use the color:\\n  v_color = a_color;\\n  #endif\\n\\n  v_color.a *= bias;\\n}\\n\";\nvar VERTEX_SHADER_SOURCE$2 = SHADER_SOURCE$3;\n\nvar _WebGLRenderingContex$2 = WebGLRenderingContext,\n  UNSIGNED_BYTE$2 = _WebGLRenderingContex$2.UNSIGNED_BYTE,\n  FLOAT$2 = _WebGLRenderingContex$2.FLOAT;\nvar UNIFORMS$2 = [\"u_matrix\", \"u_sizeRatio\", \"u_correctionRatio\", \"u_minEdgeThickness\", \"u_lengthToThicknessRatio\", \"u_widenessToThicknessRatio\"];\nvar DEFAULT_EDGE_ARROW_HEAD_PROGRAM_OPTIONS = {\n  lengthToThicknessRatio: 2.5,\n  widenessToThicknessRatio: 2\n};\nfunction createEdgeArrowHeadProgram(inputOptions) {\n  var options = _objectSpread2(_objectSpread2({}, DEFAULT_EDGE_ARROW_HEAD_PROGRAM_OPTIONS), inputOptions || {});\n  return /*#__PURE__*/function (_EdgeProgram) {\n    _inherits(EdgeArrowHeadProgram, _EdgeProgram);\n    function EdgeArrowHeadProgram() {\n      _classCallCheck(this, EdgeArrowHeadProgram);\n      return _callSuper(this, EdgeArrowHeadProgram, arguments);\n    }\n    _createClass(EdgeArrowHeadProgram, [{\n      key: \"getDefinition\",\n      value: function getDefinition() {\n        return {\n          VERTICES: 3,\n          VERTEX_SHADER_SOURCE: VERTEX_SHADER_SOURCE$2,\n          FRAGMENT_SHADER_SOURCE: FRAGMENT_SHADER_SOURCE$1,\n          METHOD: WebGLRenderingContext.TRIANGLES,\n          UNIFORMS: UNIFORMS$2,\n          ATTRIBUTES: [{\n            name: \"a_position\",\n            size: 2,\n            type: FLOAT$2\n          }, {\n            name: \"a_normal\",\n            size: 2,\n            type: FLOAT$2\n          }, {\n            name: \"a_radius\",\n            size: 1,\n            type: FLOAT$2\n          }, {\n            name: \"a_color\",\n            size: 4,\n            type: UNSIGNED_BYTE$2,\n            normalized: true\n          }, {\n            name: \"a_id\",\n            size: 4,\n            type: UNSIGNED_BYTE$2,\n            normalized: true\n          }],\n          CONSTANT_ATTRIBUTES: [{\n            name: \"a_barycentric\",\n            size: 3,\n            type: FLOAT$2\n          }],\n          CONSTANT_DATA: [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\n        };\n      }\n    }, {\n      key: \"processVisibleItem\",\n      value: function processVisibleItem(edgeIndex, startIndex, sourceData, targetData, data) {\n        var thickness = data.size || 1;\n        var radius = targetData.size || 1;\n        var x1 = sourceData.x;\n        var y1 = sourceData.y;\n        var x2 = targetData.x;\n        var y2 = targetData.y;\n        var color = floatColor(data.color);\n\n        // Computing normals\n        var dx = x2 - x1;\n        var dy = y2 - y1;\n        var len = dx * dx + dy * dy;\n        var n1 = 0;\n        var n2 = 0;\n        if (len) {\n          len = 1 / Math.sqrt(len);\n          n1 = -dy * len * thickness;\n          n2 = dx * len * thickness;\n        }\n        var array = this.array;\n        array[startIndex++] = x2;\n        array[startIndex++] = y2;\n        array[startIndex++] = -n1;\n        array[startIndex++] = -n2;\n        array[startIndex++] = radius;\n        array[startIndex++] = color;\n        array[startIndex++] = edgeIndex;\n      }\n    }, {\n      key: \"setUniforms\",\n      value: function setUniforms(params, _ref) {\n        var gl = _ref.gl,\n          uniformLocations = _ref.uniformLocations;\n        var u_matrix = uniformLocations.u_matrix,\n          u_sizeRatio = uniformLocations.u_sizeRatio,\n          u_correctionRatio = uniformLocations.u_correctionRatio,\n          u_minEdgeThickness = uniformLocations.u_minEdgeThickness,\n          u_lengthToThicknessRatio = uniformLocations.u_lengthToThicknessRatio,\n          u_widenessToThicknessRatio = uniformLocations.u_widenessToThicknessRatio;\n        gl.uniformMatrix3fv(u_matrix, false, params.matrix);\n        gl.uniform1f(u_sizeRatio, params.sizeRatio);\n        gl.uniform1f(u_correctionRatio, params.correctionRatio);\n        gl.uniform1f(u_minEdgeThickness, params.minEdgeThickness);\n        gl.uniform1f(u_lengthToThicknessRatio, options.lengthToThicknessRatio);\n        gl.uniform1f(u_widenessToThicknessRatio, options.widenessToThicknessRatio);\n      }\n    }]);\n    return EdgeArrowHeadProgram;\n  }(EdgeProgram);\n}\ncreateEdgeArrowHeadProgram();\n\n// language=GLSL\nvar SHADER_SOURCE$2 = /*glsl*/\"\\nprecision mediump float;\\n\\nvarying vec4 v_color;\\nvarying vec2 v_normal;\\nvarying float v_thickness;\\nvarying float v_feather;\\n\\nconst vec4 transparent = vec4(0.0, 0.0, 0.0, 0.0);\\n\\nvoid main(void) {\\n  // We only handle antialiasing for normal mode:\\n  #ifdef PICKING_MODE\\n  gl_FragColor = v_color;\\n  #else\\n  float dist = length(v_normal) * v_thickness;\\n\\n  float t = smoothstep(\\n    v_thickness - v_feather,\\n    v_thickness,\\n    dist\\n  );\\n\\n  gl_FragColor = mix(v_color, transparent, t);\\n  #endif\\n}\\n\";\nvar FRAGMENT_SHADER_SOURCE = SHADER_SOURCE$2;\n\n// language=GLSL\nvar SHADER_SOURCE$1 = /*glsl*/\"\\nattribute vec4 a_id;\\nattribute vec4 a_color;\\nattribute vec2 a_normal;\\nattribute float a_normalCoef;\\nattribute vec2 a_positionStart;\\nattribute vec2 a_positionEnd;\\nattribute float a_positionCoef;\\nattribute float a_radius;\\nattribute float a_radiusCoef;\\n\\nuniform mat3 u_matrix;\\nuniform float u_zoomRatio;\\nuniform float u_sizeRatio;\\nuniform float u_pixelRatio;\\nuniform float u_correctionRatio;\\nuniform float u_minEdgeThickness;\\nuniform float u_lengthToThicknessRatio;\\nuniform float u_feather;\\n\\nvarying vec4 v_color;\\nvarying vec2 v_normal;\\nvarying float v_thickness;\\nvarying float v_feather;\\n\\nconst float bias = 255.0 / 254.0;\\n\\nvoid main() {\\n  float minThickness = u_minEdgeThickness;\\n\\n  float radius = a_radius * a_radiusCoef;\\n  vec2 normal = a_normal * a_normalCoef;\\n  vec2 position = a_positionStart * (1.0 - a_positionCoef) + a_positionEnd * a_positionCoef;\\n\\n  float normalLength = length(normal);\\n  vec2 unitNormal = normal / normalLength;\\n\\n  // These first computations are taken from edge.vert.glsl. Please read it to\\n  // get better comments on what's happening:\\n  float pixelsThickness = max(normalLength, minThickness * u_sizeRatio);\\n  float webGLThickness = pixelsThickness * u_correctionRatio / u_sizeRatio;\\n\\n  // Here, we move the point to leave space for the arrow head:\\n  float direction = sign(radius);\\n  float webGLNodeRadius = direction * radius * 2.0 * u_correctionRatio / u_sizeRatio;\\n  float webGLArrowHeadLength = webGLThickness * u_lengthToThicknessRatio * 2.0;\\n\\n  vec2 compensationVector = vec2(-direction * unitNormal.y, direction * unitNormal.x) * (webGLNodeRadius + webGLArrowHeadLength);\\n\\n  // Here is the proper position of the vertex\\n  gl_Position = vec4((u_matrix * vec3(position + unitNormal * webGLThickness + compensationVector, 1)).xy, 0, 1);\\n\\n  v_thickness = webGLThickness / u_zoomRatio;\\n\\n  v_normal = unitNormal;\\n\\n  v_feather = u_feather * u_correctionRatio / u_zoomRatio / u_pixelRatio * 2.0;\\n\\n  #ifdef PICKING_MODE\\n  // For picking mode, we use the ID as the color:\\n  v_color = a_id;\\n  #else\\n  // For normal mode, we use the color:\\n  v_color = a_color;\\n  #endif\\n\\n  v_color.a *= bias;\\n}\\n\";\nvar VERTEX_SHADER_SOURCE$1 = SHADER_SOURCE$1;\n\nvar _WebGLRenderingContex$1 = WebGLRenderingContext,\n  UNSIGNED_BYTE$1 = _WebGLRenderingContex$1.UNSIGNED_BYTE,\n  FLOAT$1 = _WebGLRenderingContex$1.FLOAT;\nvar UNIFORMS$1 = [\"u_matrix\", \"u_zoomRatio\", \"u_sizeRatio\", \"u_correctionRatio\", \"u_pixelRatio\", \"u_feather\", \"u_minEdgeThickness\", \"u_lengthToThicknessRatio\"];\nvar DEFAULT_EDGE_CLAMPED_PROGRAM_OPTIONS = {\n  lengthToThicknessRatio: DEFAULT_EDGE_ARROW_HEAD_PROGRAM_OPTIONS.lengthToThicknessRatio\n};\nfunction createEdgeClampedProgram(inputOptions) {\n  var options = _objectSpread2(_objectSpread2({}, DEFAULT_EDGE_CLAMPED_PROGRAM_OPTIONS), inputOptions || {});\n  return /*#__PURE__*/function (_EdgeProgram) {\n    _inherits(EdgeClampedProgram, _EdgeProgram);\n    function EdgeClampedProgram() {\n      _classCallCheck(this, EdgeClampedProgram);\n      return _callSuper(this, EdgeClampedProgram, arguments);\n    }\n    _createClass(EdgeClampedProgram, [{\n      key: \"getDefinition\",\n      value: function getDefinition() {\n        return {\n          VERTICES: 6,\n          VERTEX_SHADER_SOURCE: VERTEX_SHADER_SOURCE$1,\n          FRAGMENT_SHADER_SOURCE: FRAGMENT_SHADER_SOURCE,\n          METHOD: WebGLRenderingContext.TRIANGLES,\n          UNIFORMS: UNIFORMS$1,\n          ATTRIBUTES: [{\n            name: \"a_positionStart\",\n            size: 2,\n            type: FLOAT$1\n          }, {\n            name: \"a_positionEnd\",\n            size: 2,\n            type: FLOAT$1\n          }, {\n            name: \"a_normal\",\n            size: 2,\n            type: FLOAT$1\n          }, {\n            name: \"a_color\",\n            size: 4,\n            type: UNSIGNED_BYTE$1,\n            normalized: true\n          }, {\n            name: \"a_id\",\n            size: 4,\n            type: UNSIGNED_BYTE$1,\n            normalized: true\n          }, {\n            name: \"a_radius\",\n            size: 1,\n            type: FLOAT$1\n          }],\n          CONSTANT_ATTRIBUTES: [\n          // If 0, then position will be a_positionStart\n          // If 1, then position will be a_positionEnd\n          {\n            name: \"a_positionCoef\",\n            size: 1,\n            type: FLOAT$1\n          }, {\n            name: \"a_normalCoef\",\n            size: 1,\n            type: FLOAT$1\n          }, {\n            name: \"a_radiusCoef\",\n            size: 1,\n            type: FLOAT$1\n          }],\n          CONSTANT_DATA: [[0, 1, 0], [0, -1, 0], [1, 1, 1], [1, 1, 1], [0, -1, 0], [1, -1, -1]]\n        };\n      }\n    }, {\n      key: \"processVisibleItem\",\n      value: function processVisibleItem(edgeIndex, startIndex, sourceData, targetData, data) {\n        var thickness = data.size || 1;\n        var x1 = sourceData.x;\n        var y1 = sourceData.y;\n        var x2 = targetData.x;\n        var y2 = targetData.y;\n        var color = floatColor(data.color);\n\n        // Computing normals\n        var dx = x2 - x1;\n        var dy = y2 - y1;\n        var radius = targetData.size || 1;\n        var len = dx * dx + dy * dy;\n        var n1 = 0;\n        var n2 = 0;\n        if (len) {\n          len = 1 / Math.sqrt(len);\n          n1 = -dy * len * thickness;\n          n2 = dx * len * thickness;\n        }\n        var array = this.array;\n        array[startIndex++] = x1;\n        array[startIndex++] = y1;\n        array[startIndex++] = x2;\n        array[startIndex++] = y2;\n        array[startIndex++] = n1;\n        array[startIndex++] = n2;\n        array[startIndex++] = color;\n        array[startIndex++] = edgeIndex;\n        array[startIndex++] = radius;\n      }\n    }, {\n      key: \"setUniforms\",\n      value: function setUniforms(params, _ref) {\n        var gl = _ref.gl,\n          uniformLocations = _ref.uniformLocations;\n        var u_matrix = uniformLocations.u_matrix,\n          u_zoomRatio = uniformLocations.u_zoomRatio,\n          u_feather = uniformLocations.u_feather,\n          u_pixelRatio = uniformLocations.u_pixelRatio,\n          u_correctionRatio = uniformLocations.u_correctionRatio,\n          u_sizeRatio = uniformLocations.u_sizeRatio,\n          u_minEdgeThickness = uniformLocations.u_minEdgeThickness,\n          u_lengthToThicknessRatio = uniformLocations.u_lengthToThicknessRatio;\n        gl.uniformMatrix3fv(u_matrix, false, params.matrix);\n        gl.uniform1f(u_zoomRatio, params.zoomRatio);\n        gl.uniform1f(u_sizeRatio, params.sizeRatio);\n        gl.uniform1f(u_correctionRatio, params.correctionRatio);\n        gl.uniform1f(u_pixelRatio, params.pixelRatio);\n        gl.uniform1f(u_feather, params.antiAliasingFeather);\n        gl.uniform1f(u_minEdgeThickness, params.minEdgeThickness);\n        gl.uniform1f(u_lengthToThicknessRatio, options.lengthToThicknessRatio);\n      }\n    }]);\n    return EdgeClampedProgram;\n  }(EdgeProgram);\n}\ncreateEdgeClampedProgram();\n\nfunction createEdgeArrowProgram(inputOptions) {\n  return createEdgeCompoundProgram([createEdgeClampedProgram(inputOptions), createEdgeArrowHeadProgram(inputOptions)]);\n}\nvar EdgeArrowProgram = createEdgeArrowProgram();\nvar EdgeArrowProgram$1 = EdgeArrowProgram;\n\n// language=GLSL\nvar SHADER_SOURCE = /*glsl*/\"\\nattribute vec4 a_id;\\nattribute vec4 a_color;\\nattribute vec2 a_normal;\\nattribute float a_normalCoef;\\nattribute vec2 a_positionStart;\\nattribute vec2 a_positionEnd;\\nattribute float a_positionCoef;\\n\\nuniform mat3 u_matrix;\\nuniform float u_sizeRatio;\\nuniform float u_zoomRatio;\\nuniform float u_pixelRatio;\\nuniform float u_correctionRatio;\\nuniform float u_minEdgeThickness;\\nuniform float u_feather;\\n\\nvarying vec4 v_color;\\nvarying vec2 v_normal;\\nvarying float v_thickness;\\nvarying float v_feather;\\n\\nconst float bias = 255.0 / 254.0;\\n\\nvoid main() {\\n  float minThickness = u_minEdgeThickness;\\n\\n  vec2 normal = a_normal * a_normalCoef;\\n  vec2 position = a_positionStart * (1.0 - a_positionCoef) + a_positionEnd * a_positionCoef;\\n\\n  float normalLength = length(normal);\\n  vec2 unitNormal = normal / normalLength;\\n\\n  // We require edges to be at least \\\"minThickness\\\" pixels thick *on screen*\\n  // (so we need to compensate the size ratio):\\n  float pixelsThickness = max(normalLength, minThickness * u_sizeRatio);\\n\\n  // Then, we need to retrieve the normalized thickness of the edge in the WebGL\\n  // referential (in a ([0, 1], [0, 1]) space), using our \\\"magic\\\" correction\\n  // ratio:\\n  float webGLThickness = pixelsThickness * u_correctionRatio / u_sizeRatio;\\n\\n  // Here is the proper position of the vertex\\n  gl_Position = vec4((u_matrix * vec3(position + unitNormal * webGLThickness, 1)).xy, 0, 1);\\n\\n  // For the fragment shader though, we need a thickness that takes the \\\"magic\\\"\\n  // correction ratio into account (as in webGLThickness), but so that the\\n  // antialiasing effect does not depend on the zoom level. So here's yet\\n  // another thickness version:\\n  v_thickness = webGLThickness / u_zoomRatio;\\n\\n  v_normal = unitNormal;\\n\\n  v_feather = u_feather * u_correctionRatio / u_zoomRatio / u_pixelRatio * 2.0;\\n\\n  #ifdef PICKING_MODE\\n  // For picking mode, we use the ID as the color:\\n  v_color = a_id;\\n  #else\\n  // For normal mode, we use the color:\\n  v_color = a_color;\\n  #endif\\n\\n  v_color.a *= bias;\\n}\\n\";\nvar VERTEX_SHADER_SOURCE = SHADER_SOURCE;\n\nvar _WebGLRenderingContex = WebGLRenderingContext,\n  UNSIGNED_BYTE = _WebGLRenderingContex.UNSIGNED_BYTE,\n  FLOAT = _WebGLRenderingContex.FLOAT;\nvar UNIFORMS = [\"u_matrix\", \"u_zoomRatio\", \"u_sizeRatio\", \"u_correctionRatio\", \"u_pixelRatio\", \"u_feather\", \"u_minEdgeThickness\"];\nvar EdgeRectangleProgram = /*#__PURE__*/function (_EdgeProgram) {\n  _inherits(EdgeRectangleProgram, _EdgeProgram);\n  function EdgeRectangleProgram() {\n    _classCallCheck(this, EdgeRectangleProgram);\n    return _callSuper(this, EdgeRectangleProgram, arguments);\n  }\n  _createClass(EdgeRectangleProgram, [{\n    key: \"getDefinition\",\n    value: function getDefinition() {\n      return {\n        VERTICES: 6,\n        VERTEX_SHADER_SOURCE: VERTEX_SHADER_SOURCE,\n        FRAGMENT_SHADER_SOURCE: FRAGMENT_SHADER_SOURCE,\n        METHOD: WebGLRenderingContext.TRIANGLES,\n        UNIFORMS: UNIFORMS,\n        ATTRIBUTES: [{\n          name: \"a_positionStart\",\n          size: 2,\n          type: FLOAT\n        }, {\n          name: \"a_positionEnd\",\n          size: 2,\n          type: FLOAT\n        }, {\n          name: \"a_normal\",\n          size: 2,\n          type: FLOAT\n        }, {\n          name: \"a_color\",\n          size: 4,\n          type: UNSIGNED_BYTE,\n          normalized: true\n        }, {\n          name: \"a_id\",\n          size: 4,\n          type: UNSIGNED_BYTE,\n          normalized: true\n        }],\n        CONSTANT_ATTRIBUTES: [\n        // If 0, then position will be a_positionStart\n        // If 2, then position will be a_positionEnd\n        {\n          name: \"a_positionCoef\",\n          size: 1,\n          type: FLOAT\n        }, {\n          name: \"a_normalCoef\",\n          size: 1,\n          type: FLOAT\n        }],\n        CONSTANT_DATA: [[0, 1], [0, -1], [1, 1], [1, 1], [0, -1], [1, -1]]\n      };\n    }\n  }, {\n    key: \"processVisibleItem\",\n    value: function processVisibleItem(edgeIndex, startIndex, sourceData, targetData, data) {\n      var thickness = data.size || 1;\n      var x1 = sourceData.x;\n      var y1 = sourceData.y;\n      var x2 = targetData.x;\n      var y2 = targetData.y;\n      var color = floatColor(data.color);\n\n      // Computing normals\n      var dx = x2 - x1;\n      var dy = y2 - y1;\n      var len = dx * dx + dy * dy;\n      var n1 = 0;\n      var n2 = 0;\n      if (len) {\n        len = 1 / Math.sqrt(len);\n        n1 = -dy * len * thickness;\n        n2 = dx * len * thickness;\n      }\n      var array = this.array;\n      array[startIndex++] = x1;\n      array[startIndex++] = y1;\n      array[startIndex++] = x2;\n      array[startIndex++] = y2;\n      array[startIndex++] = n1;\n      array[startIndex++] = n2;\n      array[startIndex++] = color;\n      array[startIndex++] = edgeIndex;\n    }\n  }, {\n    key: \"setUniforms\",\n    value: function setUniforms(params, _ref) {\n      var gl = _ref.gl,\n        uniformLocations = _ref.uniformLocations;\n      var u_matrix = uniformLocations.u_matrix,\n        u_zoomRatio = uniformLocations.u_zoomRatio,\n        u_feather = uniformLocations.u_feather,\n        u_pixelRatio = uniformLocations.u_pixelRatio,\n        u_correctionRatio = uniformLocations.u_correctionRatio,\n        u_sizeRatio = uniformLocations.u_sizeRatio,\n        u_minEdgeThickness = uniformLocations.u_minEdgeThickness;\n      gl.uniformMatrix3fv(u_matrix, false, params.matrix);\n      gl.uniform1f(u_zoomRatio, params.zoomRatio);\n      gl.uniform1f(u_sizeRatio, params.sizeRatio);\n      gl.uniform1f(u_correctionRatio, params.correctionRatio);\n      gl.uniform1f(u_pixelRatio, params.pixelRatio);\n      gl.uniform1f(u_feather, params.antiAliasingFeather);\n      gl.uniform1f(u_minEdgeThickness, params.minEdgeThickness);\n    }\n  }]);\n  return EdgeRectangleProgram;\n}(EdgeProgram);\n\nexport { AbstractNodeProgram as A, DEFAULT_EDGE_ARROW_HEAD_PROGRAM_OPTIONS as D, EdgeArrowProgram$1 as E, NodeCircleProgram as N, Program as P, _defineProperty as _, _objectSpread2 as a, drawDiscNodeLabel as b, drawDiscNodeHover as c, drawStraightEdgeLabel as d, EdgeRectangleProgram as e, NodeProgram as f, EdgeProgram as g, createNodeCompoundProgram as h, AbstractEdgeProgram as i, createEdgeCompoundProgram as j, AbstractProgram as k, createEdgeArrowProgram as l, getAttributeItemsCount as m, getAttributesItemsCount as n, loadVertexShader as o, loadFragmentShader as p, loadProgram as q, killProgram as r, numberToGLSLFloat as s, createEdgeArrowHeadProgram as t, DEFAULT_EDGE_CLAMPED_PROGRAM_OPTIONS as u, createEdgeClampedProgram as v };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}