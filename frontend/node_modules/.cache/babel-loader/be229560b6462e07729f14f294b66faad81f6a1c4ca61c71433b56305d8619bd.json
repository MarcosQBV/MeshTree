{"ast":null,"code":"var _jsxFileName = \"D:\\\\code\\\\MeshTree\\\\frontend\\\\src\\\\GraphWrapper.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { SigmaContainer, useSigma } from '@react-sigma/core';\nimport Graph from 'graphology';\n\n// Define the central node\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst centralNode = {\n  id: 'Root',\n  label: 'Root'\n};\nconst centralNodeId = centralNode.id;\nasync function fetchDataForKey(key) {\n  const baseUrl = 'http://localhost:5000';\n  const url = `${baseUrl}/get/${key}`;\n  try {\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    throw error; // Re-throw the error for further handling if needed\n  }\n}\nfunction defineEdges(data) {\n  const edges = [];\n\n  // Create edges from children to 'Root'\n  data.children.forEach(childId => {\n    edges.push({\n      source: childId,\n      target: centralNodeId\n    });\n  });\n\n  // Create edges from 'Root' to parents\n  data.parents.forEach(parentId => {\n    edges.push({\n      source: centralNodeId,\n      target: parentId\n    });\n  });\n  return edges;\n}\nconst GraphComponent = () => {\n  _s();\n  const sigma = useSigma();\n  const containerRef = useRef(null);\n  const [parentNodes, setParentNodes] = useState([]);\n  const [childNodes, setChildNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  useEffect(() => {\n    fetchDataForKey(centralNodeId).then(data => {\n      // Transform the response data into the desired format for parentNodes and childNodes\n      const parents = data.parents.map(id => ({\n        id: id,\n        label: id // Using the ID as the label for now\n      }));\n      const children = data.children.map(id => ({\n        id: id,\n        label: id // Using the ID as the label for now\n      }));\n      setParentNodes(parents);\n      setChildNodes(children);\n      setEdges(defineEdges(data));\n    }).catch(error => {\n      console.error('Error:', error);\n    });\n  }, []);\n  useEffect(() => {\n    if (sigma && parentNodes.length > 0 && childNodes.length > 0 && edges.length > 0) {\n      const graph = new Graph();\n      console.log('Parent Nodes:', parentNodes);\n      console.log('Child Nodes:', childNodes);\n      console.log('Edges:', edges);\n\n      // Add central node\n      graph.addNode(centralNode.id, {\n        label: centralNode.label,\n        size: 20,\n        color: 'black'\n      });\n\n      // Add parent nodes\n      parentNodes.forEach(node => {\n        graph.addNode(node.id, {\n          label: node.label,\n          size: 20,\n          color: 'black'\n        });\n      });\n\n      // Add child nodes\n      childNodes.forEach(node => {\n        graph.addNode(node.id, {\n          label: node.label,\n          size: 20,\n          color: 'black'\n        });\n      });\n\n      // Add edges\n      edges.forEach(edge => {\n        graph.addEdge(edge.source, edge.target);\n      });\n\n      // Central node position\n      const centerX = 0;\n      const centerY = 0;\n      graph.setNodeAttribute(centralNode.id, 'x', centerX);\n      graph.setNodeAttribute(centralNode.id, 'y', centerY);\n\n      // Parent nodes (behind n1)\n      const parentAngleSpread = Math.PI / 2;\n      const parentRadius = 100;\n      const parentStartAngle = 3 * Math.PI / 4;\n      parentNodes.forEach((node, index) => {\n        const angle = parentStartAngle + index * parentAngleSpread / (parentNodes.length - 1);\n        const x = centerX + parentRadius * Math.cos(angle);\n        const y = centerY + parentRadius * Math.sin(angle);\n        graph.setNodeAttribute(node.id, 'x', x);\n        graph.setNodeAttribute(node.id, 'y', y);\n      });\n\n      // Child nodes (in front of n1)\n      const childAngleSpread = Math.PI / 2;\n      const childRadius = 100;\n      const childStartAngle = 7 * Math.PI / 4;\n      childNodes.forEach((node, index) => {\n        const angle = childStartAngle + index * childAngleSpread / (childNodes.length - 1);\n        const x = centerX + childRadius * Math.cos(angle);\n        const y = centerY + childRadius * Math.sin(angle);\n        graph.setNodeAttribute(node.id, 'x', x);\n        graph.setNodeAttribute(node.id, 'y', y);\n      });\n      sigma.setGraph(graph);\n      sigma.refresh();\n    }\n  }, [sigma, parentNodes, childNodes, edges]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 10\n  }, this);\n};\n_s(GraphComponent, \"nWq1LwWbAecWL880NhzA+qiHDgU=\", false, function () {\n  return [useSigma];\n});\n_c = GraphComponent;\nconst GraphWrapper = () => /*#__PURE__*/_jsxDEV(SigmaContainer, {\n  children: /*#__PURE__*/_jsxDEV(GraphComponent, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 155,\n  columnNumber: 3\n}, this);\n_c2 = GraphWrapper;\nexport default GraphWrapper;\nvar _c, _c2;\n$RefreshReg$(_c, \"GraphComponent\");\n$RefreshReg$(_c2, \"GraphWrapper\");","map":{"version":3,"names":["React","useEffect","useRef","useState","SigmaContainer","useSigma","Graph","jsxDEV","_jsxDEV","centralNode","id","label","centralNodeId","fetchDataForKey","key","baseUrl","url","response","fetch","ok","Error","status","data","json","error","console","defineEdges","edges","children","forEach","childId","push","source","target","parents","parentId","GraphComponent","_s","sigma","containerRef","parentNodes","setParentNodes","childNodes","setChildNodes","setEdges","then","map","catch","length","graph","log","addNode","size","color","node","edge","addEdge","centerX","centerY","setNodeAttribute","parentAngleSpread","Math","PI","parentRadius","parentStartAngle","index","angle","x","cos","y","sin","childAngleSpread","childRadius","childStartAngle","setGraph","refresh","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","GraphWrapper","_c2","$RefreshReg$"],"sources":["D:/code/MeshTree/frontend/src/GraphWrapper.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport { SigmaContainer, useSigma } from '@react-sigma/core';\r\nimport Graph from 'graphology';\r\n\r\n// Define the central node\r\nconst centralNode = { id: 'Root', label: 'Root' };\r\n\r\nconst centralNodeId = centralNode.id;\r\n\r\nasync function fetchDataForKey(key) {\r\n  const baseUrl = 'http://localhost:5000';\r\n  const url = `${baseUrl}/get/${key}`;\r\n\r\n  try {\r\n    const response = await fetch(url);\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! Status: ${response.status}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error fetching data:', error);\r\n    throw error; // Re-throw the error for further handling if needed\r\n  }\r\n}\r\n\r\nfunction defineEdges(data) {\r\n  const edges = [];\r\n\r\n  // Create edges from children to 'Root'\r\n  data.children.forEach((childId) => {\r\n    edges.push({ source: childId, target: centralNodeId });\r\n  });\r\n\r\n  // Create edges from 'Root' to parents\r\n  data.parents.forEach((parentId) => {\r\n    edges.push({ source: centralNodeId, target: parentId });\r\n  });\r\n\r\n  return edges;\r\n}\r\n\r\nconst GraphComponent = () => {\r\n  const sigma = useSigma();\r\n  const containerRef = useRef(null);\r\n  const [parentNodes, setParentNodes] = useState([]);\r\n  const [childNodes, setChildNodes] = useState([]);\r\n  const [edges, setEdges] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchDataForKey(centralNodeId)\r\n      .then((data) => {\r\n        // Transform the response data into the desired format for parentNodes and childNodes\r\n        const parents = data.parents.map((id) => ({\r\n          id: id,\r\n          label: id // Using the ID as the label for now\r\n        }));\r\n\r\n        const children = data.children.map((id) => ({\r\n          id: id,\r\n          label: id // Using the ID as the label for now\r\n        }));\r\n\r\n        setParentNodes(parents);\r\n        setChildNodes(children);\r\n        setEdges(defineEdges(data));\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error:', error);\r\n      });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (sigma && parentNodes.length > 0 && childNodes.length > 0 && edges.length > 0) {\r\n      const graph = new Graph();\r\n\r\n      console.log('Parent Nodes:', parentNodes);\r\n      console.log('Child Nodes:', childNodes);\r\n      console.log('Edges:', edges);\r\n      \r\n      \r\n      // Add central node\r\n      graph.addNode(centralNode.id, {\r\n        label: centralNode.label,\r\n        size: 20,\r\n        color: 'black'\r\n      });\r\n\r\n      // Add parent nodes\r\n      parentNodes.forEach(node => {\r\n        graph.addNode(node.id, {\r\n          label: node.label,\r\n          size: 20,\r\n          color: 'black'\r\n        });\r\n      });\r\n\r\n      // Add child nodes\r\n      childNodes.forEach(node => {\r\n        graph.addNode(node.id, {\r\n          label: node.label,\r\n          size: 20,\r\n          color: 'black'\r\n        });\r\n      });\r\n\r\n      // Add edges\r\n      edges.forEach(edge => {\r\n        graph.addEdge(edge.source, edge.target);\r\n      });\r\n\r\n      // Central node position\r\n      const centerX = 0;\r\n      const centerY = 0;\r\n      graph.setNodeAttribute(centralNode.id, 'x', centerX);\r\n      graph.setNodeAttribute(centralNode.id, 'y', centerY);\r\n\r\n      // Parent nodes (behind n1)\r\n      const parentAngleSpread = Math.PI / 2; \r\n      const parentRadius = 100; \r\n      const parentStartAngle = 3 * Math.PI / 4; \r\n\r\n      parentNodes.forEach((node, index) => {\r\n        const angle = parentStartAngle + (index * parentAngleSpread) / (parentNodes.length - 1);\r\n        const x = centerX + parentRadius * Math.cos(angle);\r\n        const y = centerY + parentRadius * Math.sin(angle);\r\n        graph.setNodeAttribute(node.id, 'x', x);\r\n        graph.setNodeAttribute(node.id, 'y', y);\r\n      });\r\n\r\n      // Child nodes (in front of n1)\r\n      const childAngleSpread = Math.PI / 2; \r\n      const childRadius = 100; \r\n      const childStartAngle = 7 * Math.PI / 4;\r\n\r\n      childNodes.forEach((node, index) => {\r\n        const angle = childStartAngle + (index * childAngleSpread) / (childNodes.length - 1);\r\n        const x = centerX + childRadius * Math.cos(angle);\r\n        const y = centerY + childRadius * Math.sin(angle);\r\n        graph.setNodeAttribute(node.id, 'x', x);\r\n        graph.setNodeAttribute(node.id, 'y', y);\r\n      });\r\n\r\n      sigma.setGraph(graph);\r\n      sigma.refresh();\r\n    }\r\n  }, [sigma, parentNodes, childNodes, edges]);\r\n\r\n  return <div ref={containerRef} />;\r\n};\r\n\r\nconst GraphWrapper = () => (\r\n  <SigmaContainer>\r\n    <GraphComponent />\r\n  </SigmaContainer>\r\n);\r\n\r\nexport default GraphWrapper;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}