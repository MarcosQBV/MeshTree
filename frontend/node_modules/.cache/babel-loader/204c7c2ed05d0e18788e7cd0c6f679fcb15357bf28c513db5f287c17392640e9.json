{"ast":null,"code":"var _jsxFileName = \"D:\\\\code\\\\MeshTree\\\\frontend\\\\src\\\\GraphWrapper2.jsx\",\n  _s2 = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { SigmaContainer, useSigma } from '@react-sigma/core';\nimport Graph from 'graphology';\nimport forceAtlas2, { ForceAtlas2SynchronousLayoutParameters } from \"graphology-layout-forceatlas2\";\nimport { useLayoutFactory } from \"@react-sigma/layout-core\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nasync function fetchDataForKey(key) {\n  const baseUrl = 'http://localhost:5000';\n  const url = `${baseUrl}/get/${key}`;\n  try {\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    throw error;\n  }\n}\n;\nasync function getNodeData(nodeID) {\n  try {\n    const data = await fetchDataForKey(nodeID);\n    const center = data.center.map(({\n      id,\n      label,\n      scopenote\n    }) => ({\n      id: id,\n      label: label,\n      scopenote: scopenote\n    }));\n    const parents = data.parents.map(({\n      id,\n      label,\n      scopenote\n    }) => ({\n      id: id,\n      label: label,\n      scopenote: scopenote\n    }));\n    const children = data.children.map(({\n      id,\n      label,\n      scopenote\n    }) => ({\n      id: id,\n      label: label,\n      scopenote: scopenote\n    }));\n    return {\n      center,\n      parents,\n      children\n    };\n  } catch (error) {\n    console.error('Error fetching node data:', error);\n    throw error; // Re-throw the error if you want to handle it further up the call stack\n  }\n}\nfunction defineEdges(data) {\n  const centralNodeId = data.center.id;\n  const edges = [];\n  data.children.forEach(child => {\n    edges.push({\n      source: centralNodeId,\n      target: child.id\n    });\n  });\n  data.parents.forEach(parent => {\n    edges.push({\n      source: parent.id,\n      target: centralNodeId\n    });\n  });\n  return edges;\n}\nconst GraphComponent = () => {\n  _s2();\n  var _s = $RefreshSig$();\n  const sigma = useSigma();\n  const containerRef = useRef(null);\n  _s(useEffect(_s(() => {\n    _s();\n    const [centralNode, setCentralNode] = useState();\n    const [parentNodes, setParentNodes] = useState([]);\n    const [childNodes, setChildNodes] = useState([]);\n    const graph = new Graph();\n    let treeToBuild = getNodeData(rootID);\n    async function addNodesAndEdgesWithDelay(nodes, graph, parentX, parentY, startAngle, angleSpread, radius, edges, level) {\n      for (const [index, node] of nodes.entries()) {\n        if (collapsedNodes.has(node.id)) continue; // Skip adding collapsed nodes\n\n        const angle = startAngle + index * angleSpread / Math.max(1, nodes.length - 1);\n        const x = parentX + radius * Math.cos(angle);\n        const y = parentY + radius * Math.sin(angle);\n        if (!graph.hasNode(node.id)) {\n          graph.addNode(node.id, {\n            label: node.label,\n            size: 20,\n            color: 'black',\n            className: 'fade-in',\n            // Apply the fade-in class\n            x: x,\n            y: y\n          });\n\n          // Add node level information\n          setNodeLevel(prevNodeLevel => [...prevNodeLevel, {\n            id: node.id,\n            label: node.label,\n            level: level\n          }]);\n        }\n        await sleep(100); // Wait for 200ms\n\n        // Add edges related to this node\n        edges.forEach(edge => {\n          if ((edge.source === node.id || edge.target === node.id) && !collapsedNodes.has(edge.source) && !collapsedNodes.has(edge.target)) {\n            if (!graph.hasEdge(edge.source, edge.target)) {\n              try {\n                graph.addEdge(edge.source, edge.target);\n              } catch (error) {\n                console.warn(`Failed to add edge from ${edge.source} to ${edge.target}:`, error);\n              }\n            }\n          }\n        });\n        await sleep(50); // Wait for 100ms before adding the next edge\n      }\n    }\n\n    // Add parent nodes and edges with delay\n    const childAngleSpread = Math.PI;\n    const childRadius = 100;\n    const childStartAngle = 3 * Math.PI / 2;\n    addNodesAndEdgesWithDelay(parentNodes, graph, centerX, centerY, parentStartAngle, parentAngleSpread, parentRadius, edges, 1);\n  }, \"tLKQmhkQYfi7vtgKx8WjmZFnIG4=\"), [sigma]), \"tLKQmhkQYfi7vtgKx8WjmZFnIG4=\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 10\n  }, this);\n};\n_s2(GraphComponent, \"R0bJCO5eGdK7ZLFJaGp7Ix0qrBw=\", false, function () {\n  return [useSigma];\n});\n_c = GraphComponent;\nconst GraphWrapper = () => /*#__PURE__*/_jsxDEV(SigmaContainer, {\n  children: /*#__PURE__*/_jsxDEV(GraphComponent, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 7\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 131,\n  columnNumber: 5\n}, this);\n_c2 = GraphWrapper;\nexport default GraphWrapper;\nvar _c, _c2;\n$RefreshReg$(_c, \"GraphComponent\");\n$RefreshReg$(_c2, \"GraphWrapper\");","map":{"version":3,"names":["React","useEffect","useRef","useState","SigmaContainer","useSigma","Graph","forceAtlas2","ForceAtlas2SynchronousLayoutParameters","useLayoutFactory","jsxDEV","_jsxDEV","fetchDataForKey","key","baseUrl","url","response","fetch","ok","Error","status","data","json","error","console","getNodeData","nodeID","center","map","id","label","scopenote","parents","children","defineEdges","centralNodeId","edges","forEach","child","push","source","target","parent","GraphComponent","_s2","_s","$RefreshSig$","sigma","containerRef","centralNode","setCentralNode","parentNodes","setParentNodes","childNodes","setChildNodes","graph","treeToBuild","rootID","addNodesAndEdgesWithDelay","nodes","parentX","parentY","startAngle","angleSpread","radius","level","index","node","entries","collapsedNodes","has","angle","Math","max","length","x","cos","y","sin","hasNode","addNode","size","color","className","setNodeLevel","prevNodeLevel","sleep","edge","hasEdge","addEdge","warn","childAngleSpread","PI","childRadius","childStartAngle","centerX","centerY","parentStartAngle","parentAngleSpread","parentRadius","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","GraphWrapper","_c2","$RefreshReg$"],"sources":["D:/code/MeshTree/frontend/src/GraphWrapper2.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport { SigmaContainer, useSigma } from '@react-sigma/core';\r\nimport Graph from 'graphology';\r\nimport forceAtlas2, { ForceAtlas2SynchronousLayoutParameters } from \"graphology-layout-forceatlas2\";\r\nimport { useLayoutFactory } from \"@react-sigma/layout-core\";\r\n\r\nasync function fetchDataForKey(key) {\r\n  const baseUrl = 'http://localhost:5000';\r\n  const url = `${baseUrl}/get/${key}`;\r\n\r\n  try {\r\n    const response = await fetch(url);\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! Status: ${response.status}`);\r\n    }\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error fetching data:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nasync function getNodeData(nodeID) {\r\n  try {\r\n    const data = await fetchDataForKey(nodeID);\r\n\r\n    const center = data.center.map(({ id, label, scopenote }) => ({\r\n      id: id,\r\n      label: label,\r\n      scopenote: scopenote\r\n    }));\r\n\r\n    const parents = data.parents.map(({ id, label, scopenote }) => ({\r\n      id: id,\r\n      label: label,\r\n      scopenote: scopenote\r\n    }));\r\n\r\n    const children = data.children.map(({ id, label, scopenote }) => ({\r\n      id: id,\r\n      label: label,\r\n      scopenote: scopenote\r\n    }));\r\n\r\n    return { center, parents, children };\r\n  } catch (error) {\r\n    console.error('Error fetching node data:', error);\r\n    throw error; // Re-throw the error if you want to handle it further up the call stack\r\n  }\r\n}\r\n\r\nfunction defineEdges(data) {\r\n  const centralNodeId = data.center.id\r\n  const edges = [];\r\n  data.children.forEach((child) => {\r\n    edges.push({ source: centralNodeId, target: child.id });\r\n  });\r\n  data.parents.forEach((parent) => {\r\n    edges.push({ source: parent.id, target: centralNodeId });\r\n  });\r\n  return edges;\r\n}\r\n\r\n\r\nconst GraphComponent = () => {\r\n  const sigma = useSigma();\r\n  const containerRef = useRef(null);\r\n\r\n  useEffect(() =>{\r\n    const [centralNode, setCentralNode] = useState();\r\n    const [parentNodes, setParentNodes] = useState([]);\r\n    const [childNodes, setChildNodes] = useState([]);\r\n    const graph = new Graph();\r\n\r\n    let treeToBuild = getNodeData(rootID);\r\n\r\n    async function addNodesAndEdgesWithDelay(nodes, graph, parentX, parentY, startAngle, angleSpread, radius, edges, level) {\r\n      for (const [index, node] of nodes.entries()) {\r\n        if (collapsedNodes.has(node.id)) continue; // Skip adding collapsed nodes\r\n  \r\n        const angle = startAngle + (index * angleSpread) / Math.max(1, nodes.length - 1);\r\n        const x = parentX + radius * Math.cos(angle);\r\n        const y = parentY + radius * Math.sin(angle);\r\n        if (!graph.hasNode(node.id)) {\r\n          graph.addNode(node.id, {\r\n            label: node.label,\r\n            size: 20,\r\n            color: 'black',\r\n            className: 'fade-in', // Apply the fade-in class\r\n            x: x,\r\n            y: y\r\n          });\r\n  \r\n          // Add node level information\r\n          setNodeLevel((prevNodeLevel) => [\r\n            ...prevNodeLevel,\r\n            { id: node.id, label: node.label, level: level }\r\n          ]);\r\n        }\r\n        await sleep(100); // Wait for 200ms\r\n  \r\n        // Add edges related to this node\r\n        edges.forEach(edge => {\r\n          if ((edge.source === node.id || edge.target === node.id) && !collapsedNodes.has(edge.source) && !collapsedNodes.has(edge.target)) {\r\n            if (!graph.hasEdge(edge.source, edge.target)) {\r\n              try {\r\n                graph.addEdge(edge.source, edge.target);\r\n              } catch (error) {\r\n                console.warn(`Failed to add edge from ${edge.source} to ${edge.target}:`, error);\r\n              }\r\n            }\r\n          }\r\n        });\r\n        await sleep(50); // Wait for 100ms before adding the next edge\r\n      }\r\n    }\r\n\r\n    // Add parent nodes and edges with delay\r\n    const childAngleSpread = Math.PI;\r\n    const childRadius = 100;\r\n    const childStartAngle = 3 * Math.PI / 2;\r\n    addNodesAndEdgesWithDelay(parentNodes, graph, centerX, centerY, parentStartAngle, parentAngleSpread, parentRadius, edges, 1);\r\n  \r\n  }, [sigma]);\r\n  return <div ref={containerRef}  />\r\n}\r\n\r\n\r\nconst GraphWrapper = () => (\r\n    <SigmaContainer>\r\n      <GraphComponent />\r\n    </SigmaContainer>\r\n  );\r\n  \r\nexport default GraphWrapper;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}