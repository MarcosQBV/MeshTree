{"ast":null,"code":"var _jsxFileName = \"D:\\\\code\\\\MeshTree\\\\frontend\\\\src\\\\GraphWrapper.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { SigmaContainer, useSigma } from '@react-sigma/core';\nimport Graph from 'graphology';\n\n// CSS for fade-in effect\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst fadeInStyle = `\n  .fade-in {\n    opacity: 0;\n    animation: fadeIn 1s forwards;\n  }\n\n  @keyframes fadeIn {\n    to {\n      opacity: 1;\n    }\n  }\n`;\n\n// Inject the CSS into the document\nconst styleSheet = document.createElement(\"style\");\nstyleSheet.type = \"text/css\";\nstyleSheet.innerText = fadeInStyle;\ndocument.head.appendChild(styleSheet);\nasync function fetchDataForKey(key) {\n  const baseUrl = 'http://localhost:5000';\n  const url = `${baseUrl}/get/${key}`;\n  try {\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    throw error;\n  }\n}\nfunction defineEdges(data, centralNodeId) {\n  const edges = [];\n  data.children.forEach(child => {\n    edges.push({\n      source: child.id,\n      target: centralNodeId\n    });\n  });\n  data.parents.forEach(parent => {\n    edges.push({\n      source: centralNodeId,\n      target: parent.id\n    });\n  });\n  return edges;\n}\nconst GraphComponent = () => {\n  _s();\n  let centralNodeLabel = 'Root';\n  const sigma = useSigma();\n  const containerRef = useRef(null);\n  const [centralNode, setCentralNode] = useState({\n    id: 'Root',\n    label: 'Root'\n  });\n  const [parentNodes, setParentNodes] = useState([]);\n  const [childNodes, setChildNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n\n  // Function to get the label by node ID\n  function getNodeLabelById(nodeId, nodes) {\n    const node = nodes.find(node => node.id === nodeId);\n    return node ? node.label : null;\n  }\n\n  // Function to handle node clicks\n  const handleNodeClick = nodeId => {\n    centralNodeLabel = getNodeLabelById(nodeId, [...parentNodes, ...childNodes]);\n    setCentralNode({\n      id: nodeId,\n      label: centralNodeLabel\n    });\n  };\n\n  // Function to add nodes and edges with a delay\n  async function addNodesAndEdgesWithDelay(nodes, graph, centerX, centerY, startAngle, angleSpread, radius, edges) {\n    for (const [index, node] of nodes.entries()) {\n      const angle = startAngle + index * angleSpread / Math.max(1, nodes.length - 1);\n      const x = centerX + radius * Math.cos(angle);\n      const y = centerY + radius * Math.sin(angle);\n      if (!graph.hasNode(node.id)) {\n        graph.addNode(node.id, {\n          label: node.label,\n          size: 20,\n          color: 'black',\n          className: 'fade-in',\n          // Apply the fade-in class\n          x: x,\n          y: y\n        });\n      }\n      await sleep(100); // Wait for 200ms\n\n      // Add edges related to this node\n      edges.forEach(edge => {\n        if (edge.source === node.id || edge.target === node.id) {\n          if (!graph.hasEdge(edge.source, edge.target)) {\n            try {\n              graph.addEdge(edge.source, edge.target);\n            } catch (error) {\n              console.warn(`Failed to add edge from ${edge.source} to ${edge.target}:`, error);\n            }\n          }\n        }\n      });\n      await sleep(100); // Wait for 100ms before adding the next edge\n    }\n  }\n\n  // Sleep function to pause execution\n  function sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  // Effect to fetch data when central node changes\n  useEffect(() => {\n    if (!centralNode.id) return; // Ensure there's an ID\n\n    fetchDataForKey(centralNode.id).then(data => {\n      const parents = data.parents.map(({\n        id,\n        label\n      }) => ({\n        id: id,\n        label: label\n      }));\n      const children = data.children.map(({\n        id,\n        label\n      }) => ({\n        id: id,\n        label: label\n      }));\n      setParentNodes(parents);\n      setChildNodes(children);\n      setEdges(defineEdges(data, centralNode.id));\n    }).catch(error => {\n      console.error('Error:', error);\n    });\n  }, [centralNode.id]);\n\n  // Effect to update graph visualization\n  useEffect(() => {\n    // Create a new graph instance\n    const graph = new Graph();\n\n    // Add central node\n    const centerX = 0;\n    const centerY = 0;\n    if (!graph.hasNode(centralNode.id)) {\n      graph.addNode(centralNode.id, {\n        label: centralNode.label,\n        size: 20,\n        color: 'black',\n        className: 'fade-in',\n        // Apply the fade-in class\n        x: centerX,\n        y: centerY\n      });\n    }\n\n    // Add parent nodes and edges with delay\n    const parentAngleSpread = Math.PI / 2;\n    const parentRadius = 100;\n    const parentStartAngle = 3 * Math.PI / 4;\n    addNodesAndEdgesWithDelay(parentNodes, graph, centerX, centerY, parentStartAngle, parentAngleSpread, parentRadius, edges);\n\n    // Add child nodes and edges with delay\n    const childAngleSpread = Math.PI / 2;\n    const childRadius = 100;\n    const childStartAngle = 7 * Math.PI / 4;\n    addNodesAndEdgesWithDelay(childNodes, graph, centerX, centerY, childStartAngle, childAngleSpread, childRadius, edges);\n\n    // Clear any existing click handlers\n    sigma.removeAllListeners('clickNode');\n\n    // Set up click handler\n    sigma.on('clickNode', event => {\n      handleNodeClick(event.node);\n    });\n\n    // Clear the existing graph and set the new one\n    sigma.setGraph(graph);\n    sigma.refresh();\n\n    // Cleanup function\n    return () => {\n      sigma.removeAllListeners('clickNode');\n    };\n  }, [sigma, parentNodes, childNodes, edges, centralNode]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 187,\n    columnNumber: 10\n  }, this);\n};\n_s(GraphComponent, \"NQWZC7YoEduyd2FbZQxQAMRV8/s=\", false, function () {\n  return [useSigma];\n});\n_c = GraphComponent;\nconst GraphWrapper = () => /*#__PURE__*/_jsxDEV(SigmaContainer, {\n  children: /*#__PURE__*/_jsxDEV(GraphComponent, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 192,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 191,\n  columnNumber: 3\n}, this);\n_c2 = GraphWrapper;\nexport default GraphWrapper;\nvar _c, _c2;\n$RefreshReg$(_c, \"GraphComponent\");\n$RefreshReg$(_c2, \"GraphWrapper\");","map":{"version":3,"names":["React","useEffect","useRef","useState","SigmaContainer","useSigma","Graph","jsxDEV","_jsxDEV","fadeInStyle","styleSheet","document","createElement","type","innerText","head","appendChild","fetchDataForKey","key","baseUrl","url","response","fetch","ok","Error","status","data","json","error","console","defineEdges","centralNodeId","edges","children","forEach","child","push","source","id","target","parents","parent","GraphComponent","_s","centralNodeLabel","sigma","containerRef","centralNode","setCentralNode","label","parentNodes","setParentNodes","childNodes","setChildNodes","setEdges","getNodeLabelById","nodeId","nodes","node","find","handleNodeClick","addNodesAndEdgesWithDelay","graph","centerX","centerY","startAngle","angleSpread","radius","index","entries","angle","Math","max","length","x","cos","y","sin","hasNode","addNode","size","color","className","sleep","edge","hasEdge","addEdge","warn","ms","Promise","resolve","setTimeout","then","map","catch","parentAngleSpread","PI","parentRadius","parentStartAngle","childAngleSpread","childRadius","childStartAngle","removeAllListeners","on","event","setGraph","refresh","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","GraphWrapper","_c2","$RefreshReg$"],"sources":["D:/code/MeshTree/frontend/src/GraphWrapper.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport { SigmaContainer, useSigma } from '@react-sigma/core';\r\nimport Graph from 'graphology';\r\n\r\n// CSS for fade-in effect\r\nconst fadeInStyle = `\r\n  .fade-in {\r\n    opacity: 0;\r\n    animation: fadeIn 1s forwards;\r\n  }\r\n\r\n  @keyframes fadeIn {\r\n    to {\r\n      opacity: 1;\r\n    }\r\n  }\r\n`;\r\n\r\n// Inject the CSS into the document\r\nconst styleSheet = document.createElement(\"style\");\r\nstyleSheet.type = \"text/css\";\r\nstyleSheet.innerText = fadeInStyle;\r\ndocument.head.appendChild(styleSheet);\r\n\r\nasync function fetchDataForKey(key) {\r\n  const baseUrl = 'http://localhost:5000';\r\n  const url = `${baseUrl}/get/${key}`;\r\n\r\n  try {\r\n    const response = await fetch(url);\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! Status: ${response.status}`);\r\n    }\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error fetching data:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nfunction defineEdges(data, centralNodeId) {\r\n  const edges = [];\r\n  data.children.forEach((child) => {\r\n    edges.push({ source: child.id, target: centralNodeId });\r\n  });\r\n  data.parents.forEach((parent) => {\r\n    edges.push({ source: centralNodeId, target: parent.id });\r\n  });\r\n  return edges;\r\n}\r\n\r\nconst GraphComponent = () => {\r\n  let centralNodeLabel = 'Root';\r\n  const sigma = useSigma();\r\n  const containerRef = useRef(null);\r\n  const [centralNode, setCentralNode] = useState({ id: 'Root', label: 'Root' });\r\n  const [parentNodes, setParentNodes] = useState([]);\r\n  const [childNodes, setChildNodes] = useState([]);\r\n  const [edges, setEdges] = useState([]);\r\n\r\n  // Function to get the label by node ID\r\n  function getNodeLabelById(nodeId, nodes) {\r\n    const node = nodes.find((node) => node.id === nodeId);\r\n    return node ? node.label : null;\r\n  }\r\n\r\n  // Function to handle node clicks\r\n  const handleNodeClick = (nodeId) => {\r\n    centralNodeLabel = getNodeLabelById(nodeId, [...parentNodes, ...childNodes]);\r\n    setCentralNode({ id: nodeId, label: centralNodeLabel });\r\n  };\r\n\r\n  // Function to add nodes and edges with a delay\r\n  async function addNodesAndEdgesWithDelay(nodes, graph, centerX, centerY, startAngle, angleSpread, radius, edges) {\r\n    for (const [index, node] of nodes.entries()) {\r\n      const angle = startAngle + (index * angleSpread) / Math.max(1, nodes.length - 1);\r\n      const x = centerX + radius * Math.cos(angle);\r\n      const y = centerY + radius * Math.sin(angle);\r\n      if (!graph.hasNode(node.id)) {\r\n        graph.addNode(node.id, {\r\n          label: node.label,\r\n          size: 20,\r\n          color: 'black',\r\n          className: 'fade-in', // Apply the fade-in class\r\n          x: x,\r\n          y: y\r\n        });\r\n      }\r\n      await sleep(100); // Wait for 200ms\r\n\r\n      // Add edges related to this node\r\n      edges.forEach(edge => {\r\n        if (edge.source === node.id || edge.target === node.id) {\r\n          if (!graph.hasEdge(edge.source, edge.target)) {\r\n            try {\r\n              graph.addEdge(edge.source, edge.target);\r\n            } catch (error) {\r\n              console.warn(`Failed to add edge from ${edge.source} to ${edge.target}:`, error);\r\n            }\r\n          }\r\n        }\r\n      });\r\n      await sleep(100); // Wait for 100ms before adding the next edge\r\n    }\r\n  }\r\n\r\n  // Sleep function to pause execution\r\n  function sleep(ms) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n  }\r\n\r\n  // Effect to fetch data when central node changes\r\n  useEffect(() => {\r\n    if (!centralNode.id) return; // Ensure there's an ID\r\n\r\n    fetchDataForKey(centralNode.id)\r\n      .then((data) => {\r\n        const parents = data.parents.map(({ id, label }) => ({\r\n          id: id,\r\n          label: label\r\n        }));\r\n\r\n        const children = data.children.map(({ id, label }) => ({\r\n          id: id,\r\n          label: label\r\n        }));\r\n\r\n        setParentNodes(parents);\r\n        setChildNodes(children);\r\n        setEdges(defineEdges(data, centralNode.id));\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error:', error);\r\n      });\r\n  }, [centralNode.id]);\r\n\r\n  // Effect to update graph visualization\r\n  useEffect(() => {\r\n    // Create a new graph instance\r\n    const graph = new Graph();\r\n\r\n    // Add central node\r\n    const centerX = 0;\r\n    const centerY = 0;\r\n    if (!graph.hasNode(centralNode.id)) {\r\n      graph.addNode(centralNode.id, {\r\n        label: centralNode.label,\r\n        size: 20,\r\n        color: 'black',\r\n        className: 'fade-in', // Apply the fade-in class\r\n        x: centerX,\r\n        y: centerY\r\n      });\r\n    }\r\n\r\n    // Add parent nodes and edges with delay\r\n    const parentAngleSpread = Math.PI / 2;\r\n    const parentRadius = 100;\r\n    const parentStartAngle = 3 * Math.PI / 4;\r\n    addNodesAndEdgesWithDelay(parentNodes, graph, centerX, centerY, parentStartAngle, parentAngleSpread, parentRadius, edges);\r\n\r\n    // Add child nodes and edges with delay\r\n    const childAngleSpread = Math.PI / 2;\r\n    const childRadius = 100;\r\n    const childStartAngle = 7 * Math.PI / 4;\r\n    addNodesAndEdgesWithDelay(childNodes, graph, centerX, centerY, childStartAngle, childAngleSpread, childRadius, edges);\r\n\r\n    // Clear any existing click handlers\r\n    sigma.removeAllListeners('clickNode');\r\n    \r\n    // Set up click handler\r\n    sigma.on('clickNode', (event) => {\r\n      handleNodeClick(event.node);\r\n    });\r\n\r\n    // Clear the existing graph and set the new one\r\n    sigma.setGraph(graph);\r\n    sigma.refresh();\r\n\r\n    // Cleanup function\r\n    return () => {\r\n      sigma.removeAllListeners('clickNode');\r\n    };\r\n  }, [sigma, parentNodes, childNodes, edges, centralNode]);\r\n\r\n  return <div ref={containerRef} />;\r\n};\r\n\r\nconst GraphWrapper = () => (\r\n  <SigmaContainer>\r\n    <GraphComponent />\r\n  </SigmaContainer>\r\n);\r\n\r\nexport default GraphWrapper;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}