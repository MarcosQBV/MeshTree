{"ast":null,"code":"var _jsxFileName = \"D:\\\\code\\\\MeshTree\\\\frontend\\\\src\\\\GraphWrapper.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { SigmaContainer, useSigma } from '@react-sigma/core';\nimport Graph from 'graphology';\n\n// Define separate lists for central, parent, and child nodes\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst centralNode = {\n  id: 'Root',\n  label: 'Root'\n};\nasync function fetchDataForKey(key) {\n  const baseUrl = 'http://localhost:5000';\n  const url = `${baseUrl}/get/${key}`;\n  try {\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    throw error; // Re-throw the error for further handling if needed\n  }\n}\nfunction defineEdges(data) {\n  const rootId = 'Root';\n  const edges = [];\n\n  // Create edges from children to 'Root'\n  data.children.forEach(childId => {\n    edges.push({\n      source: childId,\n      target: rootId\n    });\n  });\n\n  // Create edges from 'Root' to parents\n  data.parents.forEach(parentId => {\n    edges.push({\n      source: rootId,\n      target: parentId\n    });\n  });\n  return edges;\n}\n\n// Transform the response data into the desired format for parentNodes and childNodes\nconst parentNodes = data.parents.map(id => ({\n  id: id,\n  label: id // Using the ID as the label for now\n}));\nconst childNodes = data.children.map(id => ({\n  id: id,\n  label: id // Using the ID as the label for now\n}));\nconst edges = [{\n  source: 'n2',\n  target: 'Root'\n}, {\n  source: 'n3',\n  target: 'Root'\n}, {\n  source: 'n4',\n  target: 'Root'\n}, {\n  source: 'n5',\n  target: 'Root'\n}, {\n  source: 'Root',\n  target: 'n6'\n}, {\n  source: 'Root',\n  target: 'n7'\n}, {\n  source: 'Root',\n  target: 'n8'\n}, {\n  source: 'Root',\n  target: 'n9'\n}];\nconst GraphComponent = () => {\n  _s();\n  const sigma = useSigma();\n  const containerRef = useRef(null);\n  useEffect(() => {\n    const graph = new Graph();\n\n    // Add central node\n    graph.addNode(centralNode.id, {\n      label: centralNode.label,\n      size: 20,\n      color: 'black'\n    });\n\n    // Add parent nodes\n    parentNodes.forEach(node => {\n      graph.addNode(node.id, {\n        label: node.label,\n        size: 20,\n        color: 'black'\n      });\n    });\n\n    // Add child nodes\n    childNodes.forEach(node => {\n      graph.addNode(node.id, {\n        label: node.label,\n        size: 20,\n        color: 'black'\n      });\n    });\n\n    // Add edges\n    edges.forEach(edge => {\n      graph.addEdge(edge.source, edge.target);\n    });\n\n    // Central node position\n    const centerX = 0;\n    const centerY = 0;\n    graph.setNodeAttribute(centralNode.id, 'x', centerX);\n    graph.setNodeAttribute(centralNode.id, 'y', centerY);\n\n    // Parent nodes (behind n1)\n    const parentAngleSpread = Math.PI / 2;\n    const parentRadius = 100;\n    const parentStartAngle = 3 * Math.PI / 4;\n    parentNodes.forEach((node, index) => {\n      const angle = parentStartAngle + index * parentAngleSpread / (parentNodes.length - 1);\n      const x = centerX + parentRadius * Math.cos(angle);\n      const y = centerY + parentRadius * Math.sin(angle);\n      graph.setNodeAttribute(node.id, 'x', x);\n      graph.setNodeAttribute(node.id, 'y', y);\n    });\n\n    // Child nodes (in front of n1)\n    const childAngleSpread = Math.PI / 2;\n    const childRadius = 100;\n    const childStartAngle = 7 * Math.PI / 4;\n    childNodes.forEach((node, index) => {\n      const angle = childStartAngle + index * childAngleSpread / (childNodes.length - 1);\n      const x = centerX + childRadius * Math.cos(angle);\n      const y = centerY + childRadius * Math.sin(angle);\n      graph.setNodeAttribute(node.id, 'x', x);\n      graph.setNodeAttribute(node.id, 'y', y);\n    });\n    if (sigma) {\n      sigma.setGraph(graph);\n      sigma.refresh();\n    }\n  }, [sigma]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 10\n  }, this);\n};\n_s(GraphComponent, \"R0bJCO5eGdK7ZLFJaGp7Ix0qrBw=\", false, function () {\n  return [useSigma];\n});\n_c = GraphComponent;\nconst GraphWrapper = () => /*#__PURE__*/_jsxDEV(SigmaContainer, {\n  children: /*#__PURE__*/_jsxDEV(GraphComponent, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 145,\n  columnNumber: 3\n}, this);\n_c2 = GraphWrapper;\nexport default GraphWrapper;\nvar _c, _c2;\n$RefreshReg$(_c, \"GraphComponent\");\n$RefreshReg$(_c2, \"GraphWrapper\");","map":{"version":3,"names":["React","useEffect","useRef","SigmaContainer","useSigma","Graph","jsxDEV","_jsxDEV","centralNode","id","label","fetchDataForKey","key","baseUrl","url","response","fetch","ok","Error","status","data","json","error","console","defineEdges","rootId","edges","children","forEach","childId","push","source","target","parents","parentId","parentNodes","map","childNodes","GraphComponent","_s","sigma","containerRef","graph","addNode","size","color","node","edge","addEdge","centerX","centerY","setNodeAttribute","parentAngleSpread","Math","PI","parentRadius","parentStartAngle","index","angle","length","x","cos","y","sin","childAngleSpread","childRadius","childStartAngle","setGraph","refresh","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","GraphWrapper","_c2","$RefreshReg$"],"sources":["D:/code/MeshTree/frontend/src/GraphWrapper.jsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport { SigmaContainer, useSigma } from '@react-sigma/core';\r\nimport Graph from 'graphology';\r\n\r\n// Define separate lists for central, parent, and child nodes\r\nconst centralNode = { id: 'Root', label: 'Root' };\r\n\r\nasync function fetchDataForKey(key) {\r\n  const baseUrl = 'http://localhost:5000';\r\n  const url = `${baseUrl}/get/${key}`;\r\n\r\n  try {\r\n    const response = await fetch(url);\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! Status: ${response.status}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error fetching data:', error);\r\n    throw error; // Re-throw the error for further handling if needed\r\n  }\r\n}\r\n\r\nfunction defineEdges(data) {\r\n  const rootId = 'Root';\r\n  const edges = [];\r\n\r\n  // Create edges from children to 'Root'\r\n  data.children.forEach((childId) => {\r\n    edges.push({ source: childId, target: rootId });\r\n  });\r\n\r\n  // Create edges from 'Root' to parents\r\n  data.parents.forEach((parentId) => {\r\n    edges.push({ source: rootId, target: parentId });\r\n  });\r\n\r\n  return edges;\r\n}\r\n\r\n// Transform the response data into the desired format for parentNodes and childNodes\r\nconst parentNodes = data.parents.map((id) => ({\r\n  id: id,\r\n  label: id // Using the ID as the label for now\r\n}));\r\n\r\nconst childNodes = data.children.map((id) => ({\r\n  id: id,\r\n  label: id // Using the ID as the label for now\r\n}));\r\n\r\nconst edges = [\r\n  { source: 'n2', target: 'Root' },\r\n  { source: 'n3', target: 'Root' },\r\n  { source: 'n4', target: 'Root' },\r\n  { source: 'n5', target: 'Root' },\r\n  { source: 'Root', target: 'n6' },\r\n  { source: 'Root', target: 'n7' },\r\n  { source: 'Root', target: 'n8' },\r\n  { source: 'Root', target: 'n9' }\r\n];\r\n\r\nconst GraphComponent = () => {\r\n  const sigma = useSigma();\r\n  const containerRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const graph = new Graph();\r\n    \r\n    // Add central node\r\n    graph.addNode(centralNode.id, {\r\n      label: centralNode.label,\r\n      size: 20,\r\n      color: 'black'\r\n    });\r\n\r\n    // Add parent nodes\r\n    parentNodes.forEach(node => {\r\n      graph.addNode(node.id, {\r\n        label: node.label,\r\n        size: 20,\r\n        color: 'black'\r\n      });\r\n    });\r\n\r\n    // Add child nodes\r\n    childNodes.forEach(node => {\r\n      graph.addNode(node.id, {\r\n        label: node.label,\r\n        size: 20,\r\n        color: 'black'\r\n      });\r\n    });\r\n\r\n    // Add edges\r\n    edges.forEach(edge => {\r\n      graph.addEdge(edge.source, edge.target);\r\n    });\r\n\r\n    // Central node position\r\n    const centerX = 0;\r\n    const centerY = 0;\r\n    graph.setNodeAttribute(centralNode.id, 'x', centerX);\r\n    graph.setNodeAttribute(centralNode.id, 'y', centerY);\r\n\r\n    // Parent nodes (behind n1)\r\n    const parentAngleSpread = Math.PI / 2; \r\n    const parentRadius = 100; \r\n    const parentStartAngle = 3 * Math.PI / 4; \r\n\r\n    parentNodes.forEach((node, index) => {\r\n      const angle = parentStartAngle + (index * parentAngleSpread) / (parentNodes.length - 1);\r\n      const x = centerX + parentRadius * Math.cos(angle);\r\n      const y = centerY + parentRadius * Math.sin(angle);\r\n      graph.setNodeAttribute(node.id, 'x', x);\r\n      graph.setNodeAttribute(node.id, 'y', y);\r\n    });\r\n\r\n    // Child nodes (in front of n1)\r\n    const childAngleSpread = Math.PI / 2; \r\n    const childRadius = 100; \r\n    const childStartAngle = 7 * Math.PI / 4;\r\n\r\n    childNodes.forEach((node, index) => {\r\n      const angle = childStartAngle + (index * childAngleSpread) / (childNodes.length - 1);\r\n      const x = centerX + childRadius * Math.cos(angle);\r\n      const y = centerY + childRadius * Math.sin(angle);\r\n      graph.setNodeAttribute(node.id, 'x', x);\r\n      graph.setNodeAttribute(node.id, 'y', y);\r\n    });\r\n\r\n    if (sigma) {\r\n      sigma.setGraph(graph);\r\n      sigma.refresh();\r\n    }\r\n  }, [sigma]);\r\n\r\n  return <div ref={containerRef} />;\r\n};\r\n\r\nconst GraphWrapper = () => (\r\n  <SigmaContainer>\r\n    <GraphComponent />\r\n  </SigmaContainer>\r\n);\r\n\r\nexport default GraphWrapper;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}