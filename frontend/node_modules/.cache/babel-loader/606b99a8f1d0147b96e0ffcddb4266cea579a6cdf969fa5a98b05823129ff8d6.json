{"ast":null,"code":"var _jsxFileName = \"D:\\\\code\\\\MeshTree\\\\frontend\\\\src\\\\GraphWrapper.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { SigmaContainer, useSigma } from '@react-sigma/core';\nimport Graph from 'graphology';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nasync function fetchDataForKey(key) {\n  const baseUrl = 'http://localhost:5000';\n  const url = `${baseUrl}/get/${key}`;\n  try {\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    throw error;\n  }\n}\nfunction defineEdges(data, centralNodeId) {\n  const edges = [];\n  data.children.forEach(child => {\n    edges.push({\n      source: child.id,\n      target: centralNodeId\n    });\n  });\n  data.parents.forEach(parent => {\n    edges.push({\n      source: centralNodeId,\n      target: parent.id\n    });\n  });\n  return edges;\n}\nconst GraphComponent = () => {\n  _s();\n  let centralNodeLabel = 'Root';\n  const sigma = useSigma();\n  const containerRef = useRef(null);\n  const [centralNode, setCentralNode] = useState({\n    id: 'Root',\n    label: 'Root'\n  });\n  const [parentNodes, setParentNodes] = useState([]);\n  const [childNodes, setChildNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n\n  // Function to get the label by node ID\n  function getNodeLabelById(nodeId, nodes) {\n    const node = nodes.find(node => node.id === nodeId);\n    return node.label ? node.label : null;\n  }\n\n  // Function to handle node clicks\n  const handleNodeClick = nodeId => {\n    // Update centralNode with only the ID to ensure no label is passed\n    centralNodeLabel = getNodeLabelById(nodeId, [...parentNodes, ...childNodes]);\n    console.log(centralNodeLabel);\n    setCentralNode({\n      id: nodeId,\n      label: centralNodeLabel\n    });\n  };\n\n  // Effect to fetch data when central node changes\n  useEffect(() => {\n    if (!centralNode.id) return; // Ensure there's an ID\n\n    fetchDataForKey(centralNode.id).then(data => {\n      const parents = data.parents.map(({\n        id,\n        label\n      }) => ({\n        id: id,\n        label: label\n      }));\n      const children = data.children.map(({\n        id,\n        label\n      }) => ({\n        id: id,\n        label: label\n      }));\n      setParentNodes(parents);\n      setChildNodes(children);\n      setEdges(defineEdges(data, centralNode.id));\n    }).catch(error => {\n      console.error('Error:', error);\n    });\n  }, [centralNode.id]);\n\n  // Effect to update graph visualization\n  useEffect(() => {\n    // Create a new graph instance\n    const graph = new Graph();\n\n    // Add central node\n    graph.addNode(centralNode.id, {\n      label: centralNodeLabel,\n      size: 20,\n      color: 'black'\n    });\n\n    // Add parent nodes\n    parentNodes.forEach(node => {\n      if (!graph.hasNode(node.id)) {\n        // Check if node exists\n        graph.addNode(node.id, {\n          label: node.label,\n          size: 20,\n          color: 'black'\n        });\n      }\n    });\n\n    // Add child nodes\n    childNodes.forEach(node => {\n      if (!graph.hasNode(node.id)) {\n        // Check if node exists\n        graph.addNode(node.id, {\n          label: node.label,\n          size: 20,\n          color: 'black'\n        });\n      }\n    });\n\n    // Add edges\n    edges.forEach(edge => {\n      if (!graph.hasEdge(edge.source, edge.target)) {\n        // Check if edge exists\n        try {\n          graph.addEdge(edge.source, edge.target);\n        } catch (error) {\n          console.warn(`Failed to add edge from ${edge.source} to ${edge.target}:`, error);\n        }\n      }\n    });\n\n    // Position nodes\n    const centerX = 0;\n    const centerY = 0;\n    graph.setNodeAttribute(centralNode.id, 'x', centerX);\n    graph.setNodeAttribute(centralNode.id, 'y', centerY);\n\n    // Position parent nodes\n    const parentAngleSpread = Math.PI / 2;\n    const parentRadius = 100;\n    const parentStartAngle = 3 * Math.PI / 4;\n    parentNodes.forEach((node, index) => {\n      const angle = parentStartAngle + index * parentAngleSpread / Math.max(1, parentNodes.length - 1);\n      const x = centerX + parentRadius * Math.cos(angle);\n      const y = centerY + parentRadius * Math.sin(angle);\n      graph.setNodeAttribute(node.id, 'x', x);\n      graph.setNodeAttribute(node.id, 'y', y);\n    });\n\n    // Position child nodes\n    const childAngleSpread = Math.PI / 2;\n    const childRadius = 100;\n    const childStartAngle = 7 * Math.PI / 4;\n    childNodes.forEach((node, index) => {\n      const angle = childStartAngle + index * childAngleSpread / Math.max(1, childNodes.length - 1);\n      const x = centerX + childRadius * Math.cos(angle);\n      const y = centerY + childRadius * Math.sin(angle);\n      graph.setNodeAttribute(node.id, 'x', x);\n      graph.setNodeAttribute(node.id, 'y', y);\n    });\n\n    // Clear any existing click handlers\n    sigma.removeAllListeners('clickNode');\n\n    // Set up click handler\n    sigma.on('clickNode', event => {\n      handleNodeClick(event.node);\n    });\n\n    // Clear the existing graph and set the new one\n    sigma.setGraph(graph);\n    sigma.refresh();\n\n    // Cleanup function\n    return () => {\n      sigma.removeAllListeners('clickNode');\n    };\n  }, [sigma, parentNodes, childNodes, edges, centralNode]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 176,\n    columnNumber: 10\n  }, this);\n};\n_s(GraphComponent, \"NQWZC7YoEduyd2FbZQxQAMRV8/s=\", false, function () {\n  return [useSigma];\n});\n_c = GraphComponent;\nconst GraphWrapper = () => /*#__PURE__*/_jsxDEV(SigmaContainer, {\n  children: /*#__PURE__*/_jsxDEV(GraphComponent, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 180,\n  columnNumber: 3\n}, this);\n_c2 = GraphWrapper;\nexport default GraphWrapper;\nvar _c, _c2;\n$RefreshReg$(_c, \"GraphComponent\");\n$RefreshReg$(_c2, \"GraphWrapper\");","map":{"version":3,"names":["React","useEffect","useRef","useState","SigmaContainer","useSigma","Graph","jsxDEV","_jsxDEV","fetchDataForKey","key","baseUrl","url","response","fetch","ok","Error","status","data","json","error","console","defineEdges","centralNodeId","edges","children","forEach","child","push","source","id","target","parents","parent","GraphComponent","_s","centralNodeLabel","sigma","containerRef","centralNode","setCentralNode","label","parentNodes","setParentNodes","childNodes","setChildNodes","setEdges","getNodeLabelById","nodeId","nodes","node","find","handleNodeClick","log","then","map","catch","graph","addNode","size","color","hasNode","edge","hasEdge","addEdge","warn","centerX","centerY","setNodeAttribute","parentAngleSpread","Math","PI","parentRadius","parentStartAngle","index","angle","max","length","x","cos","y","sin","childAngleSpread","childRadius","childStartAngle","removeAllListeners","on","event","setGraph","refresh","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","GraphWrapper","_c2","$RefreshReg$"],"sources":["D:/code/MeshTree/frontend/src/GraphWrapper.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport { SigmaContainer, useSigma } from '@react-sigma/core';\r\nimport Graph from 'graphology';\r\n\r\nasync function fetchDataForKey(key) {\r\n  const baseUrl = 'http://localhost:5000';\r\n  const url = `${baseUrl}/get/${key}`;\r\n\r\n  try {\r\n    const response = await fetch(url);\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! Status: ${response.status}`);\r\n    }\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error fetching data:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nfunction defineEdges(data, centralNodeId) {\r\n  const edges = [];\r\n  data.children.forEach((child) => {\r\n    edges.push({ source: child.id, target: centralNodeId });\r\n  });\r\n  data.parents.forEach((parent) => {\r\n    edges.push({ source: centralNodeId, target: parent.id });\r\n  });\r\n  return edges;\r\n}\r\n\r\nconst GraphComponent = () => {\r\n  let centralNodeLabel = 'Root';\r\n  const sigma = useSigma();\r\n  const containerRef = useRef(null);\r\n  const [centralNode, setCentralNode] = useState({ id: 'Root', label: 'Root' });\r\n  const [parentNodes, setParentNodes] = useState([]);\r\n  const [childNodes, setChildNodes] = useState([]);\r\n  const [edges, setEdges] = useState([]);\r\n\r\n// Function to get the label by node ID\r\nfunction getNodeLabelById(nodeId, nodes) {\r\n  const node = nodes.find((node) => node.id === nodeId);\r\n  return node.label ? node.label : null;\r\n}\r\n\r\n  // Function to handle node clicks\r\n  const handleNodeClick = (nodeId) => {\r\n    // Update centralNode with only the ID to ensure no label is passed\r\n    centralNodeLabel = getNodeLabelById(nodeId, [...parentNodes, ...childNodes]);\r\n    console.log(centralNodeLabel);\r\n    setCentralNode({ id: nodeId, label : centralNodeLabel});\r\n  };\r\n\r\n  // Effect to fetch data when central node changes\r\n  useEffect(() => {\r\n    if (!centralNode.id) return; // Ensure there's an ID\r\n    \r\n    fetchDataForKey(centralNode.id)\r\n      .then((data) => {\r\n        const parents = data.parents.map(({ id, label }) => ({\r\n          id: id,\r\n          label: label\r\n        }));\r\n\r\n        const children = data.children.map(({id, label}) => ({\r\n          id: id,\r\n          label: label\r\n        }));\r\n\r\n        setParentNodes(parents);\r\n        setChildNodes(children);\r\n        setEdges(defineEdges(data, centralNode.id));\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error:', error);\r\n      });\r\n  }, [centralNode.id]);\r\n\r\n  // Effect to update graph visualization\r\n  useEffect(() => {\r\n    // Create a new graph instance\r\n    const graph = new Graph();\r\n    \r\n    // Add central node\r\n    graph.addNode(centralNode.id, {\r\n      label: centralNodeLabel,\r\n      size: 20,\r\n      color: 'black'\r\n    });\r\n\r\n    // Add parent nodes\r\n    parentNodes.forEach(node => {\r\n      if (!graph.hasNode(node.id)) {  // Check if node exists\r\n        graph.addNode(node.id, {\r\n          label: node.label,\r\n          size: 20,\r\n          color: 'black'\r\n        });\r\n      }\r\n    });\r\n\r\n    // Add child nodes\r\n    childNodes.forEach(node => {\r\n      if (!graph.hasNode(node.id)) {  // Check if node exists\r\n        graph.addNode(node.id, {\r\n          label: node.label,\r\n          size: 20,\r\n          color: 'black'\r\n        });\r\n      }\r\n    });\r\n\r\n    // Add edges\r\n    edges.forEach(edge => {\r\n      if (!graph.hasEdge(edge.source, edge.target)) {  // Check if edge exists\r\n        try {\r\n          graph.addEdge(edge.source, edge.target);\r\n        } catch (error) {\r\n          console.warn(`Failed to add edge from ${edge.source} to ${edge.target}:`, error);\r\n        }\r\n      }\r\n    });\r\n\r\n    // Position nodes\r\n    const centerX = 0;\r\n    const centerY = 0;\r\n    graph.setNodeAttribute(centralNode.id, 'x', centerX);\r\n    graph.setNodeAttribute(centralNode.id, 'y', centerY);\r\n\r\n    // Position parent nodes\r\n    const parentAngleSpread = Math.PI / 2;\r\n    const parentRadius = 100;\r\n    const parentStartAngle = 3 * Math.PI / 4;\r\n\r\n    parentNodes.forEach((node, index) => {\r\n      const angle = parentStartAngle + (index * parentAngleSpread) / Math.max(1, parentNodes.length - 1);\r\n      const x = centerX + parentRadius * Math.cos(angle);\r\n      const y = centerY + parentRadius * Math.sin(angle);\r\n      graph.setNodeAttribute(node.id, 'x', x);\r\n      graph.setNodeAttribute(node.id, 'y', y);\r\n    });\r\n\r\n    // Position child nodes\r\n    const childAngleSpread = Math.PI / 2;\r\n    const childRadius = 100;\r\n    const childStartAngle = 7 * Math.PI / 4;\r\n\r\n    childNodes.forEach((node, index) => {\r\n      const angle = childStartAngle + (index * childAngleSpread) / Math.max(1, childNodes.length - 1);\r\n      const x = centerX + childRadius * Math.cos(angle);\r\n      const y = centerY + childRadius * Math.sin(angle);\r\n      graph.setNodeAttribute(node.id, 'x', x);\r\n      graph.setNodeAttribute(node.id, 'y', y);\r\n    });\r\n\r\n    // Clear any existing click handlers\r\n    sigma.removeAllListeners('clickNode');\r\n    \r\n    // Set up click handler\r\n    sigma.on('clickNode', (event) => {\r\n      handleNodeClick(event.node);\r\n    });\r\n\r\n    // Clear the existing graph and set the new one\r\n    sigma.setGraph(graph);\r\n    sigma.refresh();\r\n\r\n    // Cleanup function\r\n    return () => {\r\n      sigma.removeAllListeners('clickNode');\r\n    };\r\n  }, [sigma, parentNodes, childNodes, edges, centralNode]);\r\n\r\n  return <div ref={containerRef} />;\r\n};\r\n\r\nconst GraphWrapper = () => (\r\n  <SigmaContainer>\r\n    <GraphComponent />\r\n  </SigmaContainer>\r\n);\r\n\r\nexport default GraphWrapper;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}