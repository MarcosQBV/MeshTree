{"ast":null,"code":"var _jsxFileName = \"D:\\\\code\\\\MeshTree\\\\frontend\\\\src\\\\GraphWrapper.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { SigmaContainer, useSigma } from '@react-sigma/core';\nimport Graph from 'graphology';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nasync function fetchDataForKey(key) {\n  const baseUrl = 'http://localhost:5000';\n  const url = `${baseUrl}/get/${key}`;\n  try {\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    throw error;\n  }\n}\nfunction defineEdges(data, centralNodeId) {\n  const edges = [];\n  data.children.forEach(child => {\n    edges.push({\n      source: child.id,\n      target: centralNodeId\n    });\n  });\n  data.parents.forEach(parent => {\n    edges.push({\n      source: centralNodeId,\n      target: parent.id\n    });\n  });\n  return edges;\n}\nconst GraphComponent = () => {\n  _s();\n  let centralNodeLabel = 'Root';\n  const sigma = useSigma();\n  const containerRef = useRef(null);\n  const [centralNode, setCentralNode] = useState({\n    id: 'Root',\n    label: 'Root'\n  });\n  const [parentNodes, setParentNodes] = useState([]);\n  const [childNodes, setChildNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const [animationState, setAnimationState] = useState({\n    activeNodes: new Set(),\n    animatingNodes: new Set()\n  });\n  function getNodeLabelById(nodeId, nodes) {\n    const node = nodes.find(node => node.id === nodeId);\n    return (node === null || node === void 0 ? void 0 : node.label) || null;\n  }\n  const handleNodeClick = nodeId => {\n    centralNodeLabel = getNodeLabelById(nodeId, [...parentNodes, ...childNodes]);\n    setCentralNode({\n      id: nodeId,\n      label: centralNodeLabel\n    });\n    // Reset animation state for new node selection\n    setAnimationState({\n      activeNodes: new Set(),\n      animatingNodes: new Set()\n    });\n  };\n\n  // Animation helper functions\n  const animateNode = (graph, nodeId, startPos, endPos, duration = 1000) => {\n    const startTime = Date.now();\n    setAnimationState(prev => ({\n      ...prev,\n      animatingNodes: new Set([...prev.animatingNodes, nodeId])\n    }));\n\n    // Set initial position and opacity\n    graph.setNodeAttribute(nodeId, 'x', startPos.x);\n    graph.setNodeAttribute(nodeId, 'y', startPos.y);\n    graph.setNodeAttribute(nodeId, 'size', 0);\n    graph.setNodeAttribute(nodeId, 'opacity', 0);\n    const animate = () => {\n      const elapsed = Date.now() - startTime;\n      const progress = Math.min(elapsed / duration, 1);\n\n      // Easing function for smooth animation\n      const eased = 1 - Math.pow(1 - progress, 3);\n\n      // Interpolate position\n      const currentX = startPos.x + (endPos.x - startPos.x) * eased;\n      const currentY = startPos.y + (endPos.y - startPos.y) * eased;\n\n      // Update node attributes\n      graph.setNodeAttribute(nodeId, 'x', currentX);\n      graph.setNodeAttribute(nodeId, 'y', currentY);\n      graph.setNodeAttribute(nodeId, 'size', 20 * eased);\n      graph.setNodeAttribute(nodeId, 'opacity', eased);\n      sigma.refresh();\n      if (progress < 1) {\n        requestAnimationFrame(animate);\n      } else {\n        setAnimationState(prev => {\n          const newAnimating = new Set(prev.animatingNodes);\n          newAnimating.delete(nodeId);\n          return {\n            activeNodes: new Set([...prev.activeNodes, nodeId]),\n            animatingNodes: newAnimating\n          };\n        });\n      }\n    };\n    requestAnimationFrame(animate);\n  };\n  useEffect(() => {\n    if (!centralNode.id) return;\n    fetchDataForKey(centralNode.id).then(data => {\n      const parents = data.parents.map(({\n        id,\n        label\n      }) => ({\n        id: id,\n        label: label\n      }));\n      const children = data.children.map(({\n        id,\n        label\n      }) => ({\n        id: id,\n        label: label\n      }));\n      setParentNodes(parents);\n      setChildNodes(children);\n      setEdges(defineEdges(data, centralNode.id));\n    }).catch(error => {\n      console.error('Error:', error);\n    });\n  }, [centralNode.id]);\n  useEffect(() => {\n    const graph = new Graph();\n    const centerX = 0;\n    const centerY = 0;\n\n    // Add and animate central node\n    graph.addNode(centralNode.id, {\n      label: centralNode.label,\n      size: 20,\n      color: 'black',\n      opacity: 1\n    });\n    graph.setNodeAttribute(centralNode.id, 'x', centerX);\n    graph.setNodeAttribute(centralNode.id, 'y', centerY);\n\n    // Calculate positions\n    const parentAngleSpread = Math.PI / 2;\n    const parentRadius = 100;\n    const parentStartAngle = 3 * Math.PI / 4;\n    const childAngleSpread = Math.PI / 2;\n    const childRadius = 100;\n    const childStartAngle = 7 * Math.PI / 4;\n\n    // Add and prepare parent nodes for animation\n    parentNodes.forEach((node, index) => {\n      const angle = parentStartAngle + index * parentAngleSpread / Math.max(1, parentNodes.length - 1);\n      const endX = centerX + parentRadius * Math.cos(angle);\n      const endY = centerY + parentRadius * Math.sin(angle);\n      if (!graph.hasNode(node.id)) {\n        graph.addNode(node.id, {\n          label: node.label,\n          size: 0,\n          color: 'black',\n          opacity: 0\n        });\n\n        // Start animation from center\n        setTimeout(() => {\n          animateNode(graph, node.id, {\n            x: centerX,\n            y: centerY\n          }, {\n            x: endX,\n            y: endY\n          }, 1000);\n        }, index * 200); // Stagger animations\n      }\n    });\n\n    // Add and prepare child nodes for animation\n    childNodes.forEach((node, index) => {\n      const angle = childStartAngle + index * childAngleSpread / Math.max(1, childNodes.length - 1);\n      const endX = centerX + childRadius * Math.cos(angle);\n      const endY = centerY + childRadius * Math.sin(angle);\n      if (!graph.hasNode(node.id)) {\n        graph.addNode(node.id, {\n          label: node.label,\n          size: 0,\n          color: 'black',\n          opacity: 0\n        });\n\n        // Start animation from center\n        setTimeout(() => {\n          animateNode(graph, node.id, {\n            x: centerX,\n            y: centerY\n          }, {\n            x: endX,\n            y: endY\n          }, 1000);\n        }, (parentNodes.length + index) * 200); // Continue staggering after parents\n      }\n    });\n\n    // Add edges as nodes become active\n    edges.forEach(edge => {\n      if (!graph.hasEdge(edge.source, edge.target)) {\n        try {\n          graph.addEdge(edge.source, edge.target, {\n            size: 2,\n            color: '#999'\n          });\n        } catch (error) {\n          console.warn(`Failed to add edge from ${edge.source} to ${edge.target}:`, error);\n        }\n      }\n    });\n    sigma.removeAllListeners('clickNode');\n    sigma.on('clickNode', event => {\n      handleNodeClick(event.node);\n    });\n    sigma.setGraph(graph);\n    sigma.refresh();\n    return () => {\n      sigma.removeAllListeners('clickNode');\n    };\n  }, [sigma, parentNodes, childNodes, edges, centralNode]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 240,\n    columnNumber: 10\n  }, this);\n};\n_s(GraphComponent, \"GjbQ5UOsrwx+wl3wIWCsYy1rq3g=\", false, function () {\n  return [useSigma];\n});\n_c = GraphComponent;\nconst GraphWrapper = () => /*#__PURE__*/_jsxDEV(SigmaContainer, {\n  children: /*#__PURE__*/_jsxDEV(GraphComponent, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 245,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 244,\n  columnNumber: 3\n}, this);\n_c2 = GraphWrapper;\nexport default GraphWrapper;\nvar _c, _c2;\n$RefreshReg$(_c, \"GraphComponent\");\n$RefreshReg$(_c2, \"GraphWrapper\");","map":{"version":3,"names":["React","useEffect","useRef","useState","SigmaContainer","useSigma","Graph","jsxDEV","_jsxDEV","fetchDataForKey","key","baseUrl","url","response","fetch","ok","Error","status","data","json","error","console","defineEdges","centralNodeId","edges","children","forEach","child","push","source","id","target","parents","parent","GraphComponent","_s","centralNodeLabel","sigma","containerRef","centralNode","setCentralNode","label","parentNodes","setParentNodes","childNodes","setChildNodes","setEdges","animationState","setAnimationState","activeNodes","Set","animatingNodes","getNodeLabelById","nodeId","nodes","node","find","handleNodeClick","animateNode","graph","startPos","endPos","duration","startTime","Date","now","prev","setNodeAttribute","x","y","animate","elapsed","progress","Math","min","eased","pow","currentX","currentY","refresh","requestAnimationFrame","newAnimating","delete","then","map","catch","centerX","centerY","addNode","size","color","opacity","parentAngleSpread","PI","parentRadius","parentStartAngle","childAngleSpread","childRadius","childStartAngle","index","angle","max","length","endX","cos","endY","sin","hasNode","setTimeout","edge","hasEdge","addEdge","warn","removeAllListeners","on","event","setGraph","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","GraphWrapper","_c2","$RefreshReg$"],"sources":["D:/code/MeshTree/frontend/src/GraphWrapper.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport { SigmaContainer, useSigma } from '@react-sigma/core';\r\nimport Graph from 'graphology';\r\n\r\nasync function fetchDataForKey(key) {\r\n  const baseUrl = 'http://localhost:5000';\r\n  const url = `${baseUrl}/get/${key}`;\r\n\r\n  try {\r\n    const response = await fetch(url);\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! Status: ${response.status}`);\r\n    }\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error fetching data:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nfunction defineEdges(data, centralNodeId) {\r\n  const edges = [];\r\n  data.children.forEach((child) => {\r\n    edges.push({ source: child.id, target: centralNodeId });\r\n  });\r\n  data.parents.forEach((parent) => {\r\n    edges.push({ source: centralNodeId, target: parent.id });\r\n  });\r\n  return edges;\r\n}\r\n\r\nconst GraphComponent = () => {\r\n  let centralNodeLabel = 'Root';\r\n  const sigma = useSigma();\r\n  const containerRef = useRef(null);\r\n  const [centralNode, setCentralNode] = useState({ id: 'Root', label: 'Root' });\r\n  const [parentNodes, setParentNodes] = useState([]);\r\n  const [childNodes, setChildNodes] = useState([]);\r\n  const [edges, setEdges] = useState([]);\r\n  const [animationState, setAnimationState] = useState({\r\n    activeNodes: new Set(),\r\n    animatingNodes: new Set()\r\n  });\r\n\r\n  function getNodeLabelById(nodeId, nodes) {\r\n    const node = nodes.find((node) => node.id === nodeId);\r\n    return node?.label || null;\r\n  }\r\n\r\n  const handleNodeClick = (nodeId) => {\r\n    centralNodeLabel = getNodeLabelById(nodeId, [...parentNodes, ...childNodes]);\r\n    setCentralNode({ id: nodeId, label: centralNodeLabel });\r\n    // Reset animation state for new node selection\r\n    setAnimationState({\r\n      activeNodes: new Set(),\r\n      animatingNodes: new Set()\r\n    });\r\n  };\r\n\r\n  // Animation helper functions\r\n  const animateNode = (graph, nodeId, startPos, endPos, duration = 1000) => {\r\n    const startTime = Date.now();\r\n    \r\n    setAnimationState(prev => ({\r\n      ...prev,\r\n      animatingNodes: new Set([...prev.animatingNodes, nodeId])\r\n    }));\r\n\r\n    // Set initial position and opacity\r\n    graph.setNodeAttribute(nodeId, 'x', startPos.x);\r\n    graph.setNodeAttribute(nodeId, 'y', startPos.y);\r\n    graph.setNodeAttribute(nodeId, 'size', 0);\r\n    graph.setNodeAttribute(nodeId, 'opacity', 0);\r\n\r\n    const animate = () => {\r\n      const elapsed = Date.now() - startTime;\r\n      const progress = Math.min(elapsed / duration, 1);\r\n      \r\n      // Easing function for smooth animation\r\n      const eased = 1 - Math.pow(1 - progress, 3);\r\n\r\n      // Interpolate position\r\n      const currentX = startPos.x + (endPos.x - startPos.x) * eased;\r\n      const currentY = startPos.y + (endPos.y - startPos.y) * eased;\r\n      \r\n      // Update node attributes\r\n      graph.setNodeAttribute(nodeId, 'x', currentX);\r\n      graph.setNodeAttribute(nodeId, 'y', currentY);\r\n      graph.setNodeAttribute(nodeId, 'size', 20 * eased);\r\n      graph.setNodeAttribute(nodeId, 'opacity', eased);\r\n\r\n      sigma.refresh();\r\n\r\n      if (progress < 1) {\r\n        requestAnimationFrame(animate);\r\n      } else {\r\n        setAnimationState(prev => {\r\n          const newAnimating = new Set(prev.animatingNodes);\r\n          newAnimating.delete(nodeId);\r\n          return {\r\n            activeNodes: new Set([...prev.activeNodes, nodeId]),\r\n            animatingNodes: newAnimating\r\n          };\r\n        });\r\n      }\r\n    };\r\n\r\n    requestAnimationFrame(animate);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!centralNode.id) return;\r\n    \r\n    fetchDataForKey(centralNode.id)\r\n      .then((data) => {\r\n        const parents = data.parents.map(({ id, label }) => ({\r\n          id: id,\r\n          label: label\r\n        }));\r\n\r\n        const children = data.children.map(({id, label}) => ({\r\n          id: id,\r\n          label: label\r\n        }));\r\n\r\n        setParentNodes(parents);\r\n        setChildNodes(children);\r\n        setEdges(defineEdges(data, centralNode.id));\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error:', error);\r\n      });\r\n  }, [centralNode.id]);\r\n\r\n  useEffect(() => {\r\n    const graph = new Graph();\r\n    const centerX = 0;\r\n    const centerY = 0;\r\n\r\n    // Add and animate central node\r\n    graph.addNode(centralNode.id, {\r\n      label: centralNode.label,\r\n      size: 20,\r\n      color: 'black',\r\n      opacity: 1\r\n    });\r\n    graph.setNodeAttribute(centralNode.id, 'x', centerX);\r\n    graph.setNodeAttribute(centralNode.id, 'y', centerY);\r\n\r\n    // Calculate positions\r\n    const parentAngleSpread = Math.PI / 2;\r\n    const parentRadius = 100;\r\n    const parentStartAngle = 3 * Math.PI / 4;\r\n    const childAngleSpread = Math.PI / 2;\r\n    const childRadius = 100;\r\n    const childStartAngle = 7 * Math.PI / 4;\r\n\r\n    // Add and prepare parent nodes for animation\r\n    parentNodes.forEach((node, index) => {\r\n      const angle = parentStartAngle + (index * parentAngleSpread) / Math.max(1, parentNodes.length - 1);\r\n      const endX = centerX + parentRadius * Math.cos(angle);\r\n      const endY = centerY + parentRadius * Math.sin(angle);\r\n\r\n      if (!graph.hasNode(node.id)) {\r\n        graph.addNode(node.id, {\r\n          label: node.label,\r\n          size: 0,\r\n          color: 'black',\r\n          opacity: 0\r\n        });\r\n\r\n        // Start animation from center\r\n        setTimeout(() => {\r\n          animateNode(\r\n            graph,\r\n            node.id,\r\n            { x: centerX, y: centerY },\r\n            { x: endX, y: endY },\r\n            1000\r\n          );\r\n        }, index * 200); // Stagger animations\r\n      }\r\n    });\r\n\r\n    // Add and prepare child nodes for animation\r\n    childNodes.forEach((node, index) => {\r\n      const angle = childStartAngle + (index * childAngleSpread) / Math.max(1, childNodes.length - 1);\r\n      const endX = centerX + childRadius * Math.cos(angle);\r\n      const endY = centerY + childRadius * Math.sin(angle);\r\n\r\n      if (!graph.hasNode(node.id)) {\r\n        graph.addNode(node.id, {\r\n          label: node.label,\r\n          size: 0,\r\n          color: 'black',\r\n          opacity: 0\r\n        });\r\n\r\n        // Start animation from center\r\n        setTimeout(() => {\r\n          animateNode(\r\n            graph,\r\n            node.id,\r\n            { x: centerX, y: centerY },\r\n            { x: endX, y: endY },\r\n            1000\r\n          );\r\n        }, (parentNodes.length + index) * 200); // Continue staggering after parents\r\n      }\r\n    });\r\n\r\n    // Add edges as nodes become active\r\n    edges.forEach(edge => {\r\n      if (!graph.hasEdge(edge.source, edge.target)) {\r\n        try {\r\n          graph.addEdge(edge.source, edge.target, {\r\n            size: 2,\r\n            color: '#999'\r\n          });\r\n        } catch (error) {\r\n          console.warn(`Failed to add edge from ${edge.source} to ${edge.target}:`, error);\r\n        }\r\n      }\r\n    });\r\n\r\n    sigma.removeAllListeners('clickNode');\r\n    sigma.on('clickNode', (event) => {\r\n      handleNodeClick(event.node);\r\n    });\r\n\r\n    sigma.setGraph(graph);\r\n    sigma.refresh();\r\n\r\n    return () => {\r\n      sigma.removeAllListeners('clickNode');\r\n    };\r\n  }, [sigma, parentNodes, childNodes, edges, centralNode]);\r\n\r\n  return <div ref={containerRef} />;\r\n};\r\n\r\nconst GraphWrapper = () => (\r\n  <SigmaContainer>\r\n    <GraphComponent />\r\n  </SigmaContainer>\r\n);\r\n\r\nexport default GraphWrapper;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}