{"ast":null,"code":"import o from \"graphology-layout-forceatlas2\";\nimport { useLayoutFactory as t, useWorkerLayoutFactory as a, WorkerLayoutControl as r } from \"@react-sigma/layout-core\";\nimport e from \"graphology-layout-forceatlas2/worker\";\nimport s from \"react\";\nconst l = t(o, {\n    iterations: 100\n  }),\n  u = a(e),\n  c = ({\n    id: o,\n    className: t,\n    style: a,\n    settings: e = {},\n    autoRunFor: l,\n    children: c,\n    labels: y\n  }) => {\n    const i = {\n      id: o,\n      className: t,\n      style: a,\n      settings: e,\n      autoRunFor: l,\n      labels: y,\n      layout: u\n    };\n    return s.createElement(r, Object.assign({}, i), c);\n  };\nexport { c as LayoutForceAtlas2Control, l as useLayoutForceAtlas2, u as useWorkerLayoutForceAtlas2 };","map":{"version":3,"names":["l","t","o","iterations","u","a","e","c","LayoutForceAtlas2Control","id","className","style","settings","autoRunFor","children","labels","y","i","layout","s","createElement","r","Object","assign","useLayoutForceAtlas2","useWorkerLayoutForceAtlas2"],"sources":["D:\\code\\MeshTree\\frontend\\node_modules\\@react-sigma\\layout-forceatlas2\\src\\useLayoutForceAtlas2.ts","D:\\code\\MeshTree\\frontend\\node_modules\\@react-sigma\\layout-forceatlas2\\src\\useWorkerLayoutForceAtlas2.ts","D:\\code\\MeshTree\\frontend\\node_modules\\@react-sigma\\layout-forceatlas2\\src\\LayoutForceAtlas2Control.tsx"],"sourcesContent":["import forceAtlas2, { ForceAtlas2SynchronousLayoutParameters } from \"graphology-layout-forceatlas2\";\n\nimport { useLayoutFactory } from \"@react-sigma/layout-core\";\n\n/**\n * React hook that helps you to manage [force atlas2 layout](https://graphology.github.io/standard-library/layout-forceatlas2.html).\n *\n * ```typescript\n * const { positions, assign } = useLayoutForceAtlas2(...);\n *```\n * @category Hook\n */\nexport const useLayoutForceAtlas2 = useLayoutFactory<ForceAtlas2SynchronousLayoutParameters>(forceAtlas2, {\n  iterations: 100,\n});\n","import FA2Layout from \"graphology-layout-forceatlas2/worker\";\nimport { ForceAtlas2LayoutParameters } from \"graphology-layout-forceatlas2\";\n\nimport { useWorkerLayoutFactory } from \"@react-sigma/layout-core\";\n\n/**\n * React hook that helps you to manage worker of [force atlas2 layout](https://graphology.github.io/standard-library/layout-forceatlas2.html).\n *\n * ```typescript\n * const { stop, start } = useWorkerLayoutForceAtlas2(...);\n *```\n * @category Hook\n */\nexport const useWorkerLayoutForceAtlas2 = useWorkerLayoutFactory<ForceAtlas2LayoutParameters>(FA2Layout);\n","import React from \"react\";\nimport { ForceAtlas2LayoutParameters } from \"graphology-layout-forceatlas2\";\n\nimport { WorkerLayoutControlProps, WorkerLayoutControl } from \"@react-sigma/layout-core\";\nimport { useWorkerLayoutForceAtlas2 } from \"./useWorkerLayoutForceAtlas2\";\n\n/**\n * Properties for `LayoutForceAtlas2Control` component\n */\nexport type LayoutForceAtlas2ControlProps = Omit<\n  WorkerLayoutControlProps<ForceAtlas2LayoutParameters>,\n  \"layout\" | \"settings\"\n> & {\n  settings?: ForceAtlas2LayoutParameters;\n};\n\n/**\n * @category Component\n */\nexport const LayoutForceAtlas2Control: React.FC<LayoutForceAtlas2ControlProps> = ({\n  id,\n  className,\n  style,\n  settings = {},\n  autoRunFor,\n  children,\n  labels,\n}) => {\n  const workerLayoutProps = { id, className, style, settings, autoRunFor, labels, layout: useWorkerLayoutForceAtlas2 };\n  return <WorkerLayoutControl {...workerLayoutProps}>{children}</WorkerLayoutControl>;\n};\n"],"mappings":";;;;AAYa,MAAAA,CAAA,GAAuBC,CAAA,CAAyDC,CAAA,EAAa;IACxGC,UAAA,EAAY;EAAA;ECADC,CAAA,GAA6BC,CAAA,CAAoDC,CAAA;ECMjFC,CAAA,GAAoEC,CAAA;IAC/EC,EAAA,EAAAP,CAAA;IACAQ,SAAA,EACAT,CAAA;IAAAU,KAAA,EAAAN,CAAA;IACAO,QAAA,EAAWN,CAAA;IACXO,UAAA,EACAb,CAAA;IAAAc,QAAA,EAAAP,CAAA;IACAQ,MAAA,EAEAC;EAAA;IAAA,MAAMC,CAAA,GAAoB;MAAER,EAAA,EAAAP,CAAA;MAAIQ,SAAA,EAAWT,CAAA;MAAAU,KAAA,EAAAN,CAAA;MAAOO,QAAA,EAAUN,CAAA;MAAAO,UAAA,EAAAb,CAAA;MAAYe,MAAA,EAAQC,CAAA;MAAAE,MAAA,EAAQd;IAAA;IACxF,OAAOe,CAAA,CAAAC,aAAA,CAACC,CAAA,EAAmBC,MAAA,CAAAC,MAAA,KAAKN,CAAA,GAAoBV,CAAA;EAAA;AAAA,SAAAA,CAAA,IAAAC,wBAAA,EAAAR,CAAA,IAAAwB,oBAAA,EAAApB,CAAA,IAAAqB,0BAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}