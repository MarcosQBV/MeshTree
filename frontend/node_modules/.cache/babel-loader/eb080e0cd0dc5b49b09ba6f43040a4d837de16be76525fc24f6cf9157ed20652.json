{"ast":null,"code":"var _jsxFileName = \"D:\\\\code\\\\MeshTree\\\\frontend\\\\src\\\\GraphWrapper.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { SigmaContainer, useSigma } from '@react-sigma/core';\nimport Graph from 'graphology';\n\n// Fetch data for a given key\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nasync function fetchDataForKey(key) {\n  const baseUrl = 'http://localhost:5000';\n  const url = `${baseUrl}/get/${key}`;\n  try {\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    throw error;\n  }\n}\n\n// Define edges based on fetched data\nfunction defineEdges(data, centralNodeId) {\n  const edges = [];\n  data.children.forEach(childId => {\n    edges.push({\n      source: childId,\n      target: centralNodeId\n    });\n  });\n  data.parents.forEach(parentId => {\n    edges.push({\n      source: centralNodeId,\n      target: parentId\n    });\n  });\n  return edges;\n}\nconst GraphComponent = () => {\n  _s();\n  const sigma = useSigma();\n  const containerRef = useRef(null);\n\n  // State management\n  const [centralNode, setCentralNode] = useState({\n    id: 'Root',\n    label: 'Root'\n  });\n  const [parentNodes, setParentNodes] = useState([]);\n  const [childNodes, setChildNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Fetch data when central node changes\n  useEffect(() => {\n    setIsLoading(true); // Start loading\n    fetchDataForKey(centralNode.id).then(data => {\n      const parents = data.parents.map(id => ({\n        id,\n        label: id\n      }));\n      const children = data.children.map(id => ({\n        id,\n        label: id\n      }));\n      setParentNodes(parents);\n      setChildNodes(children);\n      setEdges(defineEdges(data, centralNode.id));\n      setIsLoading(false); // Stop loading after data fetch\n    }).catch(error => {\n      console.error('Error:', error);\n      setIsLoading(false); // Stop loading even on error\n    });\n  }, [centralNode]);\n\n  // Set up graph when nodes or edges change\n  useEffect(() => {\n    if (!isLoading && sigma && parentNodes.length > 0 && childNodes.length > 0 && edges.length > 0) {\n      const graph = new Graph();\n\n      // Add central node\n      graph.addNode(centralNode.id, {\n        label: centralNode.label,\n        size: 20,\n        color: 'black'\n      });\n      parentNodes.forEach(node => {\n        graph.addNode(node.id, {\n          label: node.label,\n          size: 20,\n          color: 'black'\n        });\n      });\n      childNodes.forEach(node => {\n        graph.addNode(node.id, {\n          label: node.label,\n          size: 20,\n          color: 'black'\n        });\n      });\n      edges.forEach(edge => {\n        graph.addEdge(edge.source, edge.target);\n      });\n      sigma.setGraph(graph);\n      sigma.refresh();\n\n      // Add click listener for nodes\n      sigma.getGraph().on('clickNode', event => {\n        const clickedNodeId = event.node;\n        const clickedNodeLabel = sigma.getGraph().getNodeAttribute(clickedNodeId, 'label');\n\n        // Update the central node with clicked node's details\n        setCentralNode({\n          id: clickedNodeId,\n          label: clickedNodeLabel\n        });\n      });\n    }\n  }, [sigma, parentNodes, childNodes, edges, centralNode, isLoading]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 10\n  }, this);\n};\n_s(GraphComponent, \"4KtlULrvxZzoUCQrn/X2RftyZ5I=\", false, function () {\n  return [useSigma];\n});\n_c = GraphComponent;\nconst GraphWrapper = () => /*#__PURE__*/_jsxDEV(SigmaContainer, {\n  children: /*#__PURE__*/_jsxDEV(GraphComponent, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 110,\n  columnNumber: 3\n}, this);\n_c2 = GraphWrapper;\nexport default GraphWrapper;\nvar _c, _c2;\n$RefreshReg$(_c, \"GraphComponent\");\n$RefreshReg$(_c2, \"GraphWrapper\");","map":{"version":3,"names":["React","useEffect","useRef","useState","SigmaContainer","useSigma","Graph","jsxDEV","_jsxDEV","fetchDataForKey","key","baseUrl","url","response","fetch","ok","Error","status","data","json","error","console","defineEdges","centralNodeId","edges","children","forEach","childId","push","source","target","parents","parentId","GraphComponent","_s","sigma","containerRef","centralNode","setCentralNode","id","label","parentNodes","setParentNodes","childNodes","setChildNodes","setEdges","isLoading","setIsLoading","then","map","catch","length","graph","addNode","size","color","node","edge","addEdge","setGraph","refresh","getGraph","on","event","clickedNodeId","clickedNodeLabel","getNodeAttribute","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","GraphWrapper","_c2","$RefreshReg$"],"sources":["D:/code/MeshTree/frontend/src/GraphWrapper.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport { SigmaContainer, useSigma } from '@react-sigma/core';\r\nimport Graph from 'graphology';\r\n\r\n// Fetch data for a given key\r\nasync function fetchDataForKey(key) {\r\n  const baseUrl = 'http://localhost:5000';\r\n  const url = `${baseUrl}/get/${key}`;\r\n\r\n  try {\r\n    const response = await fetch(url);\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! Status: ${response.status}`);\r\n    }\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error fetching data:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Define edges based on fetched data\r\nfunction defineEdges(data, centralNodeId) {\r\n  const edges = [];\r\n\r\n  data.children.forEach((childId) => {\r\n    edges.push({ source: childId, target: centralNodeId });\r\n  });\r\n\r\n  data.parents.forEach((parentId) => {\r\n    edges.push({ source: centralNodeId, target: parentId });\r\n  });\r\n\r\n  return edges;\r\n}\r\n\r\nconst GraphComponent = () => {\r\n  const sigma = useSigma();\r\n  const containerRef = useRef(null);\r\n\r\n  // State management\r\n  const [centralNode, setCentralNode] = useState({ id: 'Root', label: 'Root' });\r\n  const [parentNodes, setParentNodes] = useState([]);\r\n  const [childNodes, setChildNodes] = useState([]);\r\n  const [edges, setEdges] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  // Fetch data when central node changes\r\n  useEffect(() => {\r\n    setIsLoading(true); // Start loading\r\n    fetchDataForKey(centralNode.id)\r\n      .then((data) => {\r\n        const parents = data.parents.map((id) => ({ id, label: id }));\r\n        const children = data.children.map((id) => ({ id, label: id }));\r\n\r\n        setParentNodes(parents);\r\n        setChildNodes(children);\r\n        setEdges(defineEdges(data, centralNode.id));\r\n        setIsLoading(false); // Stop loading after data fetch\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error:', error);\r\n        setIsLoading(false); // Stop loading even on error\r\n      });\r\n  }, [centralNode]);\r\n\r\n  // Set up graph when nodes or edges change\r\n  useEffect(() => {\r\n    if (!isLoading && sigma && parentNodes.length > 0 && childNodes.length > 0 && edges.length > 0) {\r\n      const graph = new Graph();\r\n\r\n      // Add central node\r\n      graph.addNode(centralNode.id, {\r\n        label: centralNode.label,\r\n        size: 20,\r\n        color: 'black',\r\n      });\r\n\r\n      parentNodes.forEach((node) => {\r\n        graph.addNode(node.id, { label: node.label, size: 20, color: 'black' });\r\n      });\r\n\r\n      childNodes.forEach((node) => {\r\n        graph.addNode(node.id, { label: node.label, size: 20, color: 'black' });\r\n      });\r\n\r\n      edges.forEach((edge) => {\r\n        graph.addEdge(edge.source, edge.target);\r\n      });\r\n\r\n      sigma.setGraph(graph);\r\n      sigma.refresh();\r\n\r\n      // Add click listener for nodes\r\n      sigma.getGraph().on('clickNode', (event) => {\r\n        const clickedNodeId = event.node;\r\n        const clickedNodeLabel = sigma.getGraph().getNodeAttribute(clickedNodeId, 'label');\r\n        \r\n        // Update the central node with clicked node's details\r\n        setCentralNode({ id: clickedNodeId, label: clickedNodeLabel });\r\n      });\r\n    }\r\n  }, [sigma, parentNodes, childNodes, edges, centralNode, isLoading]);\r\n\r\n  return <div ref={containerRef} />;\r\n};\r\n\r\nconst GraphWrapper = () => (\r\n  <SigmaContainer>\r\n    <GraphComponent />\r\n  </SigmaContainer>\r\n);\r\n\r\nexport default GraphWrapper;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}