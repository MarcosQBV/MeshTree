{"ast":null,"code":"var _jsxFileName = \"D:\\\\code\\\\MeshTree\\\\frontend\\\\src\\\\GraphWrapper.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { SigmaContainer, useSigma } from '@react-sigma/core';\nimport Graph from 'graphology';\n\n// CSS for fade-in effect\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst fadeInStyle = `\n  .fade-in {\n    opacity: 0;\n    animation: fadeIn 1s forwards;\n  }\n\n  @keyframes fadeIn {\n    to {\n      opacity: 1;\n    }\n  }\n`;\n\n// Inject the CSS into the document\nconst styleSheet = document.createElement(\"style\");\nstyleSheet.type = \"text/css\";\nstyleSheet.innerText = fadeInStyle;\ndocument.head.appendChild(styleSheet);\nasync function fetchDataForKey(key) {\n  const baseUrl = 'http://localhost:5000';\n  const url = `${baseUrl}/get/${key}`;\n  try {\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    throw error;\n  }\n}\nfunction defineEdges(data, centralNodeId) {\n  const edges = [];\n  data.children.forEach(child => {\n    edges.push({\n      source: centralNodeId,\n      target: child.id\n    });\n  });\n  data.parents.forEach(parent => {\n    edges.push({\n      source: parent.id,\n      target: centralNodeId\n    });\n  });\n  return edges;\n}\nconst GraphComponent = () => {\n  _s();\n  let centralNodeLabel = 'Root';\n  const sigma = useSigma();\n  const containerRef = useRef(null);\n  const graphRef = useRef(new Graph()); // Persistent graph instance\n  const [centralNode, setCentralNode] = useState({\n    id: 'Root',\n    label: 'Root'\n  });\n  const [parentNodes, setParentNodes] = useState([]);\n  const [childNodes, setChildNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const [nodeLevel, setNodeLevel] = useState([]); // Initialize nodeLevel as a state\n  const [centerX, setCenterX] = useState(0); // State for center X coordinate\n  const [centerY, setCenterY] = useState(0); // State for center Y coordinate\n  const [collapsedNodes, setCollapsedNodes] = useState(new Set()); // Track collapsed nodes and their children\n\n  // Function to get the label by node ID\n  function getNodeLabelById(nodeId, nodes) {\n    const node = nodes.find(node => node.id === nodeId);\n    return node ? node.label : null;\n  }\n\n  // Function to handle node clicks\n  const handleNodeClick = nodeId => {\n    const newLabel = getNodeLabelById(nodeId, [...parentNodes, ...childNodes]);\n    console.log(`Node clicked: ${nodeId}, Label: ${newLabel}`);\n    if (newLabel) {\n      setCentralNode({\n        id: nodeId,\n        label: newLabel\n      });\n\n      // Get the coordinates of the clicked node\n      const nodeAttributes = graphRef.current.getNodeAttributes(nodeId);\n      setCenterX(nodeAttributes.x);\n      setCenterY(nodeAttributes.y);\n\n      // Remove the node from the collapsed nodes set to allow re-expansion\n      setCollapsedNodes(prevCollapsed => {\n        const newCollapsed = new Set(prevCollapsed);\n        newCollapsed.delete(nodeId);\n        console.log('Collapsed nodes after click:', newCollapsed);\n        return newCollapsed;\n      });\n    } else {\n      fetchDataForKey;\n    }\n  };\n\n  // Function to handle right-click on nodes\n  const handleNodeRightClick = nodeId => {\n    collapseNodeAndDescendants(nodeId);\n  };\n\n  // Function to collapse a node and its descendants\n  const collapseNodeAndDescendants = nodeId => {\n    const graph = graphRef.current;\n    const nodesToRemove = new Set();\n    const edgesToRemove = new Set();\n\n    // Collect direct children of the node\n    graph.forEachOutboundNeighbor(nodeId, neighbor => {\n      nodesToRemove.add(neighbor);\n    });\n\n    // Collect all edges connected to these nodes\n    nodesToRemove.forEach(node => {\n      graph.forEachEdge(node, (edgeId, attributes, source, target) => {\n        edgesToRemove.add(edgeId);\n      });\n    });\n\n    // Remove all collected edges and nodes\n    edgesToRemove.forEach(edgeId => {\n      if (graph.hasEdge(edgeId)) {\n        graph.dropEdge(edgeId);\n      }\n    });\n    nodesToRemove.forEach(node => {\n      if (graph.hasNode(node)) {\n        graph.dropNode(node);\n      }\n    });\n\n    // Add the node and its children to the collapsed nodes set\n    setCollapsedNodes(prevCollapsed => {\n      const newCollapsed = new Set(prevCollapsed);\n      newCollapsed.add(nodeId);\n      nodesToRemove.forEach(node => newCollapsed.add(node));\n      console.log(newCollapsed);\n      return newCollapsed;\n    });\n\n    // Refresh the graph\n    sigma.refresh();\n  };\n\n  // Function to add nodes and edges with a delay\n  async function addNodesAndEdgesWithDelay(nodes, graph, parentX, parentY, startAngle, angleSpread, radius, edges, level) {\n    for (const [index, node] of nodes.entries()) {\n      if (collapsedNodes.has(node.id)) continue; // Skip adding collapsed nodes\n\n      const angle = startAngle + index * angleSpread / Math.max(1, nodes.length - 1);\n      const x = parentX + radius * Math.cos(angle);\n      const y = parentY + radius * Math.sin(angle);\n      if (!graph.hasNode(node.id)) {\n        graph.addNode(node.id, {\n          label: node.label,\n          size: 20,\n          color: 'black',\n          className: 'fade-in',\n          // Apply the fade-in class\n          x: x,\n          y: y\n        });\n\n        // Add node level information\n        setNodeLevel(prevNodeLevel => [...prevNodeLevel, {\n          id: node.id,\n          label: node.label,\n          level: level\n        }]);\n      }\n      await sleep(100); // Wait for 200ms\n\n      // Add edges related to this node\n      edges.forEach(edge => {\n        if ((edge.source === node.id || edge.target === node.id) && !collapsedNodes.has(edge.source) && !collapsedNodes.has(edge.target)) {\n          if (!graph.hasEdge(edge.source, edge.target)) {\n            try {\n              graph.addEdge(edge.source, edge.target);\n            } catch (error) {\n              console.warn(`Failed to add edge from ${edge.source} to ${edge.target}:`, error);\n            }\n          }\n        }\n      });\n      await sleep(50); // Wait for 100ms before adding the next edge\n    }\n  }\n\n  // Sleep function to pause execution\n  function sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n  useEffect(() => {\n    if (!centralNode.id) return; // Ensure there's an ID\n\n    console.log(`Fetching data for central node: ${centralNode.id}`);\n    fetchDataForKey(centralNode.id).then(data => {\n      const parents = data.parents.map(({\n        id,\n        label\n      }) => ({\n        id: id,\n        label: label\n      }));\n      const children = data.children.map(({\n        id,\n        label\n      }) => ({\n        id: id,\n        label: label\n      }));\n      console.log('Fetched children:', children);\n      setParentNodes(parents);\n      setChildNodes(children);\n      setEdges(defineEdges(data, centralNode.id));\n\n      // Remove children from the collapsed nodes set\n      setCollapsedNodes(prevCollapsed => {\n        const newCollapsed = new Set(prevCollapsed);\n        children.forEach(child => newCollapsed.delete(child.id));\n        console.log('Updated collapsedNodes:', newCollapsed);\n        return newCollapsed;\n      });\n    }).catch(error => {\n      console.error('Error fetching data:', error);\n    });\n  }, [centralNode.id]); // Trigger fetching whenever centralNode.id changes\n\n  // Effect to update graph visualization\n  useEffect(() => {\n    const graph = graphRef.current; // Use the persistent graph instance\n\n    // Add central node if it doesn't exist\n    if (!graph.hasNode(centralNode.id)) {\n      graph.addNode(centralNode.id, {\n        label: centralNode.label,\n        size: 20,\n        color: 'black',\n        className: 'fade-in',\n        // Apply the fade-in class\n        x: centerX,\n        y: centerY\n      });\n\n      // Add central node level information\n      setNodeLevel([{\n        id: centralNode.id,\n        label: centralNode.label,\n        level: 0\n      }]);\n    }\n\n    // Add parent nodes and edges with delay\n    const parentAngleSpread = Math.PI / 2;\n    const parentRadius = 100;\n    const parentStartAngle = 3 * Math.PI / 4;\n    addNodesAndEdgesWithDelay(parentNodes, graph, centerX, centerY, parentStartAngle, parentAngleSpread, parentRadius, edges, 1);\n\n    // Add child nodes and edges with delay\n    const childAngleSpread = Math.PI / 2;\n    const childRadius = 100;\n    const childStartAngle = 7 * Math.PI / 4;\n    addNodesAndEdgesWithDelay(childNodes, graph, centerX, centerY, childStartAngle, childAngleSpread, childRadius, edges, 1);\n\n    // Clear any existing click handlers\n    sigma.removeAllListeners('clickNode');\n\n    // Set up click handler\n    sigma.on('clickNode', event => {\n      handleNodeClick(event.node);\n    });\n\n    // Set up right-click handler\n    sigma.on('rightClickNode', event => {\n      handleNodeRightClick(event.node);\n    });\n\n    // Set the graph to Sigma and refresh\n    sigma.setGraph(graph);\n    sigma.refresh();\n\n    // Cleanup function\n    return () => {\n      sigma.removeAllListeners('clickNode');\n      sigma.removeAllListeners('rightClickNode');\n    };\n  }, [sigma, parentNodes, childNodes, edges, centralNode, centerX, centerY, collapsedNodes]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 283,\n    columnNumber: 10\n  }, this);\n};\n_s(GraphComponent, \"yuUndBMopYQ2T1RqEjz6eOlrTWI=\", false, function () {\n  return [useSigma];\n});\n_c = GraphComponent;\nconst GraphWrapper = () => /*#__PURE__*/_jsxDEV(SigmaContainer, {\n  children: /*#__PURE__*/_jsxDEV(GraphComponent, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 288,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 287,\n  columnNumber: 3\n}, this);\n_c2 = GraphWrapper;\nexport default GraphWrapper;\nvar _c, _c2;\n$RefreshReg$(_c, \"GraphComponent\");\n$RefreshReg$(_c2, \"GraphWrapper\");","map":{"version":3,"names":["React","useEffect","useRef","useState","SigmaContainer","useSigma","Graph","jsxDEV","_jsxDEV","fadeInStyle","styleSheet","document","createElement","type","innerText","head","appendChild","fetchDataForKey","key","baseUrl","url","response","fetch","ok","Error","status","data","json","error","console","defineEdges","centralNodeId","edges","children","forEach","child","push","source","target","id","parents","parent","GraphComponent","_s","centralNodeLabel","sigma","containerRef","graphRef","centralNode","setCentralNode","label","parentNodes","setParentNodes","childNodes","setChildNodes","setEdges","nodeLevel","setNodeLevel","centerX","setCenterX","centerY","setCenterY","collapsedNodes","setCollapsedNodes","Set","getNodeLabelById","nodeId","nodes","node","find","handleNodeClick","newLabel","log","nodeAttributes","current","getNodeAttributes","x","y","prevCollapsed","newCollapsed","delete","handleNodeRightClick","collapseNodeAndDescendants","graph","nodesToRemove","edgesToRemove","forEachOutboundNeighbor","neighbor","add","forEachEdge","edgeId","attributes","hasEdge","dropEdge","hasNode","dropNode","refresh","addNodesAndEdgesWithDelay","parentX","parentY","startAngle","angleSpread","radius","level","index","entries","has","angle","Math","max","length","cos","sin","addNode","size","color","className","prevNodeLevel","sleep","edge","addEdge","warn","ms","Promise","resolve","setTimeout","then","map","catch","parentAngleSpread","PI","parentRadius","parentStartAngle","childAngleSpread","childRadius","childStartAngle","removeAllListeners","on","event","setGraph","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","GraphWrapper","_c2","$RefreshReg$"],"sources":["D:/code/MeshTree/frontend/src/GraphWrapper.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport { SigmaContainer, useSigma } from '@react-sigma/core';\r\nimport Graph from 'graphology';\r\n\r\n// CSS for fade-in effect\r\nconst fadeInStyle = `\r\n  .fade-in {\r\n    opacity: 0;\r\n    animation: fadeIn 1s forwards;\r\n  }\r\n\r\n  @keyframes fadeIn {\r\n    to {\r\n      opacity: 1;\r\n    }\r\n  }\r\n`;\r\n\r\n// Inject the CSS into the document\r\nconst styleSheet = document.createElement(\"style\");\r\nstyleSheet.type = \"text/css\";\r\nstyleSheet.innerText = fadeInStyle;\r\ndocument.head.appendChild(styleSheet);\r\n\r\nasync function fetchDataForKey(key) {\r\n  const baseUrl = 'http://localhost:5000';\r\n  const url = `${baseUrl}/get/${key}`;\r\n\r\n  try {\r\n    const response = await fetch(url);\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! Status: ${response.status}`);\r\n    }\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error fetching data:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nfunction defineEdges(data, centralNodeId) {\r\n  const edges = [];\r\n  data.children.forEach((child) => {\r\n    edges.push({ source: centralNodeId, target: child.id });\r\n  });\r\n  data.parents.forEach((parent) => {\r\n    edges.push({ source: parent.id, target: centralNodeId });\r\n  });\r\n  return edges;\r\n}\r\n\r\nconst GraphComponent = () => {\r\n  let centralNodeLabel = 'Root';\r\n  const sigma = useSigma();\r\n  const containerRef = useRef(null);\r\n  const graphRef = useRef(new Graph()); // Persistent graph instance\r\n  const [centralNode, setCentralNode] = useState({ id: 'Root', label: 'Root' });\r\n  const [parentNodes, setParentNodes] = useState([]);\r\n  const [childNodes, setChildNodes] = useState([]);\r\n  const [edges, setEdges] = useState([]);\r\n  const [nodeLevel, setNodeLevel] = useState([]); // Initialize nodeLevel as a state\r\n  const [centerX, setCenterX] = useState(0); // State for center X coordinate\r\n  const [centerY, setCenterY] = useState(0); // State for center Y coordinate\r\n  const [collapsedNodes, setCollapsedNodes] = useState(new Set()); // Track collapsed nodes and their children\r\n\r\n  // Function to get the label by node ID\r\n  function getNodeLabelById(nodeId, nodes) {\r\n    const node = nodes.find((node) => node.id === nodeId);\r\n    return node ? node.label : null;\r\n  }\r\n\r\n// Function to handle node clicks\r\nconst handleNodeClick = (nodeId) => {\r\n  const newLabel = getNodeLabelById(nodeId, [...parentNodes, ...childNodes]);\r\n  console.log(`Node clicked: ${nodeId}, Label: ${newLabel}`);\r\n\r\n  if (newLabel) {\r\n    setCentralNode({ id: nodeId, label: newLabel });\r\n\r\n    // Get the coordinates of the clicked node\r\n    const nodeAttributes = graphRef.current.getNodeAttributes(nodeId);\r\n    setCenterX(nodeAttributes.x);\r\n    setCenterY(nodeAttributes.y);\r\n\r\n    // Remove the node from the collapsed nodes set to allow re-expansion\r\n    setCollapsedNodes((prevCollapsed) => {\r\n      const newCollapsed = new Set(prevCollapsed);\r\n      newCollapsed.delete(nodeId);\r\n      console.log('Collapsed nodes after click:', newCollapsed);\r\n      return newCollapsed;\r\n    });\r\n  } else {\r\n    fetchDataForKey;\r\n  }\r\n};\r\n\r\n\r\n  // Function to handle right-click on nodes\r\n  const handleNodeRightClick = (nodeId) => {\r\n    collapseNodeAndDescendants(nodeId);\r\n  };\r\n\r\n  // Function to collapse a node and its descendants\r\n  const collapseNodeAndDescendants = (nodeId) => {\r\n    const graph = graphRef.current;\r\n    const nodesToRemove = new Set();\r\n    const edgesToRemove = new Set();\r\n\r\n    // Collect direct children of the node\r\n    graph.forEachOutboundNeighbor(nodeId, (neighbor) => {\r\n      nodesToRemove.add(neighbor);\r\n    });\r\n\r\n    // Collect all edges connected to these nodes\r\n    nodesToRemove.forEach((node) => {\r\n      graph.forEachEdge(node, (edgeId, attributes, source, target) => {\r\n        edgesToRemove.add(edgeId);\r\n      });\r\n    });\r\n\r\n    // Remove all collected edges and nodes\r\n    edgesToRemove.forEach((edgeId) => {\r\n      if (graph.hasEdge(edgeId)) {\r\n        graph.dropEdge(edgeId);\r\n      }\r\n    });\r\n    nodesToRemove.forEach((node) => {\r\n      if (graph.hasNode(node)) {\r\n        graph.dropNode(node);\r\n      }\r\n    });\r\n\r\n    // Add the node and its children to the collapsed nodes set\r\n    setCollapsedNodes((prevCollapsed) => {\r\n      const newCollapsed = new Set(prevCollapsed);\r\n      newCollapsed.add(nodeId);\r\n      nodesToRemove.forEach((node) => newCollapsed.add(node));\r\n      console.log(newCollapsed);\r\n      return newCollapsed;\r\n    });\r\n\r\n    // Refresh the graph\r\n    sigma.refresh();\r\n  };\r\n\r\n  // Function to add nodes and edges with a delay\r\n  async function addNodesAndEdgesWithDelay(nodes, graph, parentX, parentY, startAngle, angleSpread, radius, edges, level) {\r\n    for (const [index, node] of nodes.entries()) {\r\n      if (collapsedNodes.has(node.id)) continue; // Skip adding collapsed nodes\r\n\r\n      const angle = startAngle + (index * angleSpread) / Math.max(1, nodes.length - 1);\r\n      const x = parentX + radius * Math.cos(angle);\r\n      const y = parentY + radius * Math.sin(angle);\r\n      if (!graph.hasNode(node.id)) {\r\n        graph.addNode(node.id, {\r\n          label: node.label,\r\n          size: 20,\r\n          color: 'black',\r\n          className: 'fade-in', // Apply the fade-in class\r\n          x: x,\r\n          y: y\r\n        });\r\n\r\n        // Add node level information\r\n        setNodeLevel((prevNodeLevel) => [\r\n          ...prevNodeLevel,\r\n          { id: node.id, label: node.label, level: level }\r\n        ]);\r\n      }\r\n      await sleep(100); // Wait for 200ms\r\n\r\n      // Add edges related to this node\r\n      edges.forEach(edge => {\r\n        if ((edge.source === node.id || edge.target === node.id) && !collapsedNodes.has(edge.source) && !collapsedNodes.has(edge.target)) {\r\n          if (!graph.hasEdge(edge.source, edge.target)) {\r\n            try {\r\n              graph.addEdge(edge.source, edge.target);\r\n            } catch (error) {\r\n              console.warn(`Failed to add edge from ${edge.source} to ${edge.target}:`, error);\r\n            }\r\n          }\r\n        }\r\n      });\r\n      await sleep(50); // Wait for 100ms before adding the next edge\r\n    }\r\n  }\r\n\r\n  // Sleep function to pause execution\r\n  function sleep(ms) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!centralNode.id) return; // Ensure there's an ID\r\n  \r\n    console.log(`Fetching data for central node: ${centralNode.id}`);\r\n    fetchDataForKey(centralNode.id)\r\n      .then((data) => {\r\n        const parents = data.parents.map(({ id, label }) => ({\r\n          id: id,\r\n          label: label\r\n        }));\r\n  \r\n        const children = data.children.map(({ id, label }) => ({\r\n          id: id,\r\n          label: label\r\n        }));\r\n  \r\n        console.log('Fetched children:', children);\r\n        setParentNodes(parents);\r\n        setChildNodes(children);\r\n        setEdges(defineEdges(data, centralNode.id));\r\n  \r\n        // Remove children from the collapsed nodes set\r\n        setCollapsedNodes((prevCollapsed) => {\r\n          const newCollapsed = new Set(prevCollapsed);\r\n          children.forEach((child) => newCollapsed.delete(child.id));\r\n          console.log('Updated collapsedNodes:', newCollapsed);\r\n          return newCollapsed;\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error fetching data:', error);\r\n      });\r\n  }, [centralNode.id]); // Trigger fetching whenever centralNode.id changes\r\n\r\n  // Effect to update graph visualization\r\n  useEffect(() => {\r\n    const graph = graphRef.current; // Use the persistent graph instance\r\n\r\n    // Add central node if it doesn't exist\r\n    if (!graph.hasNode(centralNode.id)) {\r\n      graph.addNode(centralNode.id, {\r\n        label: centralNode.label,\r\n        size: 20,\r\n        color: 'black',\r\n        className: 'fade-in', // Apply the fade-in class\r\n        x: centerX,\r\n        y: centerY\r\n      });\r\n\r\n      // Add central node level information\r\n      setNodeLevel([{ id: centralNode.id, label: centralNode.label, level: 0 }]);\r\n    }\r\n\r\n    // Add parent nodes and edges with delay\r\n    const parentAngleSpread = Math.PI / 2;\r\n    const parentRadius = 100;\r\n    const parentStartAngle = 3 * Math.PI / 4;\r\n    addNodesAndEdgesWithDelay(parentNodes, graph, centerX, centerY, parentStartAngle, parentAngleSpread, parentRadius, edges, 1);\r\n\r\n    // Add child nodes and edges with delay\r\n    const childAngleSpread = Math.PI / 2;\r\n    const childRadius = 100;\r\n    const childStartAngle = 7 * Math.PI / 4;\r\n    addNodesAndEdgesWithDelay(childNodes, graph, centerX, centerY, childStartAngle, childAngleSpread, childRadius, edges, 1);\r\n\r\n    // Clear any existing click handlers\r\n    sigma.removeAllListeners('clickNode');\r\n\r\n    // Set up click handler\r\n    sigma.on('clickNode', (event) => {\r\n      handleNodeClick(event.node);\r\n    });\r\n\r\n    // Set up right-click handler\r\n    sigma.on('rightClickNode', (event) => {\r\n      handleNodeRightClick(event.node);\r\n    });\r\n\r\n    // Set the graph to Sigma and refresh\r\n    sigma.setGraph(graph);\r\n    sigma.refresh();\r\n\r\n    // Cleanup function\r\n    return () => {\r\n      sigma.removeAllListeners('clickNode');\r\n      sigma.removeAllListeners('rightClickNode');\r\n    };\r\n  }, [sigma, parentNodes, childNodes, edges, centralNode, centerX, centerY, collapsedNodes]);\r\n\r\n  return <div ref={containerRef} />;\r\n};\r\n\r\nconst GraphWrapper = () => (\r\n  <SigmaContainer>\r\n    <GraphComponent />\r\n  </SigmaContainer>\r\n);\r\n\r\nexport default GraphWrapper;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}