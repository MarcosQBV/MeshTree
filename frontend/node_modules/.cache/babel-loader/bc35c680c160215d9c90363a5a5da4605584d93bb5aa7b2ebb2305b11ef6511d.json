{"ast":null,"code":"var _jsxFileName = \"D:\\\\code\\\\MeshTree\\\\frontend\\\\src\\\\GraphWrapper2.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { SigmaContainer, useSigma } from '@react-sigma/core';\nimport Graph from 'graphology';\nimport forceAtlas2, { ForceAtlas2SynchronousLayoutParameters } from \"graphology-layout-forceatlas2\";\nimport { useLayoutFactory } from \"@react-sigma/layout-core\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nasync function fetchDataForKey(key) {\n  const baseUrl = 'http://localhost:5000';\n  const url = `${baseUrl}/get/${key}`;\n  try {\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    throw error;\n  }\n}\n;\nasync function getNodeData(nodeID) {\n  try {\n    const data = await fetchDataForKey(nodeID);\n    const center = data.center.map(({\n      id,\n      label,\n      scopenote\n    }) => ({\n      id: id,\n      label: label,\n      scopenote: scopenote\n    }));\n    const parents = data.parents.map(({\n      id,\n      label,\n      scopenote\n    }) => ({\n      id: id,\n      label: label,\n      scopenote: scopenote\n    }));\n    const children = data.children.map(({\n      id,\n      label,\n      scopenote\n    }) => ({\n      id: id,\n      label: label,\n      scopenote: scopenote\n    }));\n    return {\n      center,\n      parents,\n      children\n    };\n  } catch (error) {\n    console.error('Error fetching node data:', error);\n    throw error; // Re-throw the error if you want to handle it further up the call stack\n  }\n}\nfunction defineEdges(data) {\n  const centralNodeId = data.center.id;\n  const edges = [];\n  data.children.forEach(child => {\n    edges.push({\n      source: centralNodeId,\n      target: child.id\n    });\n  });\n  data.parents.forEach(parent => {\n    edges.push({\n      source: parent.id,\n      target: centralNodeId\n    });\n  });\n  return edges;\n}\nconst GraphComponent = () => {\n  _s();\n  const sigma = useSigma();\n  const containerRef = useRef(null);\n  useEffect(() => {\n    const graph = new Graph();\n    nodes.forEach(node => {\n      graph.addNode(node.id, {\n        label: node.label,\n        size: node.size,\n        color: node.color\n      });\n    });\n    edges.forEach(edge => {\n      graph.addEdge(edge.source, edge.target);\n    });\n  }, [sigma]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 10\n  }, this);\n};\n_s(GraphComponent, \"R0bJCO5eGdK7ZLFJaGp7Ix0qrBw=\", false, function () {\n  return [useSigma];\n});\n_c = GraphComponent;\nconst GraphWrapper = () => /*#__PURE__*/_jsxDEV(SigmaContainer, {\n  children: /*#__PURE__*/_jsxDEV(GraphComponent, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 7\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 92,\n  columnNumber: 5\n}, this);\n_c2 = GraphWrapper;\nexport default GraphWrapper;\nvar _c, _c2;\n$RefreshReg$(_c, \"GraphComponent\");\n$RefreshReg$(_c2, \"GraphWrapper\");","map":{"version":3,"names":["React","useEffect","useRef","useState","SigmaContainer","useSigma","Graph","forceAtlas2","ForceAtlas2SynchronousLayoutParameters","useLayoutFactory","jsxDEV","_jsxDEV","fetchDataForKey","key","baseUrl","url","response","fetch","ok","Error","status","data","json","error","console","getNodeData","nodeID","center","map","id","label","scopenote","parents","children","defineEdges","centralNodeId","edges","forEach","child","push","source","target","parent","GraphComponent","_s","sigma","containerRef","graph","nodes","node","addNode","size","color","edge","addEdge","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","GraphWrapper","_c2","$RefreshReg$"],"sources":["D:/code/MeshTree/frontend/src/GraphWrapper2.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport { SigmaContainer, useSigma } from '@react-sigma/core';\r\nimport Graph from 'graphology';\r\nimport forceAtlas2, { ForceAtlas2SynchronousLayoutParameters } from \"graphology-layout-forceatlas2\";\r\nimport { useLayoutFactory } from \"@react-sigma/layout-core\";\r\n\r\nasync function fetchDataForKey(key) {\r\n  const baseUrl = 'http://localhost:5000';\r\n  const url = `${baseUrl}/get/${key}`;\r\n\r\n  try {\r\n    const response = await fetch(url);\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! Status: ${response.status}`);\r\n    }\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error fetching data:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nasync function getNodeData(nodeID) {\r\n  try {\r\n    const data = await fetchDataForKey(nodeID);\r\n\r\n    const center = data.center.map(({ id, label, scopenote }) => ({\r\n      id: id,\r\n      label: label,\r\n      scopenote: scopenote\r\n    }));\r\n\r\n    const parents = data.parents.map(({ id, label, scopenote }) => ({\r\n      id: id,\r\n      label: label,\r\n      scopenote: scopenote\r\n    }));\r\n\r\n    const children = data.children.map(({ id, label, scopenote }) => ({\r\n      id: id,\r\n      label: label,\r\n      scopenote: scopenote\r\n    }));\r\n\r\n    return { center, parents, children };\r\n  } catch (error) {\r\n    console.error('Error fetching node data:', error);\r\n    throw error; // Re-throw the error if you want to handle it further up the call stack\r\n  }\r\n}\r\n\r\nfunction defineEdges(data) {\r\n  const centralNodeId = data.center.id\r\n  const edges = [];\r\n  data.children.forEach((child) => {\r\n    edges.push({ source: centralNodeId, target: child.id });\r\n  });\r\n  data.parents.forEach((parent) => {\r\n    edges.push({ source: parent.id, target: centralNodeId });\r\n  });\r\n  return edges;\r\n}\r\n\r\n\r\nconst GraphComponent = () => {\r\n  const sigma = useSigma();\r\n  const containerRef = useRef(null);\r\n\r\n  useEffect(() =>{\r\n\r\n    const graph = new Graph();\r\n\r\n    nodes.forEach(node => {\r\n      graph.addNode(node.id, {\r\n        label: node.label,\r\n        size: node.size,\r\n        color: node.color\r\n      });\r\n    });\r\n\r\n    edges.forEach(edge => {\r\n     graph.addEdge(edge.source, edge.target);\r\n    });\r\n  \r\n  }, [sigma]);\r\n  return <div ref={containerRef}  />\r\n}\r\n\r\n\r\nconst GraphWrapper = () => (\r\n    <SigmaContainer>\r\n      <GraphComponent />\r\n    </SigmaContainer>\r\n  );\r\n  \r\nexport default GraphWrapper;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}