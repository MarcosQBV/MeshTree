{"ast":null,"code":"var _jsxFileName = \"D:\\\\code\\\\MeshTree\\\\frontend\\\\src\\\\GraphWrapper2.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { SigmaContainer, useSigma } from '@react-sigma/core';\nimport Graph from 'graphology';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nasync function fetchDataForKey(key) {\n  const baseUrl = 'http://localhost:5000';\n  const url = `${baseUrl}/get/${key}`;\n  try {\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    throw error;\n  }\n}\nasync function getNodeData(nodeID) {\n  try {\n    const data = await fetchDataForKey(nodeID);\n    const center = data.central.map(({\n      id,\n      label,\n      scopenote\n    }) => ({\n      id: id,\n      label: label,\n      scopenote: scopenote\n    }));\n    const parents = data.parents.map(({\n      id,\n      label,\n      scopenote\n    }) => ({\n      id: id,\n      label: label,\n      scopenote: scopenote\n    }));\n    const children = data.children.map(({\n      id,\n      label,\n      scopenote\n    }) => ({\n      id: id,\n      label: label,\n      scopenote: scopenote\n    }));\n    return {\n      center,\n      parents,\n      children\n    };\n  } catch (error) {\n    console.error('Error fetching node data:', error);\n    throw error;\n  }\n}\nfunction defineEdges(data) {\n  const centralNodeId = data.central[0].id; // Assuming center is an array with one element\n  const edges = [];\n  data.children.forEach(child => {\n    edges.push({\n      source: centralNodeId,\n      target: child.id\n    });\n  });\n  data.parents.forEach(parent => {\n    edges.push({\n      source: parent.id,\n      target: centralNodeId\n    });\n  });\n  return edges;\n}\nconst GraphComponent = () => {\n  _s();\n  const sigma = useSigma();\n  const containerRef = useRef(null);\n  const graphRef = useRef(new Graph()); // Persistent graph instance\n  const [centralNode, setCentralNode] = useState({\n    id: 'Root',\n    label: 'Root'\n  });\n  const [parentNodes, setParentNodes] = useState([]);\n  const [childNodes, setChildNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const [nodeLevel, setNodeLevel] = useState([]); // Initialize nodeLevel as a state\n  const [centerX, setCenterX] = useState(0); // State for center X coordinate\n  const [centerY, setCenterY] = useState(0); // State for center Y coordinate\n  const [collapsedNodes, setCollapsedNodes] = useState(new Set()); // Track collapsed nodes and their children\n\n  useEffect(() => {\n    async function buildStarterTree(rootID) {\n      try {\n        const data = await getNodeData(rootID);\n        const {\n          center,\n          children\n        } = data;\n\n        // Add the root node\n        const rootNode = center[0];\n        if (!graphRef.current.hasNode(rootNode.id)) {\n          graphRef.current.addNode(rootNode.id, {\n            label: rootNode.label,\n            size: 20,\n            color: 'blue',\n            x: centerX,\n            y: centerY\n          });\n        }\n\n        // Add children nodes\n        const childEdges = defineEdges(data);\n        children.forEach((child, index) => {\n          const angle = index / children.length * 2 * Math.PI;\n          const x = centerX + 100 * Math.cos(angle);\n          const y = centerY + 100 * Math.sin(angle);\n          if (!graphRef.current.hasNode(child.id)) {\n            graphRef.current.addNode(child.id, {\n              label: child.label,\n              size: 15,\n              color: 'green',\n              x: x,\n              y: y\n            });\n          }\n        });\n\n        // Add edges\n        childEdges.forEach(edge => {\n          if (!graphRef.current.hasEdge(edge.source, edge.target)) {\n            graphRef.current.addEdge(edge.source, edge.target);\n          }\n        });\n\n        // Update state\n        setCentralNode(rootNode);\n        setChildNodes(children);\n        setEdges(childEdges);\n      } catch (error) {\n        console.error('Error building parent tree:', error);\n      }\n    }\n    buildStarterTree('Root'); // Call the function with the root node ID\n  }, [sigma, centerX, centerY]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 10\n  }, this);\n};\n_s(GraphComponent, \"cuachKcD9TZCEmXSjogY/NEQnrQ=\", false, function () {\n  return [useSigma];\n});\n_c = GraphComponent;\nconst GraphWrapper = () => /*#__PURE__*/_jsxDEV(SigmaContainer, {\n  children: /*#__PURE__*/_jsxDEV(GraphComponent, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 135,\n  columnNumber: 3\n}, this);\n_c2 = GraphWrapper;\nexport default GraphWrapper;\nvar _c, _c2;\n$RefreshReg$(_c, \"GraphComponent\");\n$RefreshReg$(_c2, \"GraphWrapper\");","map":{"version":3,"names":["React","useEffect","useRef","useState","SigmaContainer","useSigma","Graph","jsxDEV","_jsxDEV","fetchDataForKey","key","baseUrl","url","response","fetch","ok","Error","status","data","json","error","console","getNodeData","nodeID","center","central","map","id","label","scopenote","parents","children","defineEdges","centralNodeId","edges","forEach","child","push","source","target","parent","GraphComponent","_s","sigma","containerRef","graphRef","centralNode","setCentralNode","parentNodes","setParentNodes","childNodes","setChildNodes","setEdges","nodeLevel","setNodeLevel","centerX","setCenterX","centerY","setCenterY","collapsedNodes","setCollapsedNodes","Set","buildStarterTree","rootID","rootNode","current","hasNode","addNode","size","color","x","y","childEdges","index","angle","length","Math","PI","cos","sin","edge","hasEdge","addEdge","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","GraphWrapper","_c2","$RefreshReg$"],"sources":["D:/code/MeshTree/frontend/src/GraphWrapper2.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport { SigmaContainer, useSigma } from '@react-sigma/core';\r\nimport Graph from 'graphology';\r\n\r\nasync function fetchDataForKey(key) {\r\n  const baseUrl = 'http://localhost:5000';\r\n  const url = `${baseUrl}/get/${key}`;\r\n\r\n  try {\r\n    const response = await fetch(url);\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! Status: ${response.status}`);\r\n    }\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error fetching data:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nasync function getNodeData(nodeID) {\r\n  try {\r\n    const data = await fetchDataForKey(nodeID);\r\n\r\n    const center = data.central.map(({ id, label, scopenote }) => ({\r\n      id: id,\r\n      label: label,\r\n      scopenote: scopenote\r\n    }));\r\n\r\n    const parents = data.parents.map(({ id, label, scopenote }) => ({\r\n      id: id,\r\n      label: label,\r\n      scopenote: scopenote\r\n    }));\r\n\r\n    const children = data.children.map(({ id, label, scopenote }) => ({\r\n      id: id,\r\n      label: label,\r\n      scopenote: scopenote\r\n    }));\r\n\r\n    return { center, parents, children };\r\n  } catch (error) {\r\n    console.error('Error fetching node data:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nfunction defineEdges(data) {\r\n  const centralNodeId = data.central[0].id; // Assuming center is an array with one element\r\n  const edges = [];\r\n  data.children.forEach((child) => {\r\n    edges.push({ source: centralNodeId, target: child.id });\r\n  });\r\n  data.parents.forEach((parent) => {\r\n    edges.push({ source: parent.id, target: centralNodeId });\r\n  });\r\n  return edges;\r\n}\r\n\r\nconst GraphComponent = () => {\r\n  const sigma = useSigma();\r\n  const containerRef = useRef(null);\r\n  const graphRef = useRef(new Graph()); // Persistent graph instance\r\n  const [centralNode, setCentralNode] = useState({ id: 'Root', label: 'Root' });\r\n  const [parentNodes, setParentNodes] = useState([]);\r\n  const [childNodes, setChildNodes] = useState([]);\r\n  const [edges, setEdges] = useState([]);\r\n  const [nodeLevel, setNodeLevel] = useState([]); // Initialize nodeLevel as a state\r\n  const [centerX, setCenterX] = useState(0); // State for center X coordinate\r\n  const [centerY, setCenterY] = useState(0); // State for center Y coordinate\r\n  const [collapsedNodes, setCollapsedNodes] = useState(new Set()); // Track collapsed nodes and their children\r\n\r\n  useEffect(() => {\r\n    async function buildStarterTree(rootID) {\r\n      try {\r\n        const data = await getNodeData(rootID);\r\n        const { center, children } = data;\r\n\r\n        // Add the root node\r\n        const rootNode = center[0];\r\n        if (!graphRef.current.hasNode(rootNode.id)) {\r\n          graphRef.current.addNode(rootNode.id, {\r\n            label: rootNode.label,\r\n            size: 20,\r\n            color: 'blue',\r\n            x: centerX,\r\n            y: centerY\r\n          });\r\n        }\r\n\r\n        // Add children nodes\r\n        const childEdges = defineEdges(data);\r\n        children.forEach((child, index) => {\r\n          const angle = (index / children.length) * 2 * Math.PI;\r\n          const x = centerX + 100 * Math.cos(angle);\r\n          const y = centerY + 100 * Math.sin(angle);\r\n\r\n          if (!graphRef.current.hasNode(child.id)) {\r\n            graphRef.current.addNode(child.id, {\r\n              label: child.label,\r\n              size: 15,\r\n              color: 'green',\r\n              x: x,\r\n              y: y\r\n            });\r\n          }\r\n        });\r\n\r\n        // Add edges\r\n        childEdges.forEach(edge => {\r\n          if (!graphRef.current.hasEdge(edge.source, edge.target)) {\r\n            graphRef.current.addEdge(edge.source, edge.target);\r\n          }\r\n        });\r\n\r\n        // Update state\r\n        setCentralNode(rootNode);\r\n        setChildNodes(children);\r\n        setEdges(childEdges);\r\n      } catch (error) {\r\n        console.error('Error building parent tree:', error);\r\n      }\r\n    }\r\n\r\n    buildStarterTree('Root'); // Call the function with the root node ID\r\n  }, [sigma, centerX, centerY]);\r\n\r\n  return <div ref={containerRef} />;\r\n};\r\n\r\nconst GraphWrapper = () => (\r\n  <SigmaContainer>\r\n    <GraphComponent />\r\n  </SigmaContainer>\r\n);\r\n\r\nexport default GraphWrapper;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}